[{"/home/jb-inc/Desktop/cara-cakes-react-app/src/index.js":"1","/home/jb-inc/Desktop/cara-cakes-react-app/src/App.js":"2","/home/jb-inc/Desktop/cara-cakes-react-app/src/reportWebVitals.js":"3","/home/jb-inc/Desktop/cara-cakes-react-app/src/Components/CartTable/CartTable.component.js":"4","/home/jb-inc/Desktop/cara-cakes-react-app/src/Components/BakerCard/BakerCard.component.js":"5","/home/jb-inc/Desktop/cara-cakes-react-app/src/Components/BakersCard/BakersCard.component.js":"6","/home/jb-inc/Desktop/cara-cakes-react-app/src/Components/CreateEvent/CreateEvent.component.js":"7","/home/jb-inc/Desktop/cara-cakes-react-app/src/Components/ButtonTwo/ButtonTwo.component.js":"8","/home/jb-inc/Desktop/cara-cakes-react-app/src/Components/ButtonThree/ButtonThree.component.js":"9","/home/jb-inc/Desktop/cara-cakes-react-app/src/Components/Button/Button.component.js":"10","/home/jb-inc/Desktop/cara-cakes-react-app/src/Components/Button/Link.component.js":"11","/home/jb-inc/Desktop/cara-cakes-react-app/src/Components/CircleProgress/CircleProgess.section.js":"12","/home/jb-inc/Desktop/cara-cakes-react-app/src/Components/BakerInfo/BakerInfo.component.js":"13","/home/jb-inc/Desktop/cara-cakes-react-app/src/Components/BakersTable/BakerTable.component.js":"14","/home/jb-inc/Desktop/cara-cakes-react-app/src/Components/Activity/Activity.component.js":"15","/home/jb-inc/Desktop/cara-cakes-react-app/src/Components/ActivityTwo/Activity.component.js":"16","/home/jb-inc/Desktop/cara-cakes-react-app/src/Components/BakerDetails/BakerDetails.component.js":"17","/home/jb-inc/Desktop/cara-cakes-react-app/src/Components/AdminImage/AdminImage.component.js":"18","/home/jb-inc/Desktop/cara-cakes-react-app/src/Router/Routes.navigation.js":"19","/home/jb-inc/Desktop/cara-cakes-react-app/src/redux/Reducers/index.js":"20","/home/jb-inc/Desktop/cara-cakes-react-app/src/redux/Reducers/Refresh.reducer.js":"21","/home/jb-inc/Desktop/cara-cakes-react-app/src/redux/Reducers/Data.reducer.js":"22","/home/jb-inc/Desktop/cara-cakes-react-app/src/Screens/index.js":"23","/home/jb-inc/Desktop/cara-cakes-react-app/src/redux/Reducers/Auth.reducer.js":"24","/home/jb-inc/Desktop/cara-cakes-react-app/src/redux/types.js":"25","/home/jb-inc/Desktop/cara-cakes-react-app/src/Screens/Login/Login.screen.js":"26","/home/jb-inc/Desktop/cara-cakes-react-app/src/Screens/Register/Register.screen.js":"27","/home/jb-inc/Desktop/cara-cakes-react-app/src/Screens/AdminLogin/Admin.screen.js":"28","/home/jb-inc/Desktop/cara-cakes-react-app/src/Screens/Admin/Admin.screen.js":"29","/home/jb-inc/Desktop/cara-cakes-react-app/src/Screens/Home/Home.screen.js":"30","/home/jb-inc/Desktop/cara-cakes-react-app/src/Screens/User/User.screen.js":"31","/home/jb-inc/Desktop/cara-cakes-react-app/src/Components/index.js":"32","/home/jb-inc/Desktop/cara-cakes-react-app/src/sections/index.js":"33","/home/jb-inc/Desktop/cara-cakes-react-app/src/res/img/index.js":"34","/home/jb-inc/Desktop/cara-cakes-react-app/src/Components/Header/Header.component.js":"35","/home/jb-inc/Desktop/cara-cakes-react-app/src/Components/One/ButtonOne.component.js":"36","/home/jb-inc/Desktop/cara-cakes-react-app/src/Components/Links/Links.component.js":"37","/home/jb-inc/Desktop/cara-cakes-react-app/src/Components/One/LinkOne.component.js":"38","/home/jb-inc/Desktop/cara-cakes-react-app/src/Components/SampleCard/SampleCard.component.js":"39","/home/jb-inc/Desktop/cara-cakes-react-app/src/Components/WorkArea/WorkArea.component.js":"40","/home/jb-inc/Desktop/cara-cakes-react-app/src/Components/NavBar/NavBar.component.js":"41","/home/jb-inc/Desktop/cara-cakes-react-app/src/Components/Spacer/Spacer.component.js":"42","/home/jb-inc/Desktop/cara-cakes-react-app/src/Components/SearchBar/SearchBar.component.js":"43","/home/jb-inc/Desktop/cara-cakes-react-app/src/Components/Profile/Profile.component.js":"44","/home/jb-inc/Desktop/cara-cakes-react-app/src/Components/OrderTable/OrderTable.component.js":"45","/home/jb-inc/Desktop/cara-cakes-react-app/src/Components/DatePicker/DatePicker.component.js":"46","/home/jb-inc/Desktop/cara-cakes-react-app/src/Components/RadioButtons/RadioButtons.component.js":"47","/home/jb-inc/Desktop/cara-cakes-react-app/src/Components/EventCard/EventCard.component.js":"48","/home/jb-inc/Desktop/cara-cakes-react-app/src/Components/PastryCard/PastryCard.component.js":"49","/home/jb-inc/Desktop/cara-cakes-react-app/src/Components/Input/TextArea.component.js":"50","/home/jb-inc/Desktop/cara-cakes-react-app/src/Components/InfoCard/InfoCard.component.js":"51","/home/jb-inc/Desktop/cara-cakes-react-app/src/Components/Input/Input.component.js":"52","/home/jb-inc/Desktop/cara-cakes-react-app/src/Components/Language/Language.component.js":"53","/home/jb-inc/Desktop/cara-cakes-react-app/src/Components/UserInfo/UserInfo.component.js":"54","/home/jb-inc/Desktop/cara-cakes-react-app/src/Components/UsersTable/UserTable.component.js":"55","/home/jb-inc/Desktop/cara-cakes-react-app/src/Components/PastriesTable/PastryTable.component.js":"56","/home/jb-inc/Desktop/cara-cakes-react-app/src/Components/SquareInput/SquareInput.component.js":"57","/home/jb-inc/Desktop/cara-cakes-react-app/src/Components/PastriesTableSuper/PastryTable.component.js":"58","/home/jb-inc/Desktop/cara-cakes-react-app/src/Components/SquareInput/SquareTextArea.component.js":"59","/home/jb-inc/Desktop/cara-cakes-react-app/src/Components/SquareInput/SquareImg.component.js":"60","/home/jb-inc/Desktop/cara-cakes-react-app/src/Components/PastryDetail/PastryDetail.component.js":"61","/home/jb-inc/Desktop/cara-cakes-react-app/src/Components/PastryCart/PastryCart.component.js":"62","/home/jb-inc/Desktop/cara-cakes-react-app/src/Components/Notification/Notification.component.js":"63","/home/jb-inc/Desktop/cara-cakes-react-app/src/sections/AboutSection/About.section.js":"64","/home/jb-inc/Desktop/cara-cakes-react-app/src/Components/OrdersTable/OrderTable.component.js":"65","/home/jb-inc/Desktop/cara-cakes-react-app/src/Components/Verification/Verification.component.js":"66","/home/jb-inc/Desktop/cara-cakes-react-app/src/sections/Header/Header.section.js":"67","/home/jb-inc/Desktop/cara-cakes-react-app/src/sections/Sample/Sample.section.js":"68","/home/jb-inc/Desktop/cara-cakes-react-app/src/sections/Login/Login.section.js":"69","/home/jb-inc/Desktop/cara-cakes-react-app/src/sections/Footer/Footer.section.js":"70","/home/jb-inc/Desktop/cara-cakes-react-app/src/sections/Register/Register.section.js":"71","/home/jb-inc/Desktop/cara-cakes-react-app/src/sections/SideNav/SideNav.section.js":"72","/home/jb-inc/Desktop/cara-cakes-react-app/src/sections/Contact/Contact.section.js":"73","/home/jb-inc/Desktop/cara-cakes-react-app/src/sections/Shop/index.js":"74","/home/jb-inc/Desktop/cara-cakes-react-app/src/sections/Baker/Baker.section.js":"75","/home/jb-inc/Desktop/cara-cakes-react-app/src/sections/Events/Event.section.js":"76","/home/jb-inc/Desktop/cara-cakes-react-app/src/sections/AddEvent/AddEvent.section.js":"77","/home/jb-inc/Desktop/cara-cakes-react-app/src/sections/AdminNav/AdminNav.section.js":"78","/home/jb-inc/Desktop/cara-cakes-react-app/src/sections/EditEvent/EditEvent.section.js":"79","/home/jb-inc/Desktop/cara-cakes-react-app/src/sections/Order/Order.section.js":"80","/home/jb-inc/Desktop/cara-cakes-react-app/src/sections/Bakers/Baker.section.js":"81","/home/jb-inc/Desktop/cara-cakes-react-app/src/sections/Cart/Cart.section.js":"82","/home/jb-inc/Desktop/cara-cakes-react-app/src/sections/Users/User.section.js":"83","/home/jb-inc/Desktop/cara-cakes-react-app/src/sections/Pastry/Pastry.section.js":"84","/home/jb-inc/Desktop/cara-cakes-react-app/src/sections/Orders/Order.section.js":"85","/home/jb-inc/Desktop/cara-cakes-react-app/src/sections/PastrySuper/Pastry.section.js":"86","/home/jb-inc/Desktop/cara-cakes-react-app/src/sections/BakerDetails/BakerDetails.section.js":"87","/home/jb-inc/Desktop/cara-cakes-react-app/src/sections/Dashboard/Dashboard.section.js":"88","/home/jb-inc/Desktop/cara-cakes-react-app/src/sections/AdminProfile/AdminProfile.section.js":"89","/home/jb-inc/Desktop/cara-cakes-react-app/src/sections/Details/Details.section.js":"90","/home/jb-inc/Desktop/cara-cakes-react-app/src/sections/AddPastry/AddPastry.section.js":"91","/home/jb-inc/Desktop/cara-cakes-react-app/src/redux/Actions/Refresh.actions.js":"92","/home/jb-inc/Desktop/cara-cakes-react-app/src/utils/search.js":"93","/home/jb-inc/Desktop/cara-cakes-react-app/src/redux/Actions/Auth.actions.js":"94","/home/jb-inc/Desktop/cara-cakes-react-app/src/utils/globalVariable.js":"95","/home/jb-inc/Desktop/cara-cakes-react-app/src/utils/auth.js":"96","/home/jb-inc/Desktop/cara-cakes-react-app/src/utils/utilities.js":"97","/home/jb-inc/Desktop/cara-cakes-react-app/src/sections/Shop/PastryShop/Pastry.section.js":"98","/home/jb-inc/Desktop/cara-cakes-react-app/src/redux/Actions/Data.actions.js":"99","/home/jb-inc/Desktop/cara-cakes-react-app/src/sections/Order/OrderDetail/Order.detail.js":"100","/home/jb-inc/Desktop/cara-cakes-react-app/src/sections/Events/EventDetail/Event.detail.js":"101","/home/jb-inc/Desktop/cara-cakes-react-app/src/sections/Events/EventList/Event.list.js":"102","/home/jb-inc/Desktop/cara-cakes-react-app/src/sections/Order/OrderList/Order.list.js":"103","/home/jb-inc/Desktop/cara-cakes-react-app/src/sections/Cart/CartList/Cart.list.js":"104","/home/jb-inc/Desktop/cara-cakes-react-app/src/sections/Shop/BakerShop/Baker.section.js":"105","/home/jb-inc/Desktop/cara-cakes-react-app/src/sections/Shop/PastryShop/PastryList/Pastry.list.js":"106","/home/jb-inc/Desktop/cara-cakes-react-app/src/sections/Shop/BakerShop/BakerList/Baker.list.js":"107","/home/jb-inc/Desktop/cara-cakes-react-app/src/sections/OrdersSuper/Order.section.js":"108","/home/jb-inc/Desktop/cara-cakes-react-app/src/Components/SOrdersTable/OrderTable.component.js":"109","/home/jb-inc/Desktop/cara-cakes-react-app/src/Components/UserDetails/UserDetails.component.js":"110","/home/jb-inc/Desktop/cara-cakes-react-app/src/Components/OrderDetails/OrderDetails.component.js":"111","/home/jb-inc/Desktop/cara-cakes-react-app/src/sections/UserProfile/UserProfile.section.js":"112","/home/jb-inc/Desktop/cara-cakes-react-app/src/Components/UserImage/UserImage.component.js":"113","/home/jb-inc/Desktop/cara-cakes-react-app/src/sections/EditPastry/EditPastry.section.js":"114","/home/jb-inc/Desktop/cara-cakes-react-app/src/Components/PastryFilter/PastryFilter.section.js":"115","/home/jb-inc/Desktop/cara-cakes-react-app/src/Components/OrderFilter/OrderFilter.section.js":"116","/home/jb-inc/Desktop/cara-cakes-react-app/src/sections/Profile/Profile.section.js":"117","/home/jb-inc/Desktop/cara-cakes-react-app/src/Components/AImage/AImage.component.js":"118","/home/jb-inc/Desktop/cara-cakes-react-app/src/sections/EditPassword/EditPassword.section.js":"119"},{"size":512,"mtime":1616967156312,"results":"120","hashOfConfig":"121"},{"size":507,"mtime":1616967251902,"results":"122","hashOfConfig":"121"},{"size":362,"mtime":1606471040948,"results":"123","hashOfConfig":"121"},{"size":9368,"mtime":1617406109548,"results":"124","hashOfConfig":"121"},{"size":5463,"mtime":1617401121490,"results":"125","hashOfConfig":"121"},{"size":1068,"mtime":1617192270162,"results":"126","hashOfConfig":"121"},{"size":334,"mtime":1616967155352,"results":"127","hashOfConfig":"121"},{"size":359,"mtime":1616967155320,"results":"128","hashOfConfig":"121"},{"size":316,"mtime":1616967155296,"results":"129","hashOfConfig":"121"},{"size":374,"mtime":1616967155260,"results":"130","hashOfConfig":"121"},{"size":332,"mtime":1616967155288,"results":"131","hashOfConfig":"121"},{"size":498,"mtime":1616967155344,"results":"132","hashOfConfig":"121"},{"size":3904,"mtime":1617478712894,"results":"133","hashOfConfig":"121"},{"size":7330,"mtime":1617025567793,"results":"134","hashOfConfig":"121"},{"size":291,"mtime":1616967155132,"results":"135","hashOfConfig":"121"},{"size":295,"mtime":1616967155152,"results":"136","hashOfConfig":"121"},{"size":8300,"mtime":1617478697757,"results":"137","hashOfConfig":"121"},{"size":4135,"mtime":1617478594557,"results":"138","hashOfConfig":"121"},{"size":634,"mtime":1616967156100,"results":"139","hashOfConfig":"121"},{"size":266,"mtime":1616967156432,"results":"140","hashOfConfig":"121"},{"size":367,"mtime":1616967156432,"results":"141","hashOfConfig":"121"},{"size":923,"mtime":1617400868498,"results":"142","hashOfConfig":"121"},{"size":346,"mtime":1616967156292,"results":"143","hashOfConfig":"121"},{"size":645,"mtime":1617470251822,"results":"144","hashOfConfig":"121"},{"size":476,"mtime":1617470138686,"results":"145","hashOfConfig":"121"},{"size":435,"mtime":1616967156192,"results":"146","hashOfConfig":"121"},{"size":4696,"mtime":1616967156192,"results":"147","hashOfConfig":"121"},{"size":5777,"mtime":1617458004116,"results":"148","hashOfConfig":"121"},{"size":1185,"mtime":1617885350264,"results":"149","hashOfConfig":"121"},{"size":577,"mtime":1616967156176,"results":"150","hashOfConfig":"121"},{"size":1286,"mtime":1617403618597,"results":"151","hashOfConfig":"121"},{"size":3906,"mtime":1617908480348,"results":"152","hashOfConfig":"121"},{"size":2042,"mtime":1617909738608,"results":"153","hashOfConfig":"121"},{"size":2358,"mtime":1616967157220,"results":"154","hashOfConfig":"121"},{"size":434,"mtime":1616967155372,"results":"155","hashOfConfig":"121"},{"size":356,"mtime":1616967155512,"results":"156","hashOfConfig":"121"},{"size":255,"mtime":1616967155456,"results":"157","hashOfConfig":"121"},{"size":386,"mtime":1616967155528,"results":"158","hashOfConfig":"121"},{"size":2257,"mtime":1617141358785,"results":"159","hashOfConfig":"121"},{"size":618,"mtime":1617479404364,"results":"160","hashOfConfig":"121"},{"size":1636,"mtime":1617907459169,"results":"161","hashOfConfig":"121"},{"size":183,"mtime":1616967155796,"results":"162","hashOfConfig":"121"},{"size":1188,"mtime":1616967155756,"results":"163","hashOfConfig":"121"},{"size":703,"mtime":1617484452968,"results":"164","hashOfConfig":"121"},{"size":8117,"mtime":1617409449811,"results":"165","hashOfConfig":"121"},{"size":491,"mtime":1616967155356,"results":"166","hashOfConfig":"121"},{"size":549,"mtime":1616967155724,"results":"167","hashOfConfig":"121"},{"size":1429,"mtime":1616967155360,"results":"168","hashOfConfig":"121"},{"size":6218,"mtime":1617402734615,"results":"169","hashOfConfig":"121"},{"size":986,"mtime":1616967155440,"results":"170","hashOfConfig":"121"},{"size":586,"mtime":1616967155396,"results":"171","hashOfConfig":"121"},{"size":970,"mtime":1616967155424,"results":"172","hashOfConfig":"121"},{"size":1164,"mtime":1616967155444,"results":"173","hashOfConfig":"121"},{"size":3910,"mtime":1617471498406,"results":"174","hashOfConfig":"121"},{"size":6486,"mtime":1617367193586,"results":"175","hashOfConfig":"121"},{"size":4911,"mtime":1617367316218,"results":"176","hashOfConfig":"121"},{"size":736,"mtime":1616967155812,"results":"177","hashOfConfig":"121"},{"size":2329,"mtime":1617368984386,"results":"178","hashOfConfig":"121"},{"size":699,"mtime":1616967155828,"results":"179","hashOfConfig":"121"},{"size":971,"mtime":1616967155812,"results":"180","hashOfConfig":"121"},{"size":11686,"mtime":1617395482990,"results":"181","hashOfConfig":"121"},{"size":10561,"mtime":1617031633728,"results":"182","hashOfConfig":"121"},{"size":709,"mtime":1616967155488,"results":"183","hashOfConfig":"121"},{"size":4540,"mtime":1616967157576,"results":"184","hashOfConfig":"121"},{"size":5488,"mtime":1617322429028,"results":"185","hashOfConfig":"121"},{"size":1092,"mtime":1616967155996,"results":"186","hashOfConfig":"121"},{"size":793,"mtime":1616967157896,"results":"187","hashOfConfig":"121"},{"size":2664,"mtime":1617136724183,"results":"188","hashOfConfig":"121"},{"size":8543,"mtime":1617218898226,"results":"189","hashOfConfig":"121"},{"size":3575,"mtime":1616967157876,"results":"190","hashOfConfig":"121"},{"size":9421,"mtime":1617111437233,"results":"191","hashOfConfig":"121"},{"size":3153,"mtime":1617193781990,"results":"192","hashOfConfig":"121"},{"size":2235,"mtime":1616967157748,"results":"193","hashOfConfig":"121"},{"size":127,"mtime":1616967158152,"results":"194","hashOfConfig":"121"},{"size":1830,"mtime":1617193372506,"results":"195","hashOfConfig":"121"},{"size":1063,"mtime":1616967157828,"results":"196","hashOfConfig":"121"},{"size":1980,"mtime":1616967157588,"results":"197","hashOfConfig":"121"},{"size":7589,"mtime":1617887151576,"results":"198","hashOfConfig":"121"},{"size":2081,"mtime":1616967157820,"results":"199","hashOfConfig":"121"},{"size":486,"mtime":1616967157916,"results":"200","hashOfConfig":"121"},{"size":6188,"mtime":1617488066706,"results":"201","hashOfConfig":"121"},{"size":610,"mtime":1616967157716,"results":"202","hashOfConfig":"121"},{"size":4991,"mtime":1617487803657,"results":"203","hashOfConfig":"121"},{"size":4899,"mtime":1617485573865,"results":"204","hashOfConfig":"121"},{"size":5702,"mtime":1617484647244,"results":"205","hashOfConfig":"121"},{"size":5306,"mtime":1617487293725,"results":"206","hashOfConfig":"121"},{"size":8684,"mtime":1616967157696,"results":"207","hashOfConfig":"121"},{"size":5373,"mtime":1617484279911,"results":"208","hashOfConfig":"121"},{"size":15702,"mtime":1617236710535,"results":"209","hashOfConfig":"121"},{"size":6750,"mtime":1616967157792,"results":"210","hashOfConfig":"121"},{"size":10214,"mtime":1617474346087,"results":"211","hashOfConfig":"121"},{"size":151,"mtime":1616967156392,"results":"212","hashOfConfig":"121"},{"size":384,"mtime":1616967158376,"results":"213","hashOfConfig":"121"},{"size":416,"mtime":1617470148494,"results":"214","hashOfConfig":"121"},{"size":61,"mtime":1616967158364,"results":"215","hashOfConfig":"121"},{"size":291,"mtime":1616967158360,"results":"216","hashOfConfig":"121"},{"size":2329,"mtime":1617201290462,"results":"217","hashOfConfig":"121"},{"size":622,"mtime":1617403527592,"results":"218","hashOfConfig":"121"},{"size":640,"mtime":1617400812380,"results":"219","hashOfConfig":"121"},{"size":2299,"mtime":1616967157928,"results":"220","hashOfConfig":"121"},{"size":2762,"mtime":1616967157836,"results":"221","hashOfConfig":"121"},{"size":781,"mtime":1617482433168,"results":"222","hashOfConfig":"121"},{"size":853,"mtime":1617482664279,"results":"223","hashOfConfig":"121"},{"size":729,"mtime":1617482056568,"results":"224","hashOfConfig":"121"},{"size":639,"mtime":1616967158068,"results":"225","hashOfConfig":"121"},{"size":4217,"mtime":1617481487205,"results":"226","hashOfConfig":"121"},{"size":3726,"mtime":1617480872940,"results":"227","hashOfConfig":"121"},{"size":5609,"mtime":1617486430231,"results":"228","hashOfConfig":"121"},{"size":2786,"mtime":1617368798194,"results":"229","hashOfConfig":"121"},{"size":6561,"mtime":1617394464437,"results":"230","hashOfConfig":"121"},{"size":6090,"mtime":1617406832451,"results":"231","hashOfConfig":"121"},{"size":10903,"mtime":1617483616671,"results":"232","hashOfConfig":"121"},{"size":3903,"mtime":1617378078955,"results":"233","hashOfConfig":"121"},{"size":10817,"mtime":1617302799035,"results":"234","hashOfConfig":"121"},{"size":2096,"mtime":1617407873798,"results":"235","hashOfConfig":"121"},{"size":2276,"mtime":1617409389706,"results":"236","hashOfConfig":"121"},{"size":7547,"mtime":1617911124516,"results":"237","hashOfConfig":"121"},{"size":3896,"mtime":1617908823413,"results":"238","hashOfConfig":"121"},{"size":6390,"mtime":1617912165326,"results":"239","hashOfConfig":"121"},{"filePath":"240","messages":"241","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"242","usedDeprecatedRules":"243"},"njy6to",{"filePath":"244","messages":"245","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"243"},{"filePath":"246","messages":"247","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"243"},{"filePath":"248","messages":"249","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"250","usedDeprecatedRules":"243"},{"filePath":"251","messages":"252","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"253","usedDeprecatedRules":"243"},{"filePath":"254","messages":"255","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"243"},{"filePath":"256","messages":"257","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"243"},{"filePath":"258","messages":"259","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"243"},{"filePath":"260","messages":"261","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"243"},{"filePath":"262","messages":"263","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"243"},{"filePath":"264","messages":"265","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"243"},{"filePath":"266","messages":"267","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"268","usedDeprecatedRules":"243"},{"filePath":"269","messages":"270","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"271","usedDeprecatedRules":"243"},{"filePath":"272","messages":"273","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"274","usedDeprecatedRules":"243"},{"filePath":"275","messages":"276","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"243"},{"filePath":"277","messages":"278","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"279","usedDeprecatedRules":"243"},{"filePath":"280","messages":"281","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"282","usedDeprecatedRules":"243"},{"filePath":"283","messages":"284","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"243"},{"filePath":"285","messages":"286","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"243"},{"filePath":"287","messages":"288","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"243"},{"filePath":"289","messages":"290","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"243"},{"filePath":"291","messages":"292","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"243"},{"filePath":"293","messages":"294","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"243"},{"filePath":"295","messages":"296","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"243"},{"filePath":"297","messages":"298","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"243"},{"filePath":"299","messages":"300","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"243"},{"filePath":"301","messages":"302","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"303","usedDeprecatedRules":"243"},{"filePath":"304","messages":"305","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"306","usedDeprecatedRules":"243"},{"filePath":"307","messages":"308","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"243"},{"filePath":"309","messages":"310","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"243"},{"filePath":"311","messages":"312","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"243"},{"filePath":"313","messages":"314","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"315","messages":"316","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"317","messages":"318","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"243"},{"filePath":"319","messages":"320","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"321","usedDeprecatedRules":"243"},{"filePath":"322","messages":"323","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"243"},{"filePath":"324","messages":"325","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"326","usedDeprecatedRules":"243"},{"filePath":"327","messages":"328","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"243"},{"filePath":"329","messages":"330","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"331","usedDeprecatedRules":"243"},{"filePath":"332","messages":"333","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"334","usedDeprecatedRules":"243"},{"filePath":"335","messages":"336","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"337","messages":"338","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"243"},{"filePath":"339","messages":"340","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"341","usedDeprecatedRules":"243"},{"filePath":"342","messages":"343","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"243"},{"filePath":"344","messages":"345","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"346","usedDeprecatedRules":"243"},{"filePath":"347","messages":"348","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"243"},{"filePath":"349","messages":"350","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"243"},{"filePath":"351","messages":"352","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"353","usedDeprecatedRules":"243"},{"filePath":"354","messages":"355","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"356","usedDeprecatedRules":"243"},{"filePath":"357","messages":"358","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"359","usedDeprecatedRules":"243"},{"filePath":"360","messages":"361","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"243"},{"filePath":"362","messages":"363","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"364","usedDeprecatedRules":"243"},{"filePath":"365","messages":"366","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"243"},{"filePath":"367","messages":"368","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"369","usedDeprecatedRules":"243"},{"filePath":"370","messages":"371","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"372","usedDeprecatedRules":"243"},{"filePath":"373","messages":"374","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"375","usedDeprecatedRules":"243"},{"filePath":"376","messages":"377","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"378","usedDeprecatedRules":"243"},{"filePath":"379","messages":"380","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"381","usedDeprecatedRules":"243"},{"filePath":"382","messages":"383","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"384","usedDeprecatedRules":"243"},{"filePath":"385","messages":"386","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"387","usedDeprecatedRules":"243"},{"filePath":"388","messages":"389","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"390","usedDeprecatedRules":"243"},{"filePath":"391","messages":"392","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"393","usedDeprecatedRules":"243"},{"filePath":"394","messages":"395","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"396","usedDeprecatedRules":"243"},{"filePath":"397","messages":"398","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"243"},{"filePath":"399","messages":"400","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"401","usedDeprecatedRules":"243"},{"filePath":"402","messages":"403","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"404","usedDeprecatedRules":"243"},{"filePath":"405","messages":"406","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"243"},{"filePath":"407","messages":"408","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"409","usedDeprecatedRules":"243"},{"filePath":"410","messages":"411","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"243"},{"filePath":"412","messages":"413","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"414","usedDeprecatedRules":"243"},{"filePath":"415","messages":"416","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"417","usedDeprecatedRules":"243"},{"filePath":"418","messages":"419","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"243"},{"filePath":"420","messages":"421","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"243"},{"filePath":"422","messages":"423","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"243"},{"filePath":"424","messages":"425","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"426","usedDeprecatedRules":"243"},{"filePath":"427","messages":"428","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"243"},{"filePath":"429","messages":"430","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"243"},{"filePath":"431","messages":"432","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"433","usedDeprecatedRules":"243"},{"filePath":"434","messages":"435","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"436","usedDeprecatedRules":"243"},{"filePath":"437","messages":"438","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"243"},{"filePath":"439","messages":"440","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"441","usedDeprecatedRules":"243"},{"filePath":"442","messages":"443","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"444","usedDeprecatedRules":"243"},{"filePath":"445","messages":"446","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"447","usedDeprecatedRules":"243"},{"filePath":"448","messages":"449","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"450","usedDeprecatedRules":"243"},{"filePath":"451","messages":"452","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"453","usedDeprecatedRules":"243"},{"filePath":"454","messages":"455","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"456","usedDeprecatedRules":"243"},{"filePath":"457","messages":"458","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"459","usedDeprecatedRules":"243"},{"filePath":"460","messages":"461","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"462","usedDeprecatedRules":"243"},{"filePath":"463","messages":"464","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"465","usedDeprecatedRules":"243"},{"filePath":"466","messages":"467","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"243"},{"filePath":"468","messages":"469","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"470","usedDeprecatedRules":"243"},{"filePath":"471","messages":"472","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"243"},{"filePath":"473","messages":"474","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"243"},{"filePath":"475","messages":"476","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"243"},{"filePath":"477","messages":"478","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"243"},{"filePath":"479","messages":"480","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"243"},{"filePath":"481","messages":"482","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"243"},{"filePath":"483","messages":"484","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"243"},{"filePath":"485","messages":"486","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"243"},{"filePath":"487","messages":"488","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"489","usedDeprecatedRules":"243"},{"filePath":"490","messages":"491","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"492","usedDeprecatedRules":"243"},{"filePath":"493","messages":"494","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"495","usedDeprecatedRules":"243"},{"filePath":"496","messages":"497","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"498","usedDeprecatedRules":"243"},{"filePath":"499","messages":"500","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"243"},{"filePath":"501","messages":"502","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"243"},{"filePath":"503","messages":"504","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"505","usedDeprecatedRules":"243"},{"filePath":"506","messages":"507","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"508","usedDeprecatedRules":"509"},{"filePath":"510","messages":"511","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"512","usedDeprecatedRules":"243"},{"filePath":"513","messages":"514","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"515","usedDeprecatedRules":"243"},{"filePath":"516","messages":"517","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"518","usedDeprecatedRules":"243"},{"filePath":"519","messages":"520","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"521","usedDeprecatedRules":"243"},{"filePath":"522","messages":"523","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"524","usedDeprecatedRules":"243"},{"filePath":"525","messages":"526","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"527","usedDeprecatedRules":"243"},{"filePath":"528","messages":"529","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"530","usedDeprecatedRules":"243"},{"filePath":"531","messages":"532","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"243"},{"filePath":"533","messages":"534","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"535","usedDeprecatedRules":"243"},{"filePath":"536","messages":"537","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"538","messages":"539","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"540"},{"filePath":"541","messages":"542","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/jb-inc/Desktop/cara-cakes-react-app/src/index.js",["543"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport styles from './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n",["544","545"],"/home/jb-inc/Desktop/cara-cakes-react-app/src/App.js",[],"/home/jb-inc/Desktop/cara-cakes-react-app/src/reportWebVitals.js",[],"/home/jb-inc/Desktop/cara-cakes-react-app/src/Components/CartTable/CartTable.component.js",["546","547","548","549"],"import React, { useEffect, useState } from 'react';\nimport { IoTrashBinSharp } from 'react-icons/io5';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\n\nimport { ActivityTwo, Notification } from '..';\nimport { BASE_URL } from '../../utils/globalVariable';\nimport { Thousand } from '../../utils/utilities';\nimport styles from './CartTable.module.css';\nimport { setRefresh } from '../../redux/Actions/Refresh.actions';\n\nconst CartTable = (props) => { \n    const {isDetail, setIsDetail, setPastry, user, refresh, token} = props;\n\n    const showDetail = (pastry) => {\n        setIsDetail(true);\n        setPastry(pastry);\n    }\n\n    const [loading, setLoading] = useState(false);\n    const [show, setShow] = useState(false);\n    const [_user, setUser] = useState([]);\n    const [message, setMessage] = useState({});\n    const [cart, setCart] = useState({});\n\n    useEffect(() => {\n        props.setRefresh(false);\n    }, [isDetail])\n\n    useEffect(() => {\n        fetch(`${BASE_URL}/user/getcart/${user._id}`, {\n            method: 'GET'\n        })\n        .then(res => {\n            const statusCode = res.status;\n            const response = res.json();\n            return Promise.all([statusCode, response]);\n        })\n        .then(res => {\n            const statusCode = res[0];\n            const response = res[1];\n            setLoading(false);\n\n            if (statusCode === 200) {\n                setUser(response.user);\n                setCart(response.bakers);\n            }\n\n            if (statusCode === 404) {\n                setShow(true);\n                setMessage({\n                    type: 'error',\n                    title: 'Unexpected Error',\n                    message: response.message,\n                })\n            }\n\n            if (statusCode === 500) {\n                setShow(true);\n                setMessage({\n                    type: 'error',\n                    title: 'Unexpected Error',\n                    message: response.message,\n                })\n            }\n        })\n        .catch(err => {\n            console.log(err);\n            setShow(true);\n            setMessage({\n                type: 'error',\n                title: `Unexpected Error`,\n                message: `Please check your internet connection.`\n            });\n        })\n\n        return () => {\n            setLoading(false);\n            setUser([]);\n            setShow(false);\n            setMessage({});\n            setCart({});\n        }\n    }, [refresh]);\n\n    const Trash = (event, id) => {\n        event.stopPropagation();\n        setLoading(true);\n        fetch(`${BASE_URL}/user/removeFromCart/${id}?user=${user._id}`, {\n            method: 'POST',\n        })\n        .then(res => {\n            const statusCode = res.status;\n            const response = res.json();\n            return Promise.all([statusCode, response]);\n        })\n        .then(res => {\n            const statusCode = res[0];\n            const response = res[1];\n            setLoading(false);\n            props.setRefresh(true);\n\n            if (statusCode === 200) {\n                setShow(true);\n                setMessage({\n                    type: 'success',\n                    message: `Pastry removed from cart`,\n                    title: 'Success'\n                });\n                props.setRefresh(false);\n            }\n            if(statusCode === 422) {\n                setShow(true);\n                setMessage({\n                    type: 'error',\n                    message: `Not removed from cart.`,\n                    title: 'Failed'\n                });\n            }\n\n        })\n        .catch(err => {\n            console.log(err);\n            setLoading(false);\n            setShow(true);\n            setMessage({\n                type: 'error',\n                title: 'Unexpected Error',\n                    message: 'Please check your internet connection.'\n            });\n        })\n    }\n\n    const Order = (id) => {\n        fetch(`${BASE_URL}/create/order/${user._id}?baker=${id}`, {\n            method: 'POST',\n            headers: {\n                'Authorization': `Basic ${token}`,\n                'Content-Type': 'application/json',\n            }\n        })\n            .then(res => {\n                const statusCode = res.status;\n                const response = res.json();\n                return Promise.all([statusCode, response]);\n            })\n            .then(res => {\n                const statusCode = res[0];\n                const response = res[1];\n                setLoading(false);\n\n                if (statusCode === 200) {\n                    console.log('here', 'response');\n                    setShow(true);\n                    setMessage({\n                        title: 'Success',\n                        message: 'Successfully placed your order',\n                    });\n                    setTimeout(() => {\n                        props.setRefresh(true);                        \n                    }, 2000);\n                }\n            })\n            .catch(err => {\n                setLoading(false);\n                console.log(err);\n                setShow(true);\n                setMessage({\n                    title: 'Unexpected Error',\n                    message: 'Please check your internet connection.',\n                });\n        })\n    }\n\n    return (\n        <>\n            {loading ? <div>\n                <ActivityTwo />\n            </div> : <>\n                {Object.values(cart).map((pastries, index) => (\n                    <div className={styles.cartSeparator} key={ index }>\n                        <h1 className={styles.cartListBaker}>Company: {Object.keys(cart)[index]} {_user.find(data => data.pastryId.creator.companyName === `${Object.keys(cart)[index]}`).pastryId.creator.suspend && <span className={styles.suspended}>Suspended, order at your own discretion.</span>}</h1>\n                        <table className={styles.cartTable}>\n                            <thead className={styles.cartTableHeader}>\n                                <td className={styles.cartTableHeadeData}>Product</td>\n                                <td className={styles.cartTableHeaderData}>Price</td>\n                                <td className={styles.cartTableHeaderData}>Discount</td>\n                                <td className={styles.cartTableHeaderData}>Quantity</td>\n                                <td className={styles.cartTableHeaderData}>Total</td>\n                            </thead>\n\n                        {pastries.map((pastry, index) => \n                            <tr className={styles.cartTableRow} onClick={() => showDetail(pastry)} key={index}>\n                                <td className={[styles.cartTableData, styles.cartTableImageContainer].join(' ')}>\n                                    <img src={`${BASE_URL}/${pastry.pastryId.image}`} alt={pastry.pastryId.name} className={styles.cartTableDataImage} />\n                                    <b>{pastry.pastryId.name}</b>\n                                </td>\n                                <td className={styles.cartTableData}>{Thousand(pastry.pastryId.price)}</td>\n                                <td className={styles.cartTableData}>{pastry.pastryId.discount}%</td>\n                                <td className={styles.cartTableData}>{pastry.quantity} <button className={[styles.cartDelete, styles.suspend].join(' ')} onClick={(event) => Trash(event, pastry.pastryId._id)}><IoTrashBinSharp /></button></td>\n                                <td className={styles.cartTableData}>{Thousand(pastry.quantity * pastry.pastryId.price)}</td>\n                            </tr>\n                        )}\n                            <tr className={styles.cartTableRow}>\n                                <td colSpan=\"3\" className={[styles.cartTableData, styles.cartCoupon].join(' ')}>\n                                    <input type=\"text\" placeholder=\"Coupon Code\" className={styles.cartCouponInput} /> \n                                    <button className={styles.cartButton}>Apply</button>\n                                </td>\n                                <td colSpan=\"1\" className={[styles.cartTableData, styles.cartCoupon].join(' ')}>\n                                    <button className={styles.cartButton} onClick={() => Order(_user.find(data => data.pastryId.creator.companyName === `${Object.keys(cart)[index]}`).pastryId.creator._id)}>Order</button>\n                                </td>\n                                <td colSpan=\"1\" className={styles.cartTableData}>Total: {Thousand(Object.values(cart)[index].reduce((sum, pastry) => sum + (pastry.pastryId.discount ? (((100 - pastry.pastryId.discount)/100) * pastry.pastryId.price * pastry.quantity) : (pastry.pastryId.price * pastry.quantity)), 0))}</td>\n                            </tr>\n                        </table>\n                    </div>\n                ))}\n                <Notification setShow={setShow} show={show} message={message} />\n            </>}\n        </>\n    )\n}\n\nconst mapStateToProps = ({auth, refresh}) => {\n    return {\n        user: auth.user,\n        token: auth.token,\n        refresh: refresh.refresh\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return bindActionCreators({ setRefresh }, dispatch);\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CartTable);\n","/home/jb-inc/Desktop/cara-cakes-react-app/src/Components/BakerCard/BakerCard.component.js",["550","551"],"import React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { IoPeople, IoThumbsDown, IoThumbsUp } from 'react-icons/io5';\n\nimport { Button } from '..';\nimport { logo5, vals3 } from '../../res/img';\nimport styles from './BakerCard.module.css';\nimport {setBaker} from '../../redux/Actions/Auth.actions';\nimport { BASE_URL } from '../../utils/globalVariable';\nimport { Thousand } from '../../utils/utilities';\nimport { setCategories } from '../../redux/Actions/Data.actions';\n\nconst BakerCard = (props) => {\n    const { isDetail, setIsDetail, baker, _setBaker, user } = props;\n    \n    const [dislikes, setDislikes] = useState(baker.dislikes.users.length);\n    const [likes, setLikes] = useState(baker.likes.users.length);\n    const [loading, setLoading] = useState(false);\n    const [followers, setFollowers] = useState(baker.followers.users.length);\n\n    const showDetail = (baker) => {\n        _setBaker(baker);\n        setIsDetail(true);\n    }\n\n    const bakerShop = (baker) => {\n        props.setBaker(baker._id);\n        props.setCategories(baker.categories);\n        props.history.push({pathname: '/user/shop/pastries'})\n    }\n\n    const disLikeBaker = (id) => {\n        setLoading(true);\n        fetch(`${BASE_URL}/baker/dislike/${id}?user=${user._id}`, {\n            method: 'POST',\n        })\n        .then(res => {\n            const statusCode = res.status;\n            const response = res.json();\n            return Promise.all([statusCode, response]);\n        })\n        .then(res => {\n            const statusCode = res[0];\n            const response = res[1].baker;\n            setLoading(false);\n\n            if (statusCode === 200) {\n                setLikes(response.likes.users.length);\n                setDislikes(response.dislikes.users.length);\n            }\n\n            if (statusCode === 500) {\n                console.log('error');\n            }\n        })\n        .catch(err => {\n            console.log(err);\n        })\n    }\n\n    const likeBaker = (id) => {\n        setLoading(true);\n        fetch(`${BASE_URL}/baker/like/${id}?user=${user._id}`, {\n            method: 'POST',\n        })\n        .then(res => {\n            const statusCode = res.status;\n            const response = res.json();\n            return Promise.all([statusCode, response]);\n        })\n        .then(res => {\n            const statusCode = res[0];\n            const response = res[1].baker;\n            setLoading(false);\n            if (statusCode === 200) {\n                setLikes(response.likes.users.length);\n                setDislikes(response.dislikes.users.length);\n            }\n\n            if (statusCode === 404) {\n                console.log('response')\n            }\n\n            if (statusCode === 500) {\n                console.log('error 500');\n            }\n        })\n        .catch(err => {\n            console.log(err, 'ksjdkfljlsjf');\n        })\n    }\n\n    const followBaker = (id) => {\n        setLoading(true);\n        fetch(`${BASE_URL}/baker/follow/${id}?user=${user._id}`, {\n            method: 'POST',\n        })\n        .then(res => {\n            const statusCode = res.status;\n            const response = res.json();\n            return Promise.all([statusCode, response]);\n        })\n        .then(res => {\n            const statusCode = res[0];\n            const response = res[1].baker;\n            setLoading(false);\n            if (statusCode === 200) {\n                setFollowers(response.followers.users.length);\n            }\n\n            if (statusCode === 404) {\n                console.log('response');\n            }\n\n            if (statusCode === 500) {\n                console.log('error 500');\n            }\n        })\n        .catch(err => {\n            console.log(err, 'ksjdkfljlsjf');\n        })\n    }\n\n    return (\n            <div className={styles.bakerListImgContainer}>\n                <div className={styles.bakerListTitle}>\n                    <h2>{baker.companyName}</h2>\n            </div>\n                <div className={styles.bakerDiscount} onClick={() => followBaker(baker._id || '')}><IoPeople className={styles.icon} /> Followers: {Thousand(followers)}</div>\n                <img src={baker.ceoImage ? `${BASE_URL}/${baker.ceoImage}` : vals3} alt={baker.name} className={styles.bakerListImg} />\n                <div className={styles.bakerLikes} onClick={() => likeBaker(baker._id || '')}><IoThumbsUp className={styles.icon} /> Likes: {Thousand(likes)}</div>\n                <div className={styles.bakerDislikes} onClick={() => disLikeBaker(baker._id || '')}><IoThumbsDown className={styles.icon} /> Dislikes: {Thousand(dislikes)}</div>\n                <div className={styles.bakerListImgLogoContainer}>\n                    <img src={baker.companyImage ? `${BASE_URL}/${baker.companyImage}` : logo5} alt=\"Product\" className={styles.bakerListImgLogo}/>\n                </div>\n                <div className={styles.bakersButtonContainer}>\n                    <Button onClick={() => showDetail(baker)} title=\"Details\" />\n                    <Button onClick={() => bakerShop(baker)} title=\"Shop\" />\n                </div>\n            </div>\n    )\n}\n\nconst mapStateToProps = ({ auth }) => {\n    return {\n        user: auth.user,\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return bindActionCreators({setBaker, setCategories}, dispatch);\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(BakerCard);\n","/home/jb-inc/Desktop/cara-cakes-react-app/src/Components/BakersCard/BakersCard.component.js",[],"/home/jb-inc/Desktop/cara-cakes-react-app/src/Components/CreateEvent/CreateEvent.component.js",[],"/home/jb-inc/Desktop/cara-cakes-react-app/src/Components/ButtonTwo/ButtonTwo.component.js",[],"/home/jb-inc/Desktop/cara-cakes-react-app/src/Components/ButtonThree/ButtonThree.component.js",[],"/home/jb-inc/Desktop/cara-cakes-react-app/src/Components/Button/Button.component.js",[],"/home/jb-inc/Desktop/cara-cakes-react-app/src/Components/Button/Link.component.js",[],"/home/jb-inc/Desktop/cara-cakes-react-app/src/Components/CircleProgress/CircleProgess.section.js",["552"],"import React from 'react';\n\nimport styles from './CircleProgess.module.css';\n\nconst CircleProgess = () => {\n    return (\n         <div class=\"pie-wrapper progress-45 style-2\">\n            <span class=\"label\">45<span class=\"smaller\">%</span></span>\n            <div class=\"pie\">\n            <div class=\"left-side half-circle\"></div>\n            <div class=\"right-side half-circle\"></div>\n            </div>\n            <div class=\"shadow\"></div>\n        </div>\n    )\n}\n\nexport default CircleProgess;","/home/jb-inc/Desktop/cara-cakes-react-app/src/Components/BakerInfo/BakerInfo.component.js",["553"],"import React, { useState } from 'react';\nimport { IoThumbsDownSharp, IoThumbsUpSharp } from 'react-icons/io5';\nimport { connect } from 'react-redux';\n\nimport { cups2 } from '../../res/img';\nimport { Thousand } from '../../utils/utilities';\nimport styles from './BakerInfo.module.css';\nimport { BASE_URL } from '../../utils/globalVariable';\nimport { BakerDetails } from '../';\n\nconst BakerInfo = (props) => {\n    const { token, baker, setRbakers, user } = props;\n    const [detail, setDetail] = useState(false);\n    const [_baker, setBaker] = useState([]);\n\n    const ShowDetails = (baker) => {\n        setDetail(true);\n        setBaker(baker);\n    }\n\n    const Suspend = (id) => {\n        fetch(`${BASE_URL}/baker/suspend/${id}`, {\n            method: 'PUT',\n            headers: {\n                'Authorization': `Basic ${token}`\n            }\n        })\n        .then(res => {\n            const statusCode = res.status;\n            const response = res.json();\n            return Promise.all([statusCode, response]);\n        })\n        .then(res => {\n            const statusCode = res[0];\n            const response = res[1];\n\n            if (statusCode === 200) {\n                setRbakers(true);\n            }\n\n        })\n            .catch(err => {\n                console.log(err);\n        })\n    }\n\n    return (\n        <div className={styles.bakerCard}> \n            <div className={styles.bakerInfo}>\n                <img src={cups2} alt=\"Baker name\" className={styles.bakerImg} />\n                <div className={styles.bakerId}>\n                    <h2 className={styles.bakerTitle}>{baker.name}</h2>\n                    <b className={styles.bakerSubTitle}>{baker.companyName}</b>\n                </div>\n                {user.type === 'Admin' &&<button className={styles.bakerButton} onClick={() => ShowDetails(baker)}>Details</button>}\n            </div>\n            <div className={styles.bakerStats}>\n                <div className={styles.bakerNumber}>\n                    <h2 className={styles.bakerTitle}>{baker.orders.ordered.length}</h2>\n                    <b className={styles.bakerSubTitle}>Orders</b>\n                </div>\n                <div className={styles.bakerNumber}>\n                    <h2 className={styles.bakerTitle}>{baker.followers.users.length}</h2>\n                    <b className={styles.bakerSubTitle}>Followers</b>\n                </div>\n                <div className={styles.bakerNumber}>\n                    <h2 className={styles.bakerTitle}>{baker.categories.length}</h2>\n                    <b className={styles.bakerSubTitle}>Categories</b>\n                </div>\n                <div className={styles.bakerNumber}>\n                    <h2 className={styles.bakerTitle}>{Thousand(baker.total)}</h2>\n                    <b className={styles.bakerSubTitle}>Earned</b>\n                </div>\n            </div>\n            <div className={styles.bakerFooter}>\n                {/* <NavLink to=\"#\" className={styles.bakerMsg}><IoMail className={styles.bakerIcon} /> MESSAGE</NavLink> */}\n                <div className={styles.bakerRating}>\n                    <b className={styles.bakerRatingVal}><IoThumbsUpSharp className={styles.bakerRatingIcon} /> {baker.likes.users.length}</b>\n                    <b className={styles.bakerRatingVal}><IoThumbsDownSharp className={styles.bakerRatingIcon} /> {baker.dislikes.users.length}</b>\n                </div>\n                {user.type === 'Admin' && <button className={styles.bakerBtn} onClick={() => Suspend(baker._id)}>{baker.suspend ? 'Unsuspend' : 'Suspend'}</button>}\n            </div>\n            <BakerDetails detail={detail} setDetail={setDetail} baker={_baker} />\n        </div>\n    )\n}\n\nconst mapStateToProps = ({ auth, refresh }) => {\n    return {\n        token: auth.token,\n        refresh: refresh.refresh,\n        user: auth.user,\n    }\n}\n\nexport default connect(mapStateToProps)(BakerInfo);\n","/home/jb-inc/Desktop/cara-cakes-react-app/src/Components/BakersTable/BakerTable.component.js",["554","555","556","557"],"import React, { useEffect, useState } from 'react';\nimport {IoTrashBinSharp } from 'react-icons/io5';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\n\nimport { Notification, Verification } from '..';\nimport { pans2 } from '../../res/img';\nimport { BASE_URL } from '../../utils/globalVariable';\nimport styles from './BakerTable.module.css';\nimport { setRefresh } from '../../redux/Actions/Refresh.actions';\n\nconst BakerTable = (props) => { \n    const {bakers, token, refresh, setDetail, setBaker} = props;\n    const [loading, setLoading] = useState(false);\n    const [show, setShow] = useState(false);\n    const [verify, setVerify] = useState(false);\n    const [message, setMessage] = useState({});\n\n    useEffect(() => {\n        props.setRefresh(false);\n    }, []);\n\n    const ShowDetails = (baker) => {\n        setBaker(baker);\n        setDetail(true);\n    }\n\n    const Delete = (data) => {\n        setVerify(true);\n        setMessage({\n            type: 'danger',\n            data: data,\n            title: 'Deletion imminent',\n            message: `Are you sure you want to delete company ${data.companyName}. They might have pending orders.`\n        })\n    }\n\n    const DeleteAuth = (id) => {\n        fetch(`${BASE_URL}/baker/delete/${id}`, {\n            method: 'DELETE',\n            headers: {\n                'Authorization': `Basic ${token}`\n            }\n        })\n        .then(res => {\n            const statusCode = res.status;\n            const response = res.json();\n            return Promise.all([statusCode, response]);\n        })\n        .then(res => {\n            const statusCode = res[0];\n            const response = res[1];\n            props.setRefresh(true);\n\n            if (statusCode === 200) {\n                setMessage({\n                    type: 'success',\n                    title: 'Success',\n                    message: response.message,\n                })\n                setTimeout(() => {\n                    setVerify(false);\n                }, 2000)\n            }\n\n        })\n            .catch(err => {\n                setShow(true);\n                setMessage({\n                    type: 'error',\n                    title: 'Unexpected Error',\n                    message: 'Please check your internet connection.',\n                })\n        })\n    }\n\n    const Suspend = (id) => {\n        fetch(`${BASE_URL}/baker/suspend/${id}`, {\n            method: 'PUT',\n            headers: {\n                'Authorization': `Basic ${token}`\n            }\n        })\n        .then(res => {\n            const statusCode = res.status;\n            const response = res.json();\n            return Promise.all([statusCode, response]);\n        })\n        .then(res => {\n            const statusCode = res[0];\n            const response = res[1];\n            props.setRefresh(true);\n\n            if (statusCode === 200) {\n                setShow(true);\n                setMessage({\n                    type: 'success',\n                    title: 'Success',\n                    message: response.message,\n                })\n            }\n\n        })\n            .catch(err => {\n            setShow(true);\n            setMessage({\n                type: 'error',\n                title: 'Unexpected Error',\n                message: 'Please check your internet connection.',\n            })\n        })\n    }\n\n    const Verify = (id) => {\n        fetch(`${BASE_URL}/baker/verify/${id}`, {\n            method: 'PUT',\n            headers: {\n                'Authorization': `Basic ${token}`\n            }\n        })\n        .then(res => {\n            const statusCode = res.status;\n            const response = res.json();\n            return Promise.all([statusCode, response]);\n        })\n        .then(res => {\n            const statusCode = res[0];\n            const response = res[1];\n            props.setRefresh(true);\n\n            if (statusCode === 200) {\n                setShow(true);\n                setMessage({\n                    type: 'success',\n                    title: 'Success',\n                    message: response.message,\n                })\n            }\n\n        })\n            .catch(err => {\n            setShow(true);\n            setMessage({\n                type: 'error',\n                title: 'Unexpected Error',\n                message: 'Please check your internet connection.',\n            })\n        })\n    }\n\n    return (\n        <>\n            <div className={styles.cartSeparator}>\n                <table className={styles.cartTable}>\n                    <thead className={styles.cartTableHeader}>\n                        <td className={styles.cartTableHeadeData}>Name</td>\n                        <td className={styles.cartTableHeaderData}>Company</td>\n                        <td className={styles.cartTableHeaderData}>Categories</td>\n                        <td className={styles.cartTableHeaderData}>Suspended</td>\n                        <td className={styles.cartTableHeaderData}>Verified</td>\n                        <td className={styles.cartTableHeaderData}>Actions</td>\n                    </thead>\n                    {bakers.map((baker, index) => \n                        <tr className={styles.cartTableRow}>\n                            <td className={[styles.cartTableData, styles.cartTableImageContainer].join(' ')}>\n                                <img src={baker.companyImage ? `${BASE_URL}/${baker.companyImage}` : pans2} alt=\"Pastry Name\" className={styles.cartTableDataImage} />\n                                <b>{baker.name}</b>\n                            </td>\n                            <td className={styles.cartTableData}>{baker.companyName}</td>\n                            <td className={styles.cartTableData}>{baker.categories.length}</td>\n                            <td className={styles.cartTableData}>{baker.suspend ? 'True' : 'False'}</td>\n                            <td className={styles.cartTableData}>{baker.verify ? 'True' : 'False'}</td>\n                            <td className={styles.cartTableData}>\n                                <button className={[styles.cartButton, styles.suspend].join(' ')} onClick={() => Suspend(baker._id)}>{baker.suspend ? 'Unsuspend' : 'Suspend'}</button>\n                                <button className={[styles.cartButton, styles.verify].join(' ')} onClick={() => Verify(baker._id)}>{baker.verify ? 'Unverify' : 'Verify'}</button>\n                                <button className={[styles.cartButton, styles.details].join(' ')} onClick={() => ShowDetails(baker)}>Details</button>\n                                <button className={[styles.cartDelete, styles.suspend].join(' ')} onClick={() => Delete(baker)}><IoTrashBinSharp /></button>\n                            </td>\n                        </tr>\n                    )}\n                </table>\n            </div>\n            <Notification show={show} setShow={setShow} message={message} />\n            <Verification verify={verify} setVerify={setVerify} message={message} onClick={(id) => DeleteAuth(id)} />\n        </>\n    )\n}\n\nconst mapStateToProps = ({auth, refresh}) => {\n    return {\n        refresh: refresh.refresh,\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return bindActionCreators({setRefresh}, dispatch);\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(BakerTable);\n","/home/jb-inc/Desktop/cara-cakes-react-app/src/Components/Activity/Activity.component.js",[],"/home/jb-inc/Desktop/cara-cakes-react-app/src/Components/ActivityTwo/Activity.component.js",["558"],"import React from 'react';\n\nimport styles from './Activity.module.css'\n\nconst Activity = (props) => {\n    const {size} = props;\n\n    return <div className={styles.spinner}><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div>\n}\n\nexport default Activity;\n","/home/jb-inc/Desktop/cara-cakes-react-app/src/Components/BakerDetails/BakerDetails.component.js",["559","560"],"import React, { useEffect, useState } from 'react';\nimport { IoClose, IoPeople, IoThumbsDown, IoThumbsUp } from 'react-icons/io5';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\n\nimport { Button } from '..';\nimport { BASE_URL } from '../../utils/globalVariable';\nimport { Thousand } from '../../utils/utilities';\nimport { setBaker } from '../../redux/Actions/Auth.actions';\nimport styles from './BakerDetails.module.css';\nimport { logo5, vals3 } from '../../res/img';\nimport { setRefresh } from '../../redux/Actions/Refresh.actions';\n\nconst BakerDetails = (props) => {\n    const { detail, setDetail, baker, user, refresh } = props;\n\n    const [likes, setLikes] = useState(0);\n    const [dislikes, setDislikes] = useState(0);\n    const [followers, setFollowers] = useState(0);\n\n    useEffect(() => {\n        if (baker.length !== 0) {\n            setLikes(baker.likes.users.length);\n            setDislikes(baker.dislikes.users.length);\n            setFollowers(baker.followers.users.length);\n        }\n        return () => {\n            setLikes(0);\n            setDislikes(0);\n            setFollowers(0);\n        }\n    }, [detail]);\n\n    useEffect(() => {\n        return () => {\n            setLikes(0);\n            setDislikes(0);\n            setFollowers(0);\n        }\n    }, []);\n\n    useEffect(() => {\n        props.setRefresh(false);\n    }, [refresh]);\n\n    const Close = () => {\n        setDetail(false);\n    };\n\n\n    const disLikeBaker = (id) => {\n        fetch(`${BASE_URL}/baker/dislike/${id}?user=${user._id}`, {\n            method: 'POST',\n        })\n        .then(res => {\n            const statusCode = res.status;\n            const response = res.json();\n            return Promise.all([statusCode, response]);\n        })\n        .then(res => {\n            const statusCode = res[0];\n            const response = res[1].baker;\n\n            if (statusCode === 200) {\n                setLikes(response.likes.users.length);\n                setDislikes(response.dislikes.users.length);\n                props.setRefresh(true);\n            }\n\n            if (statusCode === 500) {\n                console.log('error');\n            }\n        })\n        .catch(err => {\n            console.log(err);\n        })\n    }\n\n    const likeBaker = (id) => {\n        fetch(`${BASE_URL}/baker/like/${id}?user=${user._id}`, {\n            method: 'POST',\n        })\n        .then(res => {\n            const statusCode = res.status;\n            const response = res.json();\n            return Promise.all([statusCode, response]);\n        })\n        .then(res => {\n            const statusCode = res[0];\n            const response = res[1].baker;\n            if (statusCode === 200) {\n                setLikes(response.likes.users.length);\n                setDislikes(response.dislikes.users.length);\n                props.setRefresh(true);\n            }\n\n            if (statusCode === 404) {\n                console.log('response')\n            }\n\n            if (statusCode === 500) {\n                console.log('error 500');\n            }\n        })\n        .catch(err => {\n            console.log(err, 'ksjdkfljlsjf');\n        })\n    }\n\n    const followBaker = (id) => {\n        fetch(`${BASE_URL}/baker/follow/${id}?user=${user._id}`, {\n            method: 'POST',\n        })\n        .then(res => {\n            const statusCode = res.status;\n            const response = res.json();\n            return Promise.all([statusCode, response]);\n        })\n        .then(res => {\n            const statusCode = res[0];\n            const response = res[1].baker;\n            if (statusCode === 200) {\n                setFollowers(response.followers.users.length);\n                props.setRefresh(true);\n            }\n\n            if (statusCode === 404) {\n                console.log('response')\n            }\n\n            if (statusCode === 500) {\n                console.log('error 500');\n            }\n        })\n        .catch(err => {\n            console.log(err, 'ksjdkfljlsjf');\n        })\n    }\n\n    const stopClose = (e) => {\n        e.stopPropagation();\n    }\n\n    const bakerShop = (bakerId) => {\n        props.setBaker(bakerId);\n        props.history.push({pathname: '/user/shop/pastries'})\n    }\n\n    return (\n        <div className={detail ? styles.notifyBackdrop : styles.notifyNoBackdrop} onClick={() => Close()}>\n            <div className={[styles.notifyContainer, detail ? styles.showContainer : styles.hideContainer].join(' ')} onClick={(event) => stopClose(event)}>\n                {baker.length !== 0 && \n                    <>\n                    <button className={styles.closeButton} onClick={() => Close()}><IoClose /></button>\n                    <div className={styles.bakerContainer}>\n                        <div className={styles.pastryContainer}>\n                            <div className={styles.pastryDiscount} onClick={() => followBaker(baker._id || '')}><IoPeople className={styles.icon} /> Followers: {Thousand(followers)}</div>\n                            <img src={baker.ceoImage ? `${BASE_URL}/${baker.ceoImage}` : vals3} alt={baker.price} className={styles.pastryImage} />\n                            <div className={styles.pastryPrice}><img src={baker.companyImage ? `${BASE_URL}/${baker.companyImage}` : logo5} alt=\"Product\" className={styles.bakerListImgLogo}/></div>\n                            <div className={styles.pastryLikes} onClick={() => likeBaker(baker._id || '')}><IoThumbsUp className={styles.icon} /> Likes: {Thousand(likes)}</div>\n                            <div className={styles.pastryDislikes} onClick={() => disLikeBaker(baker._id || '')}><IoThumbsDown className={styles.icon} /> Dislikes: {Thousand(dislikes)}</div>\n                        </div>\n                        <div className={styles.bakerDetails}>\n                            <h1 className={styles.bakerCompany}>{baker.companyName}</h1>\n                            <div className={styles.bakerDetailsScroll}>\n                                <b className={styles.bakerCEO}>CEO: <span className={styles.info}>{baker.name}</span></b>\n                                <h2 className={styles.subTitle}>Categories</h2>\n                                <ol className={styles.bakerCategories}>\n                                    {baker.categories.map((category, index) => <li>{category}</li>)}\n                                </ol>\n                                {user.type === ('Admin') &&\n                                    <>\n                                        <h2 className={styles.smallDetails}>Email: <span className={styles.info}>{baker.email}</span></h2>\n                                        <h2 className={styles.smallDetails}>Telephone: <span className={styles.info}>{baker.telNumber}</span></h2>\n                                        <h2 className={styles.smallDetails}>ID No: <span className={styles.info}>{baker.idCardNumber}</span></h2>\n                                        <h2 className={styles.smallDetails}>Location: <span className={styles.info}>{baker.location}</span></h2>\n                                        <h2 className={styles.smallDetails}>MoMO Number: <span className={styles.info}>{baker.momp}</span></h2>\n                                        <h2 className={styles.smallDetails}>MOMO Name : <span className={styles.info}>{baker.momoName}</span></h2>\n                                    </>\n                                }\n                                <h2 className={styles.subTitle}>About</h2>\n                                <b className={styles.bakerAbout}>{baker.about || 'empty'}</b>\n                            </div>\n                            <div className={styles.actions}>\n                                {user.type !== 'Baker' && user.type !== 'Admin' && <Button title='Shop' onClick={() => bakerShop(baker._id)} />}\n                            </div>\n                        </div>\n                    </div>\n                </>}\n            </div>\n        </div>\n    )\n}\n\nconst mapStateToProps = ({ auth, refresh }) => {\n    return {\n        user: auth.user,\n        refresh: refresh.refresh,\n    }\n};\n\nconst mapDispatchToProps = (dispatch) => {\n    return bindActionCreators({setBaker, setRefresh}, dispatch);\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(BakerDetails);","/home/jb-inc/Desktop/cara-cakes-react-app/src/Components/AdminImage/AdminImage.component.js",[],"/home/jb-inc/Desktop/cara-cakes-react-app/src/Router/Routes.navigation.js",[],"/home/jb-inc/Desktop/cara-cakes-react-app/src/redux/Reducers/index.js",[],"/home/jb-inc/Desktop/cara-cakes-react-app/src/redux/Reducers/Refresh.reducer.js",[],"/home/jb-inc/Desktop/cara-cakes-react-app/src/redux/Reducers/Data.reducer.js",[],"/home/jb-inc/Desktop/cara-cakes-react-app/src/Screens/index.js",[],"/home/jb-inc/Desktop/cara-cakes-react-app/src/redux/Reducers/Auth.reducer.js",[],"/home/jb-inc/Desktop/cara-cakes-react-app/src/redux/types.js",[],"/home/jb-inc/Desktop/cara-cakes-react-app/src/Screens/Login/Login.screen.js",[],"/home/jb-inc/Desktop/cara-cakes-react-app/src/Screens/Register/Register.screen.js",["561"],"import React, { useState } from 'react';\nimport { Route, Switch } from 'react-router';\n\nimport { Header, NavBar } from '../../Components';\nimport { BakerDetails, RegisterSection } from '../../sections';\n\nimport styles from './Register.module.css';\n\nconst Register = () => {\n    const [name, setName] = useState('');\n    const [email, setEmail] = useState('');\n    const [tel, setTel] = useState('');\n    const [password, setPassword] = useState('');\n    const [conPw, setConPw] = useState('');\n    const [idCard, setIdCard] = useState('');\n    const [companyName, setCompanyName] = useState('');\n    const [categories, setCategories] = useState([]);\n    const [errorName, setErrorName] = useState(false);\n    const [errorEmail, setErrorEmail] = useState(false);\n    const [errorTel, setErrorTel] = useState(false);\n    const [errorPassword, setErrorPassword] = useState(false);\n    const [errorConPw, setErrorConPw] = useState(false);\n    const [errorIdCard, setErrorIdCard] = useState(false);\n    const [errorCompanyName, setErrorCompanyName] = useState(false);\n    const [errorCategories, setErrorCategories] = useState([]);\n    const [loading, setLoading] = useState(false);\n\n\n    return (\n        <section className={styles.Signup}>\n            <Header />\n            <main>\n                <Route path=\"/register\" exact render={(props) => (<RegisterSection \n                    {...props} \n                    name={name}\n                    email={email}\n                    tel={tel}\n                    password={password}\n                    conPw={conPw}\n                    setName={setName}\n                    setEmail={setEmail}\n                    setTel={setTel}\n                    setPassword={setPassword}\n                    setConPw={setConPw}\n                    errorName={errorName}\n                    errorEmail={errorEmail}\n                    errorTel={errorTel}\n                    errorPassword={errorPassword}\n                    errorConPw={errorConPw}\n                    setErrorName={setErrorName}\n                    setErrorEmail={setErrorEmail}\n                    setErrorTel={setErrorTel}\n                    setErrorPassword={setErrorPassword}\n                    setErrorConPw={setErrorConPw}\n                    loading={loading}\n                    setLoading={setLoading}\n                    idCard={idCard}\n                    categories={categories}\n                    companyName={companyName}\n                    setIdCard={setIdCard}\n                    setCategories={setCategories}\n                    setCompanyName={setCompanyName}\n                    errorIdCard={errorIdCard}\n                    errorCategories={errorCategories}\n                    errorCompanyName={errorCompanyName}\n                    setErrorIdCard={setErrorIdCard}\n                    setErrorCategories={setErrorCategories}\n                    setErrorCompanyName={setErrorCompanyName}\n                 /> )} />\n                <Route path=\"/register/baker\" render={(props) => (<BakerDetails\n                    {...props}\n                    name={name}\n                    email={email}\n                    tel={tel}\n                    password={password}\n                    conPw={conPw}\n                    idCard={idCard}\n                    categories={categories}\n                    companyName={companyName}\n                    setName={setName}\n                    setEmail={setEmail}\n                    setTel={setTel}\n                    setPassword={setPassword}\n                    setConPw={setConPw}\n                    setIdCard={setIdCard}\n                    setCategories={setCategories}\n                    setCompanyName={setCompanyName}\n                    errorName={errorName}\n                    errorEmail={errorEmail}\n                    errorTel={errorTel}\n                    errorPassword={errorPassword}\n                    errorConPw={errorConPw}\n                    errorIdCard={errorIdCard}\n                    errorCategories={errorCategories}\n                    errorCompanyName={errorCompanyName}\n                    setErrorName={setErrorName}\n                    setErrorEmail={setErrorEmail}\n                    setErrorTel={setErrorTel}\n                    setErrorPassword={setErrorPassword}\n                    setErrorConPw={setErrorConPw}\n                    setErrorIdCard={setErrorIdCard}\n                    setErrorCategories={setErrorCategories}\n                    setErrorCompanyName={setErrorCompanyName}\n                    loading={loading}\n                    setLoading={setLoading}\n                 />)} />\n            </main>\n            <NavBar />\n        </section>\n    )\n}\n\nexport default Register;","/home/jb-inc/Desktop/cara-cakes-react-app/src/Screens/AdminLogin/Admin.screen.js",["562","563","564","565"],"import React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { Notification } from '../../Components';\nimport { jbInc } from '../../res/img';\nimport { AuthMail } from '../../utils/auth';\nimport { BASE_URL } from '../../utils/globalVariable';\n\nimport {setUser, setToken} from '../../redux/Actions/Auth.actions'\n\nimport styles from './Admin.module.css'\n\nconst Admin = (props) => {\n    const { error } = props;\n\n    const [password, setPassword] = useState('');\n    const [email, setEmail] = useState('');\n    const [passwordError, setPasswordError] = useState(false)\n    const [emailError, setEmailError] = useState(false);\n    const [loading, setLoading] = useState(false);\n    const [show, setShow] = useState(false);\n    const [message, setMessage] = useState({});\n    \n    const authenticate = () => {\n        let hasError = false;\n        setLoading(true);\n        console.log(email);\n        if (!AuthMail(email)) {\n            hasError = true;\n            setEmailError(true);\n        }\n\n        if (password.length < 5) {\n            hasError = true;\n            setPasswordError(true);\n        }\n\n        if (hasError) {\n            setLoading(false);\n            setShow(true);\n            setMessage({\n                type: 'error',\n                title: 'Invalid Data',\n                message: 'Data provided is not correct, please check again.'\n            });\n            return false;\n        }\n\n\n        let statusCode, responseJson;\n        console.log(email)\n\n        const body = {\n            email,\n            password,\n        };\n\n        fetch(`${BASE_URL}/admin/login`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(body),\n        })\n            .then(res => {\n                statusCode = res.status;\n                responseJson = res.json();\n                return Promise.all([statusCode, responseJson]);\n            })\n            .then(res => {\n                setLoading(false);\n                statusCode = res[0];\n                responseJson = res[1];\n\n                \n                if (statusCode === 200) {\n                    console.log(responseJson);\n                    console.log(responseJson.user);\n                    props.setUser(responseJson.user);\n                    props.setToken(responseJson.token);\n                    props.history.push({ pathname: '/admin/dashboard' });\n                }\n\n                if (statusCode === 401) {\n                    setShow(true);\n                    setMessage({\n                        type: 'success',\n                        title: 'Verification Error',\n                        message: responseJson.message,\n                    })\n                }\n\n                if (statusCode === 402) {\n                    setShow(true);\n                    setMessage({\n                        type: 'error',\n                        title: 'Suspension Error',\n                        message: responseJson.message,\n                    })\n                }\n\n                if (statusCode === 422) {\n                    setShow(true);\n                    setMessage({\n                        type: 'error',\n                        title: 'Details Conflict',\n                        message: responseJson.message,\n                    })\n                }\n\n                if (statusCode === 500) {\n                    console.log(responseJson, '500');\n                    setShow(true);\n                    setMessage({\n                        type: 'error',\n                        title: 'Unexpected Error',\n                        message: responseJson.message,\n                    })\n                }\n            })\n            .catch(err => {\n                console.log(err);\n                setLoading(false);\n                setShow(true);\n                setMessage({\n                    type: 'error',\n                    title: 'Unexpected Error',\n                    message: 'Please check your internet connection.'\n                })\n            })\n\n        \n    }\n\n\n\n    return (\n        <section className={styles.admin}>\n            <div className={styles.adminBox}>\n                <h2 className={styles.adminTitle}>Welcome Admin</h2>\n                <div className={styles.adminContainer}>\n                    <img src={jbInc} alt=\"Powered by Jb Inc\" className={styles.adminLogo} />\n                    <div className={styles.adminSignIn}>\n                        <div className={styles.adminSignInSheet}>\n                            <input type=\"text\" className={styles.adminInput} id=\"email\" name=\"emial\" placeholder=\"bricejume@gmail.com\" required onChange={(e) => setEmail(e.target.value)} /> \n                            <label htmlFor=\"email\" className={styles.adminLabel}>Email</label>\n                        </div>\n                        <div className={styles.adminSignInSheet}>\n                            <input type=\"password\" className={styles.adminInput} id=\"password\" name=\"password\" placeholder=\"Password\" onChange={(e) => setPassword(e.target.value)}\n                                required />\n                            <label htmlFor=\"password\" className={styles.adminLabel}>Password</label>\n                        </div>\n                        <button className={styles.adminBtn} onClick={() => authenticate()}>Login</button>\n                    </div>\n                </div>\n            </div>\n            <Notification setShow={setShow} show={show} message={message} />\n        </section>\n    )\n}\nconst mapDispatchToProps = (dispatch) => {\n    return bindActionCreators({ setUser, setToken }, dispatch);\n};\n\nexport default connect(null, mapDispatchToProps)(Admin);\n","/home/jb-inc/Desktop/cara-cakes-react-app/src/Screens/Admin/Admin.screen.js",[],"/home/jb-inc/Desktop/cara-cakes-react-app/src/Screens/Home/Home.screen.js",[],"/home/jb-inc/Desktop/cara-cakes-react-app/src/Screens/User/User.screen.js",[],"/home/jb-inc/Desktop/cara-cakes-react-app/src/Components/index.js",[],"/home/jb-inc/Desktop/cara-cakes-react-app/src/sections/index.js",[],"/home/jb-inc/Desktop/cara-cakes-react-app/src/res/img/index.js",[],"/home/jb-inc/Desktop/cara-cakes-react-app/src/Components/Header/Header.component.js",["566","567","568"],"import React, { useState } from 'react';\n\nimport styles from './Header.module.css';\nimport {Links} from '../../Components';\nimport logo from \"../../res/img/caracakes2.png\";\n\nconst Header = (props) => {\n    const [active, setActive] = useState(1)\n    return (\n        <div className={styles.container}>\n            <img src={logo} alt=\"CaraCakes\" className={styles.containerLogo} />\n        </div>\n    )\n};\n    \nexport default Header;\n","/home/jb-inc/Desktop/cara-cakes-react-app/src/Components/One/ButtonOne.component.js",[],"/home/jb-inc/Desktop/cara-cakes-react-app/src/Components/Links/Links.component.js",["569"],"import React from 'react'\n\nimport styles from './Links.module.css';\n\nconst Links = (props) => {\n    const {data} = props\n    return <li className={data.listStyles}><a href={data.link} className={data.styles}>{data.title}</a></li>\n}\n\nexport default Links;\n","/home/jb-inc/Desktop/cara-cakes-react-app/src/Components/One/LinkOne.component.js",[],"/home/jb-inc/Desktop/cara-cakes-react-app/src/Components/SampleCard/SampleCard.component.js",["570"],"import React from 'react';\n\nimport styles from './SampleCard.module.css';\nimport {ButtonTwo} from '../../Components';\nimport { Thousand } from '../../utils/utilities';\nimport { pans1 } from '../../res/img';\nimport { BASE_URL } from '../../utils/globalVariable';\n\nconst SampleCard = ({ pastry, index }) => {\n    return (\n        <div className={styles.card}>\n            <div className={[styles.cardView, styles.cardViewFront].join(' ')}>\n                <div className={[styles.cardPic, index === 1 ? styles.cardPic1 : index === 2 ? styles.cardPic2 : styles.cardPic3].join(' ')}>\n                    <img src={pastry && `${BASE_URL}/${pastry.image}`} alt={'name'} className={styles.cardImage} />\n                </div>\n                <div style={{ textAlign: 'center' }}>\n                    <h5 className={[styles.cardHeading, index === 1 ? styles.cardHeading1 : index === 2 ? styles.cardHeading2 : styles.cardHeading3].join(' ')}>{pastry && pastry.name.substr(0, 20)}{pastry && pastry.name.length >= 20 && '...'}</h5>\n                    <ul className={[styles.cardList, index === 1 ? styles.cardList1 : index === 2 ? styles.cardList2 : styles.cardList3].join(' ')}>\n                        <li>Company: {pastry && pastry.creator.companyName}</li>\n                        <li>CEO: {pastry && pastry.creator.name}</li>\n                        <li>Type: {pastry && pastry.type}</li>\n                        <li>Discount: {pastry && pastry.discount}%</li>\n                    </ul>\n                </div>\n            </div>\n            <div className={[styles.cardView, styles.cardViewBack, index === 1 ? styles.cardViewBack1 : index === 2 ? styles.cardViewBack2 : styles.cardViewBack3].join(' ')}>\n                <div className={styles.cardInfo}>\n                    <p className={styles.cardJust}>Just</p>\n                    <p className={styles.cardPrice}>\n                        {pastry && Thousand(pastry.price)} FCFA\n                                </p>\n                </div>\n                <div className=\"txt-cnt margin-top-small\" style={{ textAlign: 'center', marginTop: '40px' }}>\n                    <ButtonTwo link=\"/register\" title=\"SignUp\" />\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default SampleCard;\n","/home/jb-inc/Desktop/cara-cakes-react-app/src/Components/WorkArea/WorkArea.component.js",["571","572","573"],"import React from 'react';\nimport { Language } from '..';\n\nimport Profile from '../Profile/Profile.component';\nimport SearchBar from '../SearchBar/SearchBar.component';\nimport styles from './WorkArea.module.css';\n\nconst WorkArea = (props) => {\n    const {children, isDetail} = props;\n    return (\n        <div className={isDetail ? styles.panelEventDetail : styles.panelEvent}>\n            {children}\n            {/* <div className={styles.panelEventHeader}>\n                <SearchBar />\n                <Language />\n                <Profile />\n            </div> */}\n        </div>\n    )\n}\n\nexport default WorkArea;\n","/home/jb-inc/Desktop/cara-cakes-react-app/src/Components/NavBar/NavBar.component.js",["574","575","576"],"/home/jb-inc/Desktop/cara-cakes-react-app/src/Components/Spacer/Spacer.component.js",[],"/home/jb-inc/Desktop/cara-cakes-react-app/src/Components/SearchBar/SearchBar.component.js",["577"],"import React, { useEffect, useState } from 'react';\nimport { IoSearch } from 'react-icons/io5';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\n\nimport styles from './SearchBar.module.css';\nimport {setPastries, setBakers} from '../../redux/Actions/Data.actions';\nimport search from '../../utils/search';\n\nconst SearchBar = (props) => {\n    const {pastries} = props;\n\n    const [text, setText] = useState('');\n\n    const filterData = (event) => {\n        setText(event.target.value);\n    }\n\n    useEffect(() => {\n        search(text, pastries, props.setPastries,'name');\n    }, [text]);\n\n    return (\n        <div className={styles.searchContainer}>\n            <span className={styles.searchIcon}><IoSearch /></span>\n            <input type=\"text\" className={styles.searchContainerInput} placeholder=\"Search\" onChange={(event) => filterData(event)} />\n        </div>\n    )\n}\n\nconst mapStateToProps = ({data}) => {\n    return {\n        pastries: data.pastries,\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return bindActionCreators({setPastries, setBakers}, dispatch)\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SearchBar);\n","/home/jb-inc/Desktop/cara-cakes-react-app/src/Components/Profile/Profile.component.js",[],"/home/jb-inc/Desktop/cara-cakes-react-app/src/Components/OrderTable/OrderTable.component.js",["578","579"],"import React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\n\nimport { pans2 } from '../../res/img';\nimport { BASE_URL } from '../../utils/globalVariable';\nimport styles from './OrderTable.module.css';\nimport { setRefresh } from '../../redux/Actions/Refresh.actions';\nimport { ActivityTwo, Notification } from '..';\nimport { Thousand } from '../../utils/utilities';\n\nconst OrderTable = (props) => {\n    const { user, token, refresh, filter } = props;\n\n    const [loading, setLoading] = useState(false);\n    const [message, setMessage] = useState({});\n    const [show, setShow] = useState(false);\n    const [orders, setOrders] = useState({});\n\n    useEffect(() => {\n        setLoading(true);\n        props.setRefresh(false);\n        fetch(`${BASE_URL}/user/getorders/${user._id}`, {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n            }\n        })\n            .then(res => {\n                const statusCode = res.status;\n                const response = res.json();\n                return Promise.all([statusCode, response]);\n            })\n            .then(res => {\n                const statusCode = res[0];\n                const response = res[1];\n                setLoading(false);\n\n                if (statusCode === 200) {\n                    setOrders(response.orders);\n                }\n\n                if (statusCode === 404) {\n                    setShow(true);\n                    setMessage({\n                        type: 'error',\n                        title: 'Unexpected Error',\n                        message: response.message,\n                    })\n                }\n\n                if (statusCode === 500) {\n                    setShow(true);\n                    setMessage({\n                        type: 'error',\n                        title: 'Unexpected Error',\n                        message: response.message,\n                    })\n                }\n                \n            })\n            .catch(err => {\n                console.log(err);\n                setLoading(false);\n                setShow(true);\n                setMessage({\n                    type: 'error',\n                    title: `Unexpected Error`,\n                    message: `Please check your internet connection.`\n                });\n            })\n\n        return () => {\n            setLoading(false);\n            setShow(false);\n            setOrders({});\n            setMessage({});\n        }\n    }, [refresh]);\n\n    const Delivered = (order, total) => {\n        if (order.status === 'On the Way' && order.status !== 'Delivered') {\n            fetch(`${BASE_URL}/order/delivered/${order._id}?total=${total}`, {\n            method: 'PUT',\n            headers: {\n                'Authorization': `Basic ${token}`,\n                'Content-Type': 'application/json',\n            }\n        })\n            .then(res => {\n                const statusCode = res.status;\n                const response = res.json();\n                return Promise.all([statusCode, response]);\n            })\n            .then(res => {\n                const statusCode = res[0];\n                const response = res[1];\n                setLoading(false);\n\n                if (statusCode === 200) {\n                    if (response.order.status === 'Delivered') {\n                        setShow(true);\n                        setMessage({\n                            title: 'Success',\n                            message: 'Order status updated.'\n                        });\n                        props.setRefresh(true);\n                    };\n                }\n\n            })\n            .catch(err => {\n                console.log(err);\n                setLoading(false);\n                setShow(true);\n                setMessage({\n                    type: 'error',\n                    title: 'Unexpected Error',\n                    message: 'Please check your internet connection.',\n                });\n            })\n        }\n    };\n    \n    return (\n        <>\n             {loading ? <div> <ActivityTwo /> </div> : <>\n                {Object.values(orders).map((order, index) => (<div className={styles.orderSeparator}>\n                    <h1 className={styles.orderListBaker}>Company: {Object.keys(orders)[index]}</h1>\n                    {order.filter(order => filter === 'All' ? order.status : order.status === filter).map((order, index) =>\n                        <table className={styles.orderTable}>\n                            <thead className={styles.orderTableHeader}>\n                                <td className={[styles.orderTableHeaderData, styles.product].join(' ')}>Product</td>\n                                <td className={styles.orderTableHeaderData}>Price</td>\n                                <td className={styles.orderTableHeaderData}>Discount</td>\n                                <td className={[styles.orderTableHeaderData, styles.message].join(' ')}>Message</td>\n                                <td className={styles.orderTableHeaderData}>Quantity</td>\n                                <td className={styles.orderTableHeaderData}>Total</td>\n                            </thead>\n                            {order.pastries.map((pastry, index) =>\n                                <tr className={styles.orderTableRow}>\n                                    <td className={[styles.orderTableData , styles.orderTableImageContainer].join(' ')}>\n                                        <img src={`${BASE_URL}/${pastry.pastryId.image}`} alt=\"Pastry Name\" className={styles.orderTableDataImage} />\n                                        <b>{pastry.pastryId.name.substr(0, 20)}{pastry.pastryId.name.length > 20 && '...'}</b>\n                                    </td>\n                                    <td className={styles.orderTableData}>{Thousand(pastry.pastryId.price)}</td>\n                                    <td className={styles.orderTableData}>{pastry.pastryId.discount}%</td>\n                                    <td className={styles.orderTableData}>{pastry.message || \"'empty'\"}</td>\n                                    <td className={styles.orderTableData}>{pastry.quantity}</td>\n                                    <td className={styles.orderTableData}>{Thousand(pastry.pastryId.price * pastry.quantity)}</td>\n                                </tr>\n                            )}\n                            <tr className={styles.orderTableRow}>\n                                <td colSpan=\"3\" className={[styles.orderTableData, styles.orderCoupon].join(' ')}>\n                                    <h3>Order Status: {order.status}</h3>\n                                </td>\n                                <td colSpan=\"2\" className={[styles.orderTableData, styles.orderCoupon].join(' ')}>\n                                    <button className={styles.orderButton} onClick={() => Delivered(order, order.pastries.reduce((sum, pastry) => sum + (pastry.pastryId.discount ? (((100 - pastry.pastryId.discount)/100) * pastry.pastryId.price * pastry.quantity) : (pastry.pastryId.price * pastry.quantity)), 0))} >Delivered!</button>\n                                </td>\n                                <td colSpan=\"1\" className={styles.orderTableData}>Totals: {Thousand(order.pastries.reduce((sum, pastry) => sum + (pastry.pastryId.discount ? (((100 - pastry.pastryId.discount)/100) * pastry.pastryId.price * pastry.quantity) : (pastry.pastryId.price * pastry.quantity)), 0))}</td>\n                            </tr>\n                        </table>\n                    )}\n                </div >\n                ))}\n                <Notification setShow={setShow} show={show} message={message} />\n            </>}\n        </>\n    )\n}\nconst mapStateToProps = ({ auth, refresh }) => {\n    return {\n        token: auth.token,\n        user: auth.user,\n        refresh: refresh.refresh\n    }\n};\n\nconst mapDispatchToProps = (dispatch) => {\n    return bindActionCreators({ setRefresh }, dispatch);\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(OrderTable);","/home/jb-inc/Desktop/cara-cakes-react-app/src/Components/DatePicker/DatePicker.component.js",[],"/home/jb-inc/Desktop/cara-cakes-react-app/src/Components/RadioButtons/RadioButtons.component.js",[],"/home/jb-inc/Desktop/cara-cakes-react-app/src/Components/EventCard/EventCard.component.js",["580"],"import React from 'react';\nimport { Button, Link } from '..';\nimport { vals2 } from '../../res/img';\n\nimport styles from './EventCard.module.css';\n\nconst DisplayCard = (props) => {\n    const {isDetail, setIsDetail} = props;\n    return (\n        <div className={styles.eventListImgContainer}>\n                <div className={styles.eventListTitle}>\n                    <h2>wow</h2>\n                </div>\n                <img src={vals2} alt=\"Product\" className={styles.eventListImg} />\n                <div className={styles.eventListCountdown}>\n                    <h1 className={styles.eventListDaysContainer}>\n                        <b className={styles.eventListDaysNumber}>12</b>\n                        <br />\n                        <b className={styles.eventListDaysText}>Days</b>\n                    </h1>\n                    <h3 className={styles.eventListTimeContainer}>\n                        <b className={styles.eventListTimeNumber}>12 14 16</b>\n                        <br />\n                        <b className={styles.eventListTimeText}>Hours mins secs</b>\n                    </h3>\n                </div>\n                <div className={styles.eventButtonContainer}>\n                    <Button title=\"Details\" danger={false} onClick={()=>setIsDetail()} />\n                    <Link title=\"Shop\" danger={false} link=\"/events\" />\n                </div>\n            </div>\n    )\n}\n\nexport default DisplayCard;\n","/home/jb-inc/Desktop/cara-cakes-react-app/src/Components/PastryCard/PastryCard.component.js",["581","582","583","584","585","586","587"],"import React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { IoStatsChart, IoThumbsDown, IoThumbsUp } from 'react-icons/io5';\n\nimport styles from './PastryCard.module.css';\nimport { logo5, vals3 } from '../../res/img';\nimport { Button, Notification, PastryDetail } from '..';\nimport {BASE_URL} from '../../utils/globalVariable';\nimport { Thousand } from '../../utils/utilities';\n\nconst PastryCard = (props) => {\n    const {\n        isDetail,\n        setIsDetail,\n        pastry,\n        setPastry,\n        user,\n        filter,\n    } = props;\n\n    const [loading, setLoading] = useState(false);\n    const [message, setMessage] = useState({});\n    const [show, setShow] = useState(false);\n    const [likes, setLikes] = useState(pastry.likes.users.length);\n    const [dislikes, setDislikes] = useState(pastry.dislikes.users.length);\n    const [detail, setDetails] = useState(false);\n\n    const showDetail = (pastry) => {\n        setIsDetail(true);\n        setPastry(pastry);\n    }\n\n    const disLikePastry = (id) => {\n        setLoading(true);\n        fetch(`${BASE_URL}/pastry/dislike/${id}?user=${user._id}`, {\n            method: 'POST',\n        })\n            .then(res => {\n                const statusCode = res.status;\n                const response = res.json();\n                return Promise.all([statusCode, response]);\n            })\n            .then(res => {\n                const statusCode = res[0];\n                const response = res[1].response;\n                setLoading(false);\n\n                if (statusCode === 200) {\n                    setLikes(response.likes.users.length);\n                    setDislikes(response.dislikes.users.length);\n                }\n\n                if (statusCode === 500) {\n                    console.log('error');\n                }\n            })\n            .catch(err => {\n                console.log(err);\n            })\n    }\n\n    const likePastry = (id) => {\n        setLoading(true);\n        fetch(`${BASE_URL}/pastry/like/${id}?user=${user._id}`, {\n            method: 'POST',\n        })\n            .then(res => {\n                const statusCode = res.status;\n                const response = res.json();\n                return Promise.all([statusCode, response]);\n            })\n            .then(res => {\n                const statusCode = res[0];\n                const response = res[1].response;\n                setLoading(false);\n\n                if (statusCode === 200) {\n                    setLikes(response.likes.users.length);\n                    setDislikes(response.dislikes.users.length);\n                }\n\n                if (statusCode === 404) {\n                    console.log(response)\n                }\n\n                if (statusCode === 500) {\n                    console.log('error 500');\n                }\n            })\n            .catch(err => {\n                console.log(err, 'ksjdkfljlsjf');\n            })\n    }\n\n    const AddToCart = (id) => {\n        setLoading(true);\n        fetch(`${BASE_URL}/user/addToCart/${id}?user=${user._id}`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        })\n            .then(res => {\n                const statusCode = res.status;\n                const response = res.json();\n                return Promise.all([statusCode, response]);\n            })\n            .then(res => {\n                const statusCode = res[0];\n                const response = res[1];\n                setLoading(false);\n                if (statusCode === 200) {\n                    setShow(true);\n                    setMessage({\n                        type: 'success',\n                        message: `${pastry.name} added to cart.`,\n                        title: 'Success'\n                    });\n                }\n\n                if (statusCode === 422) {\n                    setShow(true);\n                    setMessage({\n                        type: 'error',\n                        message: `${pastry.name} not added to cart.`,\n                        title: 'Failed'\n                    });\n                }\n            })\n            .catch(err => {\n                setShow(true);\n                setMessage({\n                    type: 'error',\n                    title: 'Unexpected Error',\n                    message: 'Please check your internet connection.'\n                });\n            })\n    }\n\n    useEffect(() => {\n        return () => {\n            setLikes(0);\n            setDislikes(0);\n            setLoading(false);\n            setShow(false);\n            setDetails(false);\n            setMessage({});\n        }\n    }, []);\n\n    return (\n        <>\n            <div className={styles.pastryListImgContainer}>\n                <h2 className={styles.pastryTitle}>{pastry.name}</h2>\n                <div className={styles.pastryImgContainer}>\n                    {pastry.discount > 0 && <div className={styles.pastryDiscount}><IoStatsChart /> Discount: {pastry.discount}%</div>}\n                    <img src={pastry.image ? `${BASE_URL}/${pastry.image}` : vals3} alt=\"Product\" className={styles.pastryListImg} />\n                    <div className={styles.pastryStats}>\n                        <div className={styles.pastryLikes}>\n                            <div className={styles.likeData} onClick={() => likePastry(pastry._id)}><IoThumbsUp /> {likes} </div>\n                            <div className={styles.likeData} onClick={() => disLikePastry(pastry._id)}><IoThumbsDown /> {dislikes} </div>\n                        </div>\n                        <h3>Price: {Thousand(pastry.price)} XAF</h3>\n                    </div>\n                </div>\n                <div className={styles.pastriesButtonContainer}>\n                    <Button title=\"Details\" onClick={() => showDetail(pastry)} />\n                    <Button title=\"Add to Cart\" onClick={() => AddToCart(pastry._id)} />\n                </div>\n            </div>\n            <Notification message={message} show={show} setShow={setShow} />\n        </>\n    )\n};\n\nconst mapStateToProps = ({ auth }) => {\n    return {\n        user: auth.user,\n    }\n};\n\nexport default connect(mapStateToProps)(PastryCard);\n","/home/jb-inc/Desktop/cara-cakes-react-app/src/Components/Input/TextArea.component.js",["588","589","590"],"import React from 'react';\n\nimport styles from './Input.module.css';\n\nconst TextArea = (props) => {\n    const {placeholder, label, value, setValue, len, type, error, setError} = props;\n    return (\n        <div className={styles.formGroup2}>\n            <textarea \n                type={type}\n                className={[\n                    styles.formInput,\n                    len === 1 ?  \n                    styles.formLength1 :\n                    len === 2 ?\n                    styles.formLength2 :\n                    len === 3 ?\n                    styles.formLength3 :\n                    len === 4 ?\n                    styles.formLength4 :\n                    styles.formLength5\n                ].join(' ')} \n                name=\"name\" id={label} \n                placeholder={placeholder} \n                onChange={setValue}></textarea>\n            {/* <label for=\"Name\" className={styles.formLabel}>{label}</label> */}\n        </div>\n    )\n}\n\nexport default TextArea;\n","/home/jb-inc/Desktop/cara-cakes-react-app/src/Components/InfoCard/InfoCard.component.js",[],"/home/jb-inc/Desktop/cara-cakes-react-app/src/Components/Input/Input.component.js",["591","592","593"],"import React from 'react';\n\nimport styles from './Input.module.css';\n\nconst Input = (props) => {\n    const {placeholder, label, value, setValue, len, type, error, setError} = props;\n    return (\n        <div className={styles.formGroup2}>\n            <input \n                type={type}\n                className={[\n                    styles.formInput,\n                    len === 1 ?  \n                    styles.formLength1 :\n                    len === 2 ?\n                    styles.formLength2 :\n                    len === 3 ?\n                    styles.formLength3 :\n                    len === 4 ?\n                    styles.formLength4 :\n                    styles.formLength5\n                ].join(' ')} \n                name={label} id={label} \n                placeholder={placeholder} \n                onChange={setValue} />\n                <label htmlFor={label} className={styles.formLabel}>{label}</label>\n        </div>\n    )\n}\n\nexport default Input;\n","/home/jb-inc/Desktop/cara-cakes-react-app/src/Components/Language/Language.component.js",[],"/home/jb-inc/Desktop/cara-cakes-react-app/src/Components/UserInfo/UserInfo.component.js",["594"],"import React, { useState } from 'react';\nimport { IoThumbsDownSharp, IoThumbsUpSharp } from 'react-icons/io5';\nimport { connect } from 'react-redux';\nimport { UserDetails } from '..';\n\nimport { cups2 } from '../../res/img';\nimport { BASE_URL } from '../../utils/globalVariable';\nimport { HNumber, Thousand } from '../../utils/utilities';\nimport styles from './UserInfo.module.css';\n\nconst UserInfo = (props) => {\n    const { user, token, setRusers, User } = props;\n    const [_user, setUser] = useState([]);\n    const [detail, setDetail] = useState(false);\n\n    const ShowDetail = (user) => {\n        setUser(user);\n        setDetail(true);\n    };\n\n    const Suspend = (id) => {\n        fetch(`${BASE_URL}/user/suspend/${id}`, {\n            method: 'PUT',\n            headers: {\n                'Authorization': `Basic ${token}`\n            }\n        })\n            .then(res => {\n                const statusCode = res.status;\n                const response = res.json();\n                return Promise.all([statusCode, response]);\n            })\n            .then(res => {\n                const statusCode = res[0];\n                const response = res[1];\n\n                if (statusCode === 200) {\n                    setRusers(true);\n                }\n\n            })\n            .catch(err => {\n                console.log(err);\n            })\n    }\n    \n    return (\n        <div className={styles.bakerCard}> \n            <div className={styles.bakerInfo}>\n                <img src={cups2} alt=\"Baker name\" className={styles.bakerImg} />\n                <div className={styles.bakerId}>\n                    <h2 className={styles.bakerTitle}>{user.name.substr(0, 12)}</h2>\n                    <b className={styles.bakerSubTitle}>{HNumber(user.telNumber)}</b>\n                </div>\n                {User.type === 'Admin' && <button className={styles.bakerButton} onClick={() => ShowDetail(user)}>Details</button>}\n            </div>\n            <div className={styles.bakerStats}>\n                <div className={styles.bakerNumber}>\n                    <h2 className={styles.bakerTitle}>{user.orders.ordered.length}</h2>\n                    <b className={styles.bakerSubTitle}>Orders</b>\n                </div>\n                <div className={styles.bakerNumber}>\n                    <h2 className={styles.bakerTitle}>10</h2>\n                    <b className={styles.bakerSubTitle}>Ordered</b>\n                </div>\n                <div className={styles.bakerNumber}>\n                    <h2 className={styles.bakerTitle}>5</h2>\n                    <b className={styles.bakerSubTitle}>Categories</b>\n                </div>\n                <div className={styles.bakerNumber}>\n                    <h2 className={styles.bakerTitle}>{Thousand(user.total)}</h2>\n                    <b className={styles.bakerSubTitle}>Spent</b>\n                </div>\n            </div>\n            <div className={styles.bakerFooter}>\n                {/* <NavLink to=\"#\" className={styles.bakerMsg}><IoMail className={styles.bakerIcon} /> MESSAGE</NavLink> */}\n                <div className={styles.bakerRating}>\n                    <b className={styles.bakerRatingVal}><IoThumbsUpSharp className={styles.bakerRatingIcon} /> {user.likes.users.length}</b>\n                    <b className={styles.bakerRatingVal}><IoThumbsDownSharp className={styles.bakerRatingIcon} /> {user.dislikes.users.length}</b>\n                </div>\n                {User.type === 'Admin' && <button className={styles.bakerBtn} onClick={() => Suspend(user._id)}>{user.suspend ? 'Unsuspend' : 'Suspend'}</button>}\n            </div>\n            <UserDetails detail={detail} setDetail={setDetail} _user={_user} />\n        </div>\n    )\n}\n\nconst mapStateToProps = ({ auth, refresh }) => {\n    return {\n        token: auth.token,\n        refresh: refresh.refresh,\n        User: auth.user,\n    }\n}\n\nexport default connect(mapStateToProps)(UserInfo);\n","/home/jb-inc/Desktop/cara-cakes-react-app/src/Components/UsersTable/UserTable.component.js",["595","596"],"import React, { useEffect, useState } from 'react';\nimport { IoTrashBinSharp } from 'react-icons/io5';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\n\nimport { Notification, Verification } from '..';\nimport { setRefresh } from '../../redux/Actions/Refresh.actions';\nimport { pans2 } from '../../res/img';\nimport { BASE_URL } from '../../utils/globalVariable';\nimport { HNumber } from '../../utils/utilities';\nimport styles from './UserTable.module.css';\n\nconst UserTable = (props) => {\n    const { users, token, setDetail, setUser, refresh } = props;\n    const [loading, setLoading] = useState(false);\n    const [show, setShow] = useState(false);\n    const [verify, setVerify] = useState(false);\n    const [message, setMessage] = useState({});\n\n    useEffect(() => {\n        props.setRefresh(false);\n    }, [refresh]);\n\n    useEffect(() => {\n        return () => {\n            setVerify(false);\n            setMessage({});\n            setShow(false);\n            setLoading(false);\n        }\n    }, []);\n\n    const ShowDetail = (user) => {\n        setUser(user);\n        setDetail(true);\n    };\n    \n    const Delete = (data) => {\n        setVerify(true);\n        setMessage({\n            type: 'danger',\n            data: data,\n            title: 'Deletion imminent',\n            message: `Are you sure you want to delete user ${data.name}. They might have pending orders.`\n        })\n    }\n\n\n    const DeleteAuth = (id) => {\n        fetch(`${BASE_URL}/user/delete/${id}`, {\n            method: 'DELETE',\n            headers: {\n                'Authorization': `Basic ${token}`\n            }\n        })\n            .then(res => {\n                const statusCode = res.status;\n                const response = res.json();\n                return Promise.all([statusCode, response]);\n            })\n            .then(res => {\n                const statusCode = res[0];\n                const response = res[1];\n\n                if (statusCode === 200) {\n                    props.setRefresh(true);\n                    setMessage({\n                        type: 'success',\n                        title: 'Success',\n                        message: response.message,\n                    })\n\n                    setTimeout(() => {\n                        setVerify(false);\n                    }, 2000)\n                }\n\n            })\n            .catch(err => {\n                setShow(true);\n                setMessage({\n                    type: 'error',\n                    title: 'Unexpected Error',\n                    message: 'Please check your internet connection.',\n                })\n            })\n    }\n\n    const Suspend = (id) => {\n        setLoading(true);\n        fetch(`${BASE_URL}/user/suspend/${id}`, {\n            method: 'PUT',\n            headers: {\n                'Authorization': `Basic ${token}`\n            }\n        })\n            .then(res => {\n                const statusCode = res.status;\n                const response = res.json();\n                return Promise.all([statusCode, response]);\n            })\n            .then(res => {\n                const statusCode = res[0];\n                const response = res[1];\n\n                if (statusCode === 200) {\n                    setLoading(false);\n                    props.setRefresh(true);\n                    setShow(true);\n                    setMessage({\n                        type: 'success',\n                        title: 'Success',\n                        message: response.message,\n                    })\n                }\n\n            })\n            .catch(err => {\n                setShow(true);\n                setLoading(false);\n                setMessage({\n                    type: 'error',\n                    title: 'Unexpected Error',\n                    message: 'Please check your internet connection.',\n                })\n            })\n    }\n\n    return (\n        <>\n            <div className={styles.cartSeparator}>\n                <table className={styles.cartTable}>\n                    <thead className={styles.cartTableHeader}>\n                        <td className={styles.cartTableHeadeData}>Name</td>\n                        <td className={styles.cartTableHeaderData}>Telephone</td>\n                        <td className={styles.cartTableHeaderData}>Ordered</td>\n                        <td className={styles.cartTableHeaderData}>Suspended</td>\n                        <td className={styles.cartTableHeaderData}>Actions</td>\n                    </thead>\n\n                    {users.map((user, index) =>\n                        <tr className={styles.cartTableRow}>\n                            <td className={[styles.cartTableData, styles.cartTableImageContainer].join(' ')}>\n                                <img src={user.image ? `${BASE_URL}/${user.image}` : pans2} alt={user.name} className={styles.cartTableDataImage} />\n                                <b>{user.name.substr(0, 15)}</b>\n                            </td>\n                            <td className={styles.cartTableData}>{HNumber(user.telNumber)}</td>\n                            <td className={styles.cartTableData}>{user.orders.ordered.length || 0}</td>\n                            <td className={styles.cartTableData}>{user.suspend ? 'True' : 'False'}</td>\n                            <td className={styles.cartTableData}>\n                                <button className={[styles.cartButton, styles.suspend].join(' ')} onClick={() => Suspend(user._id)}>{user.suspend ? 'Unsuspend' : 'Suspend'}</button>\n                                <button className={[styles.cartButton, styles.details].join(' ')} onClick={() => ShowDetail(user)}>Details</button>\n                                <button className={[styles.cartDelete, styles.suspend].join(' ')} onClick={() => Delete(user)}><IoTrashBinSharp /></button>\n                            </td>\n                        </tr>\n                    )}\n                </table>\n            </div>\n            <Notification show={show} setShow={setShow} message={message} />\n            <Verification verify={verify} setVerify={setVerify} message={message} onClick={(id) => DeleteAuth(id)} />\n        </>\n    )\n};\n\nconst mapStateToProps = ({ auth, refresh }) => {\n    return {\n        user: auth.user,\n        refresh: refresh.refresh,\n    }\n};\n\nconst mapDispatchToProps = (dispatch) => {\n    return bindActionCreators({ setRefresh }, dispatch);\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UserTable);\n","/home/jb-inc/Desktop/cara-cakes-react-app/src/Components/PastriesTable/PastryTable.component.js",["597","598","599"],"import React, { useEffect, useState } from 'react';\nimport { IoTrashBinSharp } from 'react-icons/io5';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\n\nimport { pans2 } from '../../res/img';\nimport { BASE_URL } from '../../utils/globalVariable';\nimport styles from './PastryTable.module.css';\nimport { setRefresh } from '../../redux/Actions/Refresh.actions';\nimport { Notification, Verification } from '..';\n\nconst PastryTable = (props) => { \n\n    const { pastries, token, setDetail, refresh, setPastry, user } = props;\n    const [loading, setLoading] = useState(false);\n    const [show, setShow] = useState(false);\n    const [verify, setVerify] = useState(false);\n    const [message, setMessage] = useState({});\n\n    useEffect(() => {\n        props.setRefresh(false);\n    }, [refresh]);\n\n    useEffect(() => {\n        return () => {\n            setVerify(false);\n            setMessage({});\n            setShow(false);\n            setLoading(false);\n        }\n    }, []);\n\n    const ShowDetail = (pastry) => {\n        setDetail(true);\n        setPastry(pastry);\n    }\n\n        const Delete = (data) => {\n        setVerify(true);\n        setMessage({\n            type: 'danger',\n            data: data,\n            title: 'Deletion imminent',\n            message: `Are you sure you want to delete pastry ${data.name}. Users might have it in their cart.`\n        })\n    }\n\n\n    const DeleteAuth = (id) => {\n        fetch(`${BASE_URL}/pastry/delete/${id}`, {\n            method: 'DELETE',\n            headers: {\n                'Authorization': `Basic ${token}`\n            }\n        })\n            .then(res => {\n                const statusCode = res.status;\n                const response = res.json();\n                return Promise.all([statusCode, response]);\n            })\n            .then(res => {\n                const statusCode = res[0];\n                const response = res[1];\n\n                if (statusCode === 200) {\n                    props.setRefresh(true);\n                    setMessage({\n                        type: 'success',\n                        title: 'Success',\n                        message: response.message,\n                    })\n\n                    setTimeout(() => {\n                        setVerify(false);\n                    }, 2000)\n                }\n\n            })\n            .catch(err => {\n                setShow(true);\n                setMessage({\n                    type: 'error',\n                    title: 'Unexpected Error',\n                    message: 'Please check your internet connection.',\n                })\n            })\n    }\n    \n    return (\n        <>\n            <div className={styles.cartSeparator}>\n                <table className={styles.cartTable}>\n                    <thead className={styles.cartTableHeader}>\n                        <td className={styles.cartTableHeadeData}>Name</td>\n                        <td className={styles.cartTableHeaderData}>Category</td>\n                        <td className={styles.cartTableHeaderData}>Price</td>\n                        <td className={styles.cartTableHeaderData}>Discount</td>\n                        <td className={styles.cartTableHeaderData}>Actions</td>\n                    </thead>\n                    {pastries.map((pastry, index) => (<tr className={styles.cartTableRow}>\n                        <td className={[styles.cartTableData, styles.cartTableImageContainer].join(' ')}>\n                            <img src={pastry.image ? `${BASE_URL}/${pastry.image}` : pans2} alt={pastry.name} className={styles.cartTableDataImage} />\n                            <b>{pastry.name}</b>\n                        </td>\n                        <td className={styles.cartTableData}>{pastry.type}</td>\n                        <td className={styles.cartTableData}>{pastry.price}</td>\n                        <td className={styles.cartTableData}>{pastry.discount}%</td>\n                        <td className={styles.cartTableData}>\n                            <button className={[styles.cartButton, styles.verify].join(' ')} onClick={() => ShowDetail(pastry)}>Details</button>\n                            <button className={[styles.cartDelete, styles.suspend].join(' ')} onClick={() => Delete(pastry)}><IoTrashBinSharp /></button>\n                        </td>\n                    </tr>))}\n                </table>\n            </div>\n            <Notification show={show} setShow={setShow} message={message} />\n            <Verification verify={verify} setVerify={setVerify} message={message} onClick={(id) => DeleteAuth(id)} />\n        </>\n    )\n}\n\nconst mapStateToProps = ({ auth, refresh }) => {\n    return {\n        user: auth.user,\n        refresh: refresh.refresh,\n    }\n};\n\nconst mapDispatchToProps = (dispatch) => {\n    return bindActionCreators({ setRefresh }, dispatch);\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PastryTable);\n","/home/jb-inc/Desktop/cara-cakes-react-app/src/Components/SquareInput/SquareInput.component.js",["600"],"import React from 'react';\n\nimport styles from './SquareInput.module.css';\n\nconst SquareInput = (props) => {\n    const {\n        label, \n        placeholder, \n        type, \n        value, \n        setValue, \n        error, \n        setError,\n        name,\n    } = props;\n    return (\n        <div className={styles.inputContainer}>\n            <label className={styles.inputLabel}>{label}</label>\n            <input\n                className={[styles.inputField, error && styles.inputInvalid].join(' ')}\n                placeholder={placeholder}\n                type={type}\n                name={name}\n                value={value}\n                onChange={setValue}\n            />\n        </div>\n    )\n}\n\nexport default SquareInput;\n","/home/jb-inc/Desktop/cara-cakes-react-app/src/Components/PastriesTableSuper/PastryTable.component.js",["601"],"import React from 'react';\nimport { IoTrashBinSharp } from 'react-icons/io5';\n\nimport { pans2 } from '../../res/img';\nimport styles from './PastryTable.module.css';\n\nconst PastryTable = (props) => { \n    const { pastries, setDetail, setPastry } = props;\n\n    const ShowDetail = (pastry) => {\n        setDetail(true);\n        setPastry(pastry);\n    }\n    \n    return (\n            <div className={styles.cartSeparator}>\n                <table className={styles.cartTable}>\n                    <thead className={styles.cartTableHeader}>\n                        <td className={styles.cartTableHeaderData}>Name</td>\n                        <td className={styles.cartTableHeaderData}>Creator</td>\n                        <td className={styles.cartTableHeaderData}>Category</td>\n                        <td className={styles.cartTableHeaderData}>Price</td>\n                        <td className={styles.cartTableHeaderData}>Discount</td>\n                        <td className={styles.cartTableHeaderData}>Actions</td>\n                    </thead>\n                    {pastries.map((pastry, index) => (<tr className={styles.cartTableRow}>\n                        <td className={[styles.cartTableData, styles.cartTableImageContainer].join(' ')}>\n                            <img src={pastry.image ? `http://localhost:8081/${pastry.image}` : pans2} alt={pastry.name} className={styles.cartTableDataImage} />\n                            <b>{pastry.name}</b>\n                        </td>\n                        <td className={styles.cartTableData}>{pastry.creator.name}</td>\n                        <td className={styles.cartTableData}>{pastry.type}</td>\n                        <td className={styles.cartTableData}>{pastry.price}</td>\n                        <td className={styles.cartTableData}>{pastry.discount}%</td>\n                        <td className={styles.cartTableData}>\n                            <button className={[styles.cartButton, styles.verify].join(' ')} onClick={() => ShowDetail(pastry)}>Details</button>\n                            {/* <button className={[styles.cartDelete, styles.suspend].join(' ')} onClick={() => console.log('Ordered')}><IoTrashBinSharp /></button> */}\n                        </td>\n                    </tr>))}\n                </table>\n            </div>\n    )\n}\n\nexport default PastryTable;\n","/home/jb-inc/Desktop/cara-cakes-react-app/src/Components/SquareInput/SquareTextArea.component.js",["602"],"import React from 'react'\n\nimport styles from './SquareInput.module.css';\n\nconst SquareArea = (props) => {\n    const {\n        label, \n        placeholder,\n        value, \n        setValue, \n        error, \n        setError\n    } = props;\n    return (\n        <div className={styles.inputContainer}>\n            <label className={styles.inputLabel}>{label}</label>\n            <textarea \n                className={[styles.inputField, error && styles.inputInvalid].join(' ')} \n                placeholder={placeholder} \n                rows={5}\n                value={value}\n                onChange={setValue}\n            >\n            </textarea>\n        </div>\n    )\n}\n\nexport default SquareArea;","/home/jb-inc/Desktop/cara-cakes-react-app/src/Components/SquareInput/SquareImg.component.js",["603","604","605","606","607"],"import React, { useEffect, useState } from 'react'\n\nimport styles from './SquareInput.module.css';\n\nconst SquareImage = (props) => {\n    const {\n        label,\n        type,\n        value,\n        setValue,\n        error,\n        setError,\n        name,\n    } = props;\n\n    const [image, setImage] = useState('');\n\n    const SetImage = (event) => {\n        setImage(URL.createObjectURL(event.target.files[0]));\n        setValue(event);\n    }\n\n    return (\n        <div className={styles.sqrContainer}>\n            <label className={styles.sqrImgFile} htmlFor={label}>{label}</label>\n            <input\n                type={type}\n                id={label}\n                value={value}\n                hidden\n                onChange={(event) => SetImage(event)}\n            />\n            {/* {image ? <img className={styles.sqrImg} src={image} alt={label} /> : <div className={styles.sqrImgSpc} />} */}\n            \n        </div>\n    )\n}\n\nexport default SquareImage;\n","/home/jb-inc/Desktop/cara-cakes-react-app/src/Components/PastryDetail/PastryDetail.component.js",["608","609","610","611","612","613"],"import React, { useEffect, useState } from 'react';\nimport { IoAdd, IoBrush, IoClose, IoRemove, IoStatsChart, IoThumbsDown, IoThumbsUp, IoWallet } from 'react-icons/io5';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\n\nimport { Notification } from '..';\nimport { BASE_URL } from '../../utils/globalVariable';\nimport { Thousand } from '../../utils/utilities';\nimport styles from './PastryDetail.module.css';\nimport { setRefresh } from '../../redux/Actions/Refresh.actions';\n\nconst PastryDetail = (props) => {\n    const {detail, setDetail, pastry, user, refresh, setIsEdit} = props;\n\n    const [loading, setLoading] = useState(false);\n    const [likes, setLikes] = useState(0);\n    const [dislikes, setDislikes] = useState(0);\n    const [count, setCount] = useState(0);\n    const [show, setShow] = useState(false);\n    const [pastryMessage, setPastryMessage] = useState('');\n    const [message, setMessage] = useState({});\n\n    useEffect(() => {\n        props.setRefresh(false);\n    }, [refresh]);\n\n    useEffect(() => {\n        if(pastry.length !== 0) {\n            setLikes(pastry.likes.users.length);\n            setDislikes(pastry.dislikes.users.length);\n        }\n        setCount(0);\n\n        return () => {\n            setPastryMessage('');\n            setLoading(false);\n            setLikes(0);\n            setDislikes(0);\n            setCount(0);\n            setShow(false);\n            setMessage({});\n        }\n\n    }, [detail]);\n\n    const AddToCart = (id) => {\n        setLoading(true);\n        fetch(`${BASE_URL}/user/addToCart/${id}?user=${user._id}`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        })\n        .then(res => {\n            const statusCode = res.status;\n            const response = res.json();\n            return Promise.all([statusCode, response]);\n        })\n        .then(res => {\n            const statusCode = res[0];\n            const response = res[1];\n            setLoading(false);\n\n            if(statusCode === 200) {\n                setCount(count + 1);\n                if(count === 0) {\n                    setShow(true);\n                    setMessage({\n                        type: 'success',\n                        message: `${pastry.name} added to cart`,\n                        title: 'Success'\n                    });\n                }\n            }\n\n            if(statusCode === 422) {\n                setShow(true);\n                setMessage({\n                    type: 'error',\n                    message: `${pastry.name} not added to cart.`,\n                    title: 'Failed'\n                });\n            }\n\n        })\n        .catch(err => {\n            setShow(true);\n            setMessage({\n                type: 'error',\n                title: 'Unexpected Error',\n                    message: 'Please check your internet connection.'\n            });\n        })\n    }\n\n    const SubFromCart = (id) => {\n        setLoading(true);\n        fetch(`${BASE_URL}/user/subFromCart/${id}?user=${user._id}`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        })\n            .then(res => {\n                const statusCode = res.status;\n                const response = res.json();\n                return Promise.all([statusCode, response]);\n            })\n            .then(res => {\n                const statusCode = res[0];\n                const response = res[1];\n                setLoading(false);\n\n                if (statusCode === 200) {\n                    setCount(count - 1);\n                }\n\n                if (statusCode === 422) {\n                    setShow(true);\n                    setMessage({\n                        type: 'error',\n                        message: `${pastry.name} not added to cart.`,\n                        title: 'Failed'\n                    });\n                }\n            })\n            .catch(err => {\n                setShow(true);\n                setMessage({\n                    type: 'error',\n                    title: 'Unexpected Error',\n                    message: 'Please check your internet connection.'\n                });\n            })\n    };\n\n    const Close = () => {\n        setDetail(false);\n    }\n\n    const EditPastry = (pastry) => {\n        setIsEdit(true);\n        setDetail(false);\n    };\n\n    const Message = (id) => {\n        fetch(`${BASE_URL}/user/message/${id}?user=${user._id}&message=${pastryMessage}`, {\n            method: 'POST',\n        })\n            .then(res => {\n                const statusCode = res.status;\n                const response = res.json();\n                return Promise.all([statusCode, response]);\n            })\n            .then(res => {\n                const statusCode = res[0];\n                const response = res[1];\n                setLoading(false);\n\n                if (statusCode === 200) {\n                    setShow(true);\n                    setMessage({\n                        type: 'success',\n                        message: `${pastryMessage} added for pastry.`,\n                        title: 'Success'\n                    });\n                }\n\n                if (statusCode === 500) {\n                    console.log('error');\n                }\n            })\n            .catch(err => {\n                console.log(err);\n            })\n    };\n\n    const disLikePastry = (id) => {\n        setLoading(true);\n        fetch(`${BASE_URL}/pastry/dislike/${id}?user=${user._id}`, {\n            method: 'POST',\n        })\n            .then(res => {\n                const statusCode = res.status;\n                const response = res.json();\n                return Promise.all([statusCode, response]);\n            })\n            .then(res => {\n                const statusCode = res[0];\n                const response = res[1].response;\n                setLoading(false);\n\n                if (statusCode === 200) {\n                    setLikes(response.likes.users.length);\n                    setDislikes(response.dislikes.users.length);\n                    props.setRefresh(true);\n                }\n\n                if (statusCode === 500) {\n                    console.log('error');\n                }\n            })\n            .catch(err => {\n                console.log(err);\n            })\n    };\n\n    const likePastry = (id) => {\n        setLoading(true);\n        fetch(`${BASE_URL}/pastry/like/${id}?user=${user._id}`, {\n            method: 'POST',\n        })\n            .then(res => {\n                const statusCode = res.status;\n                const response = res.json();\n                return Promise.all([statusCode, response]);\n            })\n            .then(res => {\n                const statusCode = res[0];\n                const response = res[1].response;\n                setLoading(false);\n\n                if (statusCode === 200) {\n                    setLikes(response.likes.users.length);\n                    setDislikes(response.dislikes.users.length);\n                    props.setRefresh(true);\n                }\n\n                if (statusCode === 404) {\n                    console.log(response)\n                }\n\n                if (statusCode === 500) {\n                    console.log('error 500');\n                }\n            })\n            .catch(err => {\n                console.log(err, 'ksjdkfljlsjf');\n            })\n    };\n\n    const stopClose = (e) => {\n        e.stopPropagation();\n    }\n\n    return (\n        <div className={detail ? styles.notifyBackdrop : styles.notifyNoBackdrop}  onClick={() => Close()}>\n            <div className={[styles.notifyContainer, detail ? styles.showContainer : styles.hideContainer].join(' ')} onClick={(e) => stopClose(e)}>\n                <button className={styles.closeButton} onClick={() => Close()}><IoClose /></button>\n                <div className={styles.pastryContainer}>\n                    {pastry.discount > 0 && <div className={styles.pastryDiscount}><IoStatsChart /> Discount: {pastry.discount}%</div>}\n                    <div className={styles.pastryName}>{pastry.name}</div>\n                    <img src={`${BASE_URL}/${pastry.image}`} alt={pastry.price} className={styles.pastryImage} />\n                    {user.type !== 'Baker' ?\n                        <>\n                            <div className={styles.pastryPrice}><IoWallet className={styles.icon} /> Price: {Thousand(count >= 1 ? count * pastry.price : pastry.price || 0)} XAF</div>\n                            <div className={styles.pastryDislikes} onClick={() => disLikePastry(pastry._id)}><IoThumbsDown className={styles.icon} /> Dislikes: {Thousand(dislikes)}</div>\n                            <div className={styles.pastryLikes} onClick={() => likePastry(pastry._id)}><IoThumbsUp className={styles.icon} /> Likes: {Thousand(likes)}</div>\n                        </> :\n                        <>\n                            <div className={styles.pastryDislikes}><IoThumbsDown className={styles.icon} /> Dislikes: {Thousand(dislikes)}</div>\n                            <div className={styles.pastryLikes}><IoThumbsUp className={styles.icon} /> Likes: {Thousand(likes)}</div>\n                            {user.type === 'Baker' && <div className={styles.pastryEdit} onClick={() => EditPastry(pastry)}><IoBrush className={styles.icon} /> Edit</div>}\n                            <div className={styles.pastryPrice2}><IoThumbsUp className={styles.icon} /> Price: {Thousand(pastry.price || 0)} XAF</div>\n                        </>\n                    }\n                </div>\n                    {user.type !== 'Baker' && (count === 0 ? \n                        <div className={styles.notifyActions}>\n                            <button className={styles.notifyButton} onClick={() => AddToCart(pastry._id)}>Add to Cart</button>\n                        </div> :\n                        <div className={styles.notifyActions}>\n                            <button className={styles.pastryButton} onClick={() => SubFromCart(pastry._id)}><IoRemove /></button>\n                            <b className={styles.pastryQty}>Quantity: {count}</b>\n                            <button className={styles.pastryButton} onClick={() => AddToCart(pastry._id)}><IoAdd /></button>\n                        </div>\n                    )}\n                {count !== 0 && (\n                    <div>\n                        <input type=\"text\" placeholder=\"Message on pastry\" className={styles.pastryMessage} onChange={event => setPastryMessage(event.target.value)} />\n                        <button className={styles.notifyButton} onClick={() => Message(pastry._id)}><IoBrush className={styles.icon} style={{paddingTop: '3px'}} />Paste</button>\n                    </div>\n                )}\n                <div className={styles.pastryDetails}>\n                   <h2 className={styles.pastryTitle}>Type: {pastry.type}</h2>\n                   <h2 className={styles.pastryTitle}>About</h2>\n                   <b className={styles.pastryDescription}>{pastry.description}</b>\n                   <h2 className={styles.pastryTitle}>Recipe</h2>\n                   <b className={styles.pastryDescription}>{pastry.recipe || 'Loading...'}</b>\n                </div>\n            </div>\n            <Notification message={message} show={show} setShow={setShow} />\n        </div>\n    )\n}\n\nconst mapStateToProps = ({ auth, refresh }) => {\n    return {\n        user: auth.user,\n        refresh: refresh.refresh,\n    }\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return bindActionCreators({ setRefresh }, dispatch);\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PastryDetail);","/home/jb-inc/Desktop/cara-cakes-react-app/src/Components/PastryCart/PastryCart.component.js",["614","615","616","617","618"],"import React, { useEffect, useState } from 'react';\nimport { IoAdd, IoBrush, IoClose, IoRemove, IoStatsChart, IoThumbsDown, IoThumbsUp, IoWallet } from 'react-icons/io5';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\n\nimport { Notification } from '..';\nimport { BASE_URL } from '../../utils/globalVariable';\nimport { Thousand } from '../../utils/utilities';\nimport styles from './PastryCart.module.css';\nimport { setRefresh } from '../../redux/Actions/Refresh.actions';\n\nconst PastryCart = (props) => {\n    const { detail, setDetail, pastry, user, refresh } = props;\n    \n    const [loading, setLoading] = useState(false);\n    const [likes, setLikes] = useState(0);\n    const [dislikes, setDislikes] = useState(0);\n    const [count, setCount] = useState(0);\n    const [show, setShow] = useState(false);\n    const [pastryMessage, setPastryMessage] = useState('');\n    const [message, setMessage] = useState({});\n\n    useEffect(() => {\n        props.setRefresh(false);\n    }, [refresh]);\n\n    const AddToCart = (id) => {\n        setLoading(true);\n        fetch(`${BASE_URL}/user/addToCart/${id}?user=${user._id}`, {\n            method: 'POST',\n        })\n            .then(res => {\n                const statusCode = res.status;\n                const response = res.json();\n                return Promise.all([statusCode, response]);\n            })\n            .then(res => {\n                const statusCode = res[0];\n                const response = res[1];\n                setLoading(false);\n\n                if (statusCode === 200) {\n                    setCount(count + 1);\n                    console.log(response);\n                    props.setRefresh(true);\n                }\n\n                if (statusCode === 422) {\n                    setShow(true);\n                    setMessage({\n                        type: 'error',\n                        message: `${pastry.name} not added to cart.`,\n                        title: 'Failed'\n                    });\n                }\n\n            })\n            .catch(err => {\n                setShow(true);\n                setMessage({\n                    type: 'error',\n                    title: 'Unexpected Error',\n                    message: 'Please check your internet connection.'\n                });\n            })\n    };\n\n    const SubFromCart = (id) => {\n        setLoading(true);\n        fetch(`${BASE_URL}/user/subFromCart/${id}?user=${user._id}`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        })\n            .then(res => {\n                const statusCode = res.status;\n                const response = res.json();\n                return Promise.all([statusCode, response]);\n            })\n            .then(res => {\n                const statusCode = res[0];\n                const response = res[1];\n                setLoading(false);\n\n                if (statusCode === 200) {\n                    setCount(count - 1);\n                    props.setRefresh(true);\n                }\n\n                if (statusCode === 422) {\n                    setShow(true);\n                    setMessage({\n                        type: 'error',\n                        message: `${pastry.name} not added to cart.`,\n                        title: 'Failed'\n                    });\n                }\n            })\n            .catch(err => {\n                setShow(true);\n                setMessage({\n                    type: 'error',\n                    title: 'Unexpected Error',\n                    message: 'Please check your internet connection.'\n                });\n            })\n    };\n\n    const Close = () => {\n        setDetail(false);\n    };\n\n\n    useEffect(() => {\n        if(pastry.length !== 0) {\n            setLikes(pastry.pastryId.likes.users.length);\n            setDislikes(pastry.pastryId.dislikes.users.length);\n            setPastryMessage(pastry.message);\n            setCount(pastry.quantity);\n        }\n        return () => {\n            setLikes(0);\n            setDislikes(0);\n            setPastryMessage('');\n            setCount(0);\n            setShow(false);\n            setMessage({});\n            setLoading(false);\n        }\n    }, [detail]);\n\n\n    const Message = (id) => {\n        fetch(`${BASE_URL}/user/message/${id}?user=${user._id}&message=${pastryMessage}`, {\n            method: 'POST',\n        })\n            .then(res => {\n                const statusCode = res.status;\n                const response = res.json();\n                return Promise.all([statusCode, response]);\n            })\n            .then(res => {\n                const statusCode = res[0];\n                const response = res[1];\n                setLoading(false);\n\n                if (statusCode === 200) {\n                    setShow(true);\n                    setMessage({\n                        type: 'success',\n                        message: `${pastryMessage} added for pastry.`,\n                        title: 'Success'\n                    });\n                    props.setRefresh(true);\n                }\n\n                if (statusCode === 500) {\n                    console.log('error');\n                }\n            })\n            .catch(err => {\n                console.log(err);\n            })\n    };\n\n    const disLikePastry = (id) => {\n        setLoading(true);\n        fetch(`${BASE_URL}/pastry/dislike/${id}?user=${user._id}`, {\n            method: 'POST',\n        })\n            .then(res => {\n                const statusCode = res.status;\n                const response = res.json();\n                return Promise.all([statusCode, response]);\n            })\n            .then(res => {\n                const statusCode = res[0];\n                const response = res[1].response;\n                setLoading(false);\n\n                if (statusCode === 200) {\n                    setLikes(response.likes.users.length);\n                    setDislikes(response.dislikes.users.length);\n                    props.setRefresh(true);\n                }\n\n                if (statusCode === 500) {\n                    console.log('error');\n                }\n            })\n            .catch(err => {\n                console.log(err);\n            })\n    };\n\n    const likePastry = (id) => {\n        setLoading(true);\n        fetch(`${BASE_URL}/pastry/like/${id}?user=${user._id}`, {\n            method: 'POST',\n        })\n            .then(res => {\n                const statusCode = res.status;\n                const response = res.json();\n                return Promise.all([statusCode, response]);\n            })\n            .then(res => {\n                const statusCode = res[0];\n                const response = res[1].response;\n                setLoading(false);\n\n                if (statusCode === 200) {\n                    setLikes(response.likes.users.length);\n                    setDislikes(response.dislikes.users.length);\n                    props.setRefresh(true);\n                }\n\n                if (statusCode === 404) {\n                    console.log(response)\n                }\n\n                if (statusCode === 500) {\n                    console.log('error 500');\n                }\n            })\n            .catch(err => {\n                console.log(err, 'ksjdkfljlsjf');\n            })\n    };\n\n    return (\n        <div className={detail ? styles.notifyBackdrop : styles.notifyNoBackdrop}>\n            <div className={[styles.notifyContainer, detail ? styles.showContainer : styles.hideContainer].join(' ')}>\n                {pastry.length !== 0 && \n                <>\n                    <button className={styles.closeButton} onClick={() => Close()}><IoClose /></button>\n                    <div className={styles.pastryContainer}>\n                        {pastry.pastryId.discount > 0 && <div className={styles.pastryDiscount}><IoStatsChart /> Discount: {pastry.pastryId.discount || ''}%</div>}\n                        <div className={styles.pastryName}>{pastry.pastryId.name || ''}</div>\n                        <img src={`${BASE_URL}/${pastry.pastryId.image || ''}`} alt={pastry.price} className={styles.pastryImage} />\n                        <div className={styles.pastryPrice}><IoWallet className={styles.icon} /> Price: {Thousand(count >= 1 ? count * pastry.pastryId.price : pastry.pastryId.price || 0)} XAF</div>\n                        <div className={styles.pastryLikes} onClick={() => likePastry(pastry.pastryId._id || '')}><IoThumbsUp className={styles.icon} /> Likes: {Thousand(likes)}</div>\n                        <div className={styles.pastryDislikes} onClick={() => disLikePastry(pastry.pastryId._id || '')}><IoThumbsDown className={styles.icon} /> Dislikes: {Thousand(dislikes)}</div>\n                    </div>\n                        {count === 0 ? \n                            <div className={styles.notifyActions}>\n                                <button className={styles.notifyButton} onClick={() => AddToCart(pastry.pastryId._id || '')}>Add to Cart</button>\n                            </div> :\n                            <div className={styles.notifyActions}>\n                                <button className={styles.pastryButton} onClick={() => SubFromCart(pastry.pastryId._id || '')}><IoRemove /></button>\n                                <b className={styles.pastryQty}>Quantity: {count || ''}</b>\n                                <button className={styles.pastryButton} onClick={() => AddToCart(pastry.pastryId._id || '')}><IoAdd /></button>\n                            </div>\n                        }\n                    <div>\n                        <input type=\"text\" placeholder=\"Message on pastry\" value={pastryMessage || ''} className={styles.pastryMessage} onChange={event => setPastryMessage(event.target.value)} />\n                        <button className={styles.notifyButton} onClick={() => Message(pastry.pastryId._id || '')}><IoBrush className={styles.icon} style={{paddingTop: '3px'}} />Paste</button>\n                    </div>\n                    <button className={styles.notifyButton} onClick={() => setDetail(false)}>Close</button>\n                </>}\n            </div>\n            <Notification message={message} show={show} setShow={setShow} />\n        </div>\n    )\n}\n\nconst mapStateToProps = ({ auth, refresh }) => {\n    return {\n        user: auth.user,\n        refresh: refresh.refresh,\n    }\n};\n\nconst mapDispatchToProps = (dispatch) => {\n    return bindActionCreators({ setRefresh }, dispatch);\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PastryCart);","/home/jb-inc/Desktop/cara-cakes-react-app/src/Components/Notification/Notification.component.js",["619"],"import React, { useEffect } from 'react';\n\nimport styles from './Notification.module.css';\n\nconst Notification = (props) => {\n    const {message, show, setShow} = props;\n\n    useEffect(() => {\n        setTimeout(() => {\n            setShow(false);\n        }, 3000);\n    }, [show])\n\n    return (\n        <div className={[styles.notifyContainer, show ? styles.showContainer : styles.hideContainer, message.type === 'error' && styles.dangerBorder, ].join(' ')}>\n            <h2 className={[styles.notifyTitle, message.type === 'error' && styles.dangerColor].join(' ')}>{message.title}</h2>\n            <b className={styles.notifyMessage}>{message.message}</b>\n        </div>\n    )\n}\n\nexport default Notification;","/home/jb-inc/Desktop/cara-cakes-react-app/src/sections/AboutSection/About.section.js",[],"/home/jb-inc/Desktop/cara-cakes-react-app/src/Components/OrdersTable/OrderTable.component.js",["620","621","622","623","624"],"import React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\n\nimport { pans2 } from '../../res/img';\nimport { DateString, Thousand } from '../../utils/utilities';\nimport styles from './OrderTable.module.css';\nimport { setRefresh } from '../../redux/Actions/Refresh.actions';\nimport { BASE_URL } from '../../utils/globalVariable';\nimport { Notification, OrderDetails } from '..';\nimport { IoTrashBinSharp } from 'react-icons/io5';\n\nconst OrderTable = (props) => { \n    const { orders, token, refresh, setDetail, setOrder } = props;\n\n    const [loading, setLoading] = useState(false);\n    const [show, setShow] = useState(false);\n    const [message, setMessage] = useState({});\n\n    useEffect(() => {\n        props.setRefresh(false);\n        \n        return () => {\n            setLoading(false);\n            setShow(false);\n            setMessage({});\n        }\n    }, [refresh]);\n    \n    const IncStatus = (order, total) => {\n        if (order.status !== 'On the Way' && order.status !== 'Confirmed') {\n            setLoading(true);\n            fetch(`${BASE_URL}/order/status/${order._id}?total=${total}`, {\n                method: 'PUT',\n                headers: {\n                    'Authorization': `Basic ${token}`,\n                    'Content-Type': 'application/json',\n                }\n            })\n                .then(res => {\n                    const statusCode = res.status;\n                    const response = res.json();\n                    return Promise.all([statusCode, response]);\n                })\n                .then(res => {\n                    const statusCode = res[0];\n                    const response = res[1];\n                    setLoading(false);\n    \n                    if (statusCode === 200) {\n                        setShow(true);\n                        setMessage({\n                            title: 'Success',\n                            message: 'Order status updated.'\n                        });\n                        props.setRefresh(true);\n                    }\n    \n                })\n                .catch(err => {\n                    console.log(err);\n                    setLoading(false);\n                    setShow(true);\n                    setMessage({\n                        type: 'error',\n                        title: 'Unexpected Error',\n                        message: 'Please check your internet connection.',\n                    });\n                })\n        }\n    };\n\n    const OrderDetails = (order) => {\n        setOrder(order);\n        setDetail(true);\n    }\n\n\n    return (\n            <div className={styles.cartSeparator}>\n                <table className={styles.cartTable}>\n                    <thead className={styles.cartTableHeader}>\n                        <td className={styles.cartTableHeaderData}>Client Name</td>\n                        <td className={styles.cartTableHeaderData}>Suspended</td>\n                        <td className={styles.cartTableHeaderData}>Status</td>\n                        <td className={styles.cartTableHeaderData}>Total</td>\n                        <td className={styles.cartTableHeaderData}>Date</td>\n                        <td className={styles.cartTableHeaderData}>Actions</td>\n                    </thead>\n                    {orders.map((order, index) => \n                        <tr className={styles.cartTableRow}>\n                            <td className={[styles.cartTableData, styles.cartTableImageContainer].join(' ')}>\n                                <img src={order.userId.image ? `${BASE_URL}/${order.userId.image}` : pans2} alt={order.userId.name} className={styles.cartTableDataImage} />\n                                <b>{order.userId.name.substr(0, 15)}</b>\n                            </td>\n                            <td className={styles.cartTableData}>{order.userId.suspend ? \"True\" : \"False\"}</td>\n                            <td className={styles.cartTableData}>{order.status}</td>\n                            <td className={styles.cartTableData}>{Thousand(order.pastries.reduce((sum, pastry) => sum + (pastry.pastryId.discount ? (((100 - pastry.pastryId.discount)/100) * pastry.pastryId.price * pastry.quantity) : (pastry.pastryId.price * pastry.quantity)), 0))}</td>\n                            <td className={styles.cartTableData}>{DateString(order.createdAt)}</td>\n                            <td className={styles.cartTableData}>\n                                <button className={[styles.cartButton, styles.verify].join(' ')} onClick={() => IncStatus(order, order.pastries.reduce((sum, pastry) => sum + (pastry.pastryId.discount ? (((100 - pastry.pastryId.discount)/100) * pastry.pastryId.price * pastry.quantity) : (pastry.pastryId.price * pastry.quantity)), 0))}>Inc Status</button>\n                                <button className={[styles.cartButton, styles.details].join(' ')} onClick={() => OrderDetails(order)}>Details</button>\n                            </td>\n                        </tr>\n                    )}\n                </table>\n            <Notification setShow={setShow} show={show} message={message} />\n            </div>\n    )\n}\n\nconst mapStateToProps = ({ auth, refresh }) => {\n    return {\n        user: auth.user,\n        refresh: refresh.refresh\n    }\n};\n\nconst mapDispatchToProps = (dispatch) => {\n    return bindActionCreators({ setRefresh }, dispatch);\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(OrderTable);\n","/home/jb-inc/Desktop/cara-cakes-react-app/src/Components/Verification/Verification.component.js",["625","626"],"import React, { useEffect } from 'react';\nimport { Button } from '..';\n\nimport styles from './Verification.module.css';\n\nconst Verification = (props) => {\n    const {message, verify, setVerify, onClick} = props;\n\n    return (\n        <div className={verify ? styles.notifyBackdrop : styles.notifyNoBackdrop}>\n            <div className={[styles.notifyContainer, verify ? styles.showContainer : styles.hideContainer, message.type === 'danger' && styles.dangerBorder, ].join(' ')}>\n                <h2 className={[styles.notifyTitle, message.type === 'danger' && styles.dangerColor].join(' ')}>{message.title}</h2>\n                <b className={styles.notifyMessage}>{message.message}</b>\n                <div className={styles.notifyActions}>\n                    <button className={[styles.notifyButtons, styles.danger].join(' ')} onClick={() => onClick(message.data._id)}>Delete</button>\n                    <button className={styles.notifyButtons} onClick={() => setVerify(false)}>Cancel</button>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Verification;","/home/jb-inc/Desktop/cara-cakes-react-app/src/sections/Header/Header.section.js",[],"/home/jb-inc/Desktop/cara-cakes-react-app/src/sections/Sample/Sample.section.js",["627","628","629","630","631","632","633"],"import React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\n\nimport styles from './Sample.module.css';\nimport { SampleCard } from '../../Components';\nimport { BASE_URL } from '../../utils/globalVariable';\nimport { setPastries } from '../../redux/Actions/Data.actions';\n\nconst Sample = (props) => {\n\n    const [active, setActive] = useState(-1);\n    const [page, setPage] = useState(1);\n    const [pastries, setPastries] = useState([]);\n    const [total, setTotal] = useState(0);\n    const [message, setMessage] = useState({});\n    const [show, setShow] = useState(false);\n\n    useEffect(() => {\n        fetch(`${BASE_URL}/superpastries?page=${page}`, {\n            method: 'GET',\n        })\n        .then(res => {\n            const statusCode = res.status;\n            const response = res.json();\n            return Promise.all([statusCode, response]);\n        })\n        .then(res => {\n            const statusCode = res[0];\n            const response = res[1];\n\n            if(statusCode === 200) {\n                console.log(response.pastries);\n                setPastries(response.pastries.reverse());\n                props.setPastries(response.pastries.reverse());\n                setTotal(response.totalItems);\n            }\n\n            if(statusCode === 500) {\n                console.log(response, '500');\n                setShow(true);\n                setMessage({\n                    type: 'error',\n                    title: 'Unexpected Error',\n                    message: response.message,\n                })\n            }\n        })\n    }, []);\n\n    return (\n        <section className={styles.secSample} id=\"sec-sample flvs\">\n                <h2 className={styles.secTitle} id=\"flvs\">\n                    Feel the flavour with every bite\n                </h2>\n            <div className={styles.sampleRow}>\n                <div className={styles.secSide}>\n                    <SampleCard pastry={pastries[Math.floor(Math.random() * (pastries.length - 1))]} index={1} />\n                </div>\n                <div className={styles.secSide}>\n                    <SampleCard pastry={pastries[Math.floor(Math.random() * (pastries.length - 1))]} index={2} />\n                </div>\n                <div className={styles.secSide}>\n                    <SampleCard pastry={pastries[Math.floor(Math.random() * (pastries.length - 1))]} index={3} />\n                </div>\n            </div>\n        </section>\n    )\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return bindActionCreators({setPastries}, dispatch);\n}\n\nexport default connect(null, mapDispatchToProps)(Sample);","/home/jb-inc/Desktop/cara-cakes-react-app/src/sections/Login/Login.section.js",[],"/home/jb-inc/Desktop/cara-cakes-react-app/src/sections/Footer/Footer.section.js",["634","635","636"],"import React from 'react';\nimport { IoLogoFacebook, IoLogoInstagram, IoLogoWhatsapp, IoMail, IoPhonePortrait } from 'react-icons/io5';\nimport { NavLink } from 'react-router-dom';\n\nimport styles from './Footer.module.css';\nimport {jbInc, logo8} from '../../res/img';\n\nconst Footer = () => {\n    return (\n        <footer className={styles.secFooter}>\n            <div className={styles.footerLogoBox}>\n                <img src={logo8} alt=\"CaraCakes\" className={styles.footerLogo} />\n            </div>\n    <div className={styles.secContainer}>\n        <div className={[styles.secSide, styles.footerLinks].join(' ')}>\n            <div>\n                <div className={styles.footerLeft}>\n                    <h3 className={styles.subTitle}>\n                        Locations\n                    </h3>\n                    <ul className={styles.footerList}>\n                        <li className={styles.footerItem}><NavLink to='/hello' className={styles.footerLink}>Buea</NavLink></li>\n                        <li className={styles.footerItem}><NavLink to='/hello' className={styles.footerLink}>Limbe</NavLink></li>\n                        <li className={styles.footerItem}><NavLink to='/hello' className={styles.footerLink}>Bamenda</NavLink></li>\n                    </ul>\n                </div>\n                <div className={styles.footerRight}>\n                    <h3 className={styles.subTitle}>\n                        Protocol\n                    </h3>\n                    <ul className={styles.footerList}>\n                        <li className={styles.footerItem}><NavLink to='/hello' className={styles.footerLink}>Terms and Condition</NavLink></li>\n                        <li className={styles.footerItem}><NavLink to='/hello' className={styles.footerLink}>Privacy Policy</NavLink></li>\n                        <li className={styles.footerItem}><NavLink to='/hello' className={styles.footerLink}>Careers</NavLink></li>\n                        <li className={styles.footerItem}><NavLink to='/hello' className={styles.footerDev}>JB Inc</NavLink></li>\n                        <li className={styles.footerItem}><NavLink to='/hello' className={styles.footerDev}>Jume Brice</NavLink></li>\n                    </ul>\n                </div>\n            </div>\n        </div>\n        <div className={styles.secSide}>\n            <div className={styles.footerCreator}>\n                <div className={styles.footerCreatorBox}>\n                    <img src={jbInc} alt=\"Creator\" className={styles.footerImage} />\n                </div>\n            </div>\n        </div>\n    </div>\n    <div className={styles.footerContacts}>\n        <span className={styles.footerContactsRound}><a href='https://www.facebook.com/jume.njah' target=\"_blank\"><IoLogoFacebook className={styles.footerIcons}/></a></span>\n        <span className={styles.footerContactsRound}><a href='tel:237679574561'><IoPhonePortrait className={styles.footerIcons}/></a></span>\n        <span className={styles.footerContactsRound}><a href='mailto:bricejume@gmail.com'><IoMail className={styles.footerIcons}/></a></span>\n        <span className={styles.footerContactsRound}>\n            <a \n                href=\"https://wa.me/237681726633?text=Good%20day,%20Mr%20Jume%20Brice,%20I'm%20interested%20in%20creating%20a%20baker%20account%20for%20my%20pastry%20business\"\n                target=\"_blank\"\n            >\n                <IoLogoWhatsapp />\n            </a></span>\n    </div>\n    <div className={styles.copyRight}>\n        <p>Copyright &copy; of JBInc</p>\n    </div>\n</footer>\n    )\n}\n\nexport default Footer;\n","/home/jb-inc/Desktop/cara-cakes-react-app/src/sections/Register/Register.section.js",["637","638","639","640","641","642","643","644","645","646","647","648","649","650"],"import React, { useState } from 'react';\nimport makeAnimated from 'react-select/animated';\nimport Select from 'react-select';\n\nimport { ButtonOne, Input, LinkOne, Notification } from '../../Components';\nimport RadioButton from '../../Components/RadioButtons/RadioButtons.component';\nimport { AuthMail, AuthTel } from '../../utils/auth';\nimport styles from './Register.module.css';\nimport {BASE_URL} from '../../utils/globalVariable';\n\nconst animatedComponents = makeAnimated();\n\nconst RegisterSection = (props) => {\n    const {\n        name,\n        email,\n        tel,\n        password,\n        conPw,\n        categories,\n        idCard,\n        errorIdCard,\n        setName,\n        setEmail,\n        companyName,\n        setTel,\n        setIdCard,\n        setPassword,\n        setCompanyName,\n        setCategories,\n        setConPw,\n        errorName,\n        errorEmail,\n        errorCompanyName,\n        errorTel,\n        errorPassword,\n        errorConPw,\n        setErrorName,\n        setErrorEmail,\n        setErrorTel,\n        setErrorIdCard,\n        setErrorPassword,\n        setErrorCompanyName,\n        setErrorConPw,\n        loading,\n        setLoading,\n    } = props;\n\n    const [type, setType] = useState('');\n    const [_categories] = useState([\n        { value: 'birthday-cake', label: 'Birthday Cakes' },\n        { value: 'wedding-cake', label: 'Wedding Cakes' },\n        { value: 'cookies', label: 'Cookies' },\n        { value: 'doughnuts', label: 'Doughnuts' },\n        { value: 'pancakes', label: 'Pancakes' },\n        { value: 'cup-cakes', label: 'Cup Cake' },\n    ]);\n    const [message, setMessage] = useState({});\n    const [show, setShow] = useState(false);\n    \n    const nextPage = () => {\n        props.history.push({pathname: '/register/baker'});\n    }\n\n    const authenticate = () => {\n        let hasError = false;\n        setLoading(true);\n\n        if (name.length < 5) {\n            hasError = true;\n            setErrorName(true);\n        }\n\n        if (!AuthMail(email)) {\n            hasError = true;\n            setErrorEmail(true);\n        }\n\n        if (!AuthTel(tel)) {\n            hasError = true;\n            setErrorTel(true);\n        }\n\n        if(password.length < 5) {\n            hasError = true;\n            setErrorPassword(true);\n        }\n\n        if (password !== conPw) {\n            hasError = true;\n            setErrorPassword(true);\n            setErrorConPw(true);\n        }\n\n        if(hasError) {\n            console.log(name, email, tel, password, conPw);\n            setLoading(false)\n            setShow(true);\n            setMessage({\n                type: 'error',\n                title: 'Invalid Data',\n                message: 'Data provided is not correct, please check again.'\n            })\n            return false;\n        }\n\n        const body = {\n            name,\n            tel,\n            email,\n            password\n        }\n\n        let statusCode, responseJson;\n        let url = `${BASE_URL}/user/register`;\n\n        fetch(url, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(body),\n        })\n        .then((response) => {\n            statusCode = response.status;\n            responseJson = response.json();\n            return Promise.all([statusCode, responseJson]);\n        })\n        .then((res) => {\n            statusCode = res[0];\n            responseJson = res[1];\n            setLoading(false);\n            if(statusCode === 201) {\n                console.log(responseJson);\n                props.history.push({pathname: '/login'});\n            }\n            if(statusCode === 422) {\n                console.log(responseJson, '422');\n                setShow(true);\n                setMessage({\n                    type: 'error',\n                    title: 'Unexpected Error',\n                    message: responseJson.data[0].msg,\n                })\n            }\n            if(statusCode === 500) {\n                console.log(responseJson, '500');\n                setShow(true);\n                setMessage({\n                    type: 'error',\n                    title: 'Unexpected Error',\n                    message: responseJson.message,\n                })\n            }\n            // console.log(responseJson);\n        })\n        .catch(err => {\n            setLoading(false);\n            setShow(true);\n            setMessage({\n                type: 'error',\n                title: 'Unexpected Error',\n                message: 'Please check your internet connection.'\n            })\n        })\n    }\n\n    return (\n        <section className={styles.secSignup} id=\"signup\">\n            <div className={styles.signup}>\n                <div className={styles.signupForm}>\n                    <div>\n                        <Input \n                            len={1}\n                            type='text'\n                            placeholder=\"Jane Price\"\n                            label=\"Name\"\n                            value={name}\n                            setValue={(event) => setName(event.target.value)}\n                            error={errorName}\n                            serError={() => setErrorName()}\n                        />\n                        <Input\n                            len={2}\n                            type=\"email\"\n                            placeholder=\"janeprice@gmail.com\"\n                            label=\"Email\"\n                            value={email}\n                            setValue={(event) => setEmail(event.target.value)}\n                            error={errorEmail}\n                            serError={() => setErrorEmail()}\n                            />\n                            <Input\n                            len={3}\n                            type='number'\n                            placeholder={681726633}\n                            label=\"Telephone number\"\n                            value={tel}\n                            setValue={(event) => setTel(event.target.value)}\n                            error={errorTel}\n                            serError={() => setErrorTel()}\n                            />\n                        <div className={styles.formGroup}>\n                            <RadioButton type=\"Client\" setType={setType} />\n                            <RadioButton type=\"Baker\" setType={setType} />\n                        </div>\n                        {type === \"Client\" && (\n                            <>\n                                <Input\n                                    len={4}\n                                    type=\"password\"\n                                    placeholder=\"********\"\n                                    label=\"Password\"\n                                    value={password}\n                                    setValue={(event) => setPassword(event.target.value)}\n                                    error={errorPassword}\n                                    serError={() => setErrorPassword()}\n                                />\n                                <Input\n                                    len={5}\n                                    type=\"password\"\n                                    placeholder=\"********\"\n                                    label=\"Confirm password\"\n                                    value={conPw}\n                                    setValue={(event) => setConPw(event.target.value)}\n                                    error={errorConPw}\n                                    serError={() => setErrorConPw()}\n                                />\n                            </>\n                        )}\n                        <div className={styles.formGroup}>\n                            {type === \"Client\" && (\n                                <>\n                                    <ButtonOne title={loading ? 'Creating...' : \"Register\"} onClick={() => authenticate()} loading={loading} />\n                                    <LinkOne link=\"/login\" title=\"Login\" />\n                                </>\n                            )}\n                            {type === \"Baker\" && <ButtonOne title=\"Next\" onClick={() => nextPage()} />}\n                        </div>\n                    </div>\n                </div>\n                <div className={styles.signupContainer}>\n                    <h2 className={styles.title}>\n                        Sign up\n                    </h2>\n                </div>\n            </div>\n            <Notification message={message} show={show} setShow={setShow} />\n        </section>\n    )\n}\n\nexport default RegisterSection;\n\nconst colourStyles = {\n  option: (styles, { data, isDisabled, isFocused, isSelected }) => {\n    return {\n      ...styles,\n      backgroundColor: isFocused ? \"#ff1493\" : null,\n      color: isFocused ? \"white\" : '#999',\n    };\n  },\n  control: (base, {isFocused}) => ({\n    ...base,\n    border: 'none',\n    // This line disable the blue border\n    boxShadow: 'none',\n    borderBottom: '2px',\n    borderBottomStyle: 'solid',\n    borderBottomColor: isFocused ? \"#ff1493\" : 'transparent',\n    borderRadius: '2px',\n    // overflow: 'hidden',\n    // clipPath: ,\n    \n    '&:hover': {\n        border: 'none',\n        boxShadow: 'none',\n        borderBottom: '2px',\n        borderBottomStyle: 'solid',\n        borderBottomColor: isFocused ? \"#ff1493\" : 'transparent',\n    }\n  })\n};\n","/home/jb-inc/Desktop/cara-cakes-react-app/src/sections/SideNav/SideNav.section.js",[],"/home/jb-inc/Desktop/cara-cakes-react-app/src/sections/Contact/Contact.section.js",[],"/home/jb-inc/Desktop/cara-cakes-react-app/src/sections/Shop/index.js",[],"/home/jb-inc/Desktop/cara-cakes-react-app/src/sections/Baker/Baker.section.js",["651"],"import React, { useEffect, useState } from 'react'\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\n\nimport styles from './Baker.module.css';\nimport {BakersCard} from '../../Components';\nimport { BASE_URL } from '../../utils/globalVariable';\nimport { setBakers } from '../../redux/Actions/Data.actions';\n\nconst Baker = (props) => {\n\n    const [bakers, setBakers] = useState([]);\n\n    useEffect(() => {\n        fetch(`${BASE_URL}/bakers`, {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n            }\n        })\n        .then(res => {\n            const statusCode = res.status;\n            const response = res.json();\n            return Promise.all([statusCode, response]);\n        })\n        .then(res => {\n            const statusCode = res[0];\n            const response = res[1];\n\n            if (statusCode === 200) {\n                props.setBakers(response.bakers);\n                setBakers(response.bakers.sort((x, y) => y.followers.users.length - x.followers.users.length));\n            }\n        })\n        .catch(err => {\n            console.log(err);\n        })\n\n        return () => {\n        }\n\n    }, []);\n\n    return (\n        <section className={styles.secDescription} id=\"stry\">\n            <h2 className={styles.title}>\n                Our top expert bakers\n            </h2>\n            <div className={styles.dashScroll}>\n                <div className={styles.dashContainer}>\n                    {bakers.map((baker, index) => ((index <= 9) && <BakersCard baker={baker} key={index} />))}\n                </div>\n            </div>\n        </section>\n    )\n}\nconst mapDispatchToProps = (dispatch) => {\n    return bindActionCreators({ setBakers }, dispatch);\n};\n\nexport default connect(null, mapDispatchToProps)(Baker);\n\n","/home/jb-inc/Desktop/cara-cakes-react-app/src/sections/Events/Event.section.js",[],"/home/jb-inc/Desktop/cara-cakes-react-app/src/sections/AddEvent/AddEvent.section.js",[],"/home/jb-inc/Desktop/cara-cakes-react-app/src/sections/AdminNav/AdminNav.section.js",["652","653"],"import React from 'react';\nimport { \n    IoArchive, \n    IoBrush, \n    IoCafe, \n    IoDocument, \n    IoGift, \n    IoGrid, \n    IoLogOut, \n    IoPeople, \n    IoPerson\n} from 'react-icons/io5';\nimport { connect } from 'react-redux';\nimport {NavLink} from 'react-router-dom';\nimport { bindActionCreators } from 'redux';\n\nimport { favicon } from '../../res/img';\nimport styles from './AdminNav.module.css';\nimport { resetUser } from '../../redux/Actions/Auth.actions';\n\nconst AdminNav = (props) => {\n    const { user } = props;\n    return (\n        <div className={styles.panelUser}>\n            <ul className={styles.panelSideNav}>\n                <img src={favicon} alt=\"Logo\" className={styles.panelLogo} />\n                <li className={styles.panelSideNavItem}>\n                    <NavLink to=\"/admin/dashboard\" exact className={styles.panelSideNavLink} activeClassName={styles.panelSideNavActive}>\n                        <span className={styles.panelSideNavIcon}><IoGrid /></span><span>Dashboard</span>\n                    </NavLink>\n                </li>\n                {user.type === 'Admin' &&\n                    <>\n                        <li className={styles.panelSideNavItem}>\n                            <NavLink to=\"/admin/dashboard/bakers\" className={styles.panelSideNavLink} activeClassName={styles.panelSideNavActive}>\n                                <span className={styles.panelSideNavIcon}><IoCafe /></span><span>Bakers</span>\n                            </NavLink>\n                        </li>\n                        <li className={styles.panelSideNavItem}>\n                            <NavLink to=\"/admin/dashboard/users\" className={styles.panelSideNavLink} activeClassName={styles.panelSideNavActive}>\n                                <span className={styles.panelSideNavIcon}><IoPeople /></span><span>Users</span>\n                            </NavLink>\n                        </li>\n                        <li className={styles.panelSideNavItem}>\n                            <NavLink to=\"/admin/dashboard/pastry-super\" className={styles.panelSideNavLink} activeClassName={styles.panelSideNavActive}>\n                                <span className={styles.panelSideNavIcon}><IoGift /></span><span>All Pastries</span>\n                            </NavLink>\n                        </li>\n                        <li className={styles.panelSideNavItem}>\n                            <NavLink to=\"/admin/dashboard/orders-super\" className={styles.panelSideNavLink} activeClassName={styles.panelSideNavActive}>\n                                <span className={styles.panelSideNavIcon}><IoArchive /></span><span>All Orders</span>\n                            </NavLink>\n                    </li>\n                    <li className={styles.panelSideNavItem}>\n                            <NavLink to=\"/admin/dashboard/adminprofile\" className={styles.panelSideNavLink} activeClassName={styles.panelSideNavActive}>\n                                <span className={styles.panelSideNavIcon}><IoPerson /></span><span>Profile</span>\n                            </NavLink>\n                        </li>\n                    </>}\n                {user.type === 'Baker' && <>\n                    <li className={styles.panelSideNavItem}>\n                        <NavLink to=\"/admin/dashboard/orders\" className={styles.panelSideNavLink} activeClassName={styles.panelSideNavActive}>\n                            <span className={styles.panelSideNavIcon}><IoArchive /></span><span>Orders</span>\n                        </NavLink>\n                    </li>\n                    <li className={styles.panelSideNavItem}>\n                        <NavLink to=\"/admin/dashboard/pastry\" className={styles.panelSideNavLink} activeClassName={styles.panelSideNavActive}>\n                            <span className={styles.panelSideNavIcon}><IoGift /></span><span>Pastries</span>\n                        </NavLink>\n                    </li>\n                    <li className={styles.panelSideNavItem}>\n                        <NavLink to=\"/admin/dashboard/profile\" className={styles.panelSideNavLink} activeClassName={styles.panelSideNavActive}>\n                            <span className={styles.panelSideNavIcon}><IoPerson /></span><span>Profile</span>\n                        </NavLink>\n                    </li>\n                </>\n                }\n                <li className={styles.panelSideNavItem} onClick={() => props.resetUser()}>\n                    <NavLink to=\"/\" className={styles.panelSideNavLink}>\n                        <span className={styles.panelSideNavIcon}><IoLogOut /></span><span>Logout</span>\n                    </NavLink>\n                </li>\n                {/*<li className={styles.panelSideNavItem}>\n                        <NavLink to=\"/admin/dashboard/all-orders\" className={styles.panelSideNavLink} activeClassName={styles.panelSideNavActive}>\n                            <span className={styles.panelSideNavIcon}><IoDocument /></span><span>All Orders</span>\n                        </NavLink>\n                    </li>\n                     <li className={styles.panelSideNavItem}>\n                        <NavLink to=\"/admin/addpastry\" className={styles.panelSideNavLink}>\n                            <span>Add Pastry</span>\n                        </NavLink>\n                    </li> */}\n                {/* <input type=\"checkbox\" name=\"pastries\" id=\"pastries\" className={styles.addCategory} />\n                    <li className={styles.panelSideNavItem}>\n                        <label for=\"pastries\" className={styles.panelSideNavLink}>View Pantry</label>\n                    </li>\n                        <div className={styles.addCategoryShow}>\n                            <li className={styles.panelSideNavItem}><NavLink to=\"/admin/cakes\" className={styles.panelSideNavLink}>Birthday Cakes</NavLink></li>\n                            <li className={styles.panelSideNavItem}><NavLink to=\"/admin/cookies\" className={styles.panelSideNavLink}>Cookies</NavLink></li>\n                            <li className={styles.panelSideNavItem}><NavLink to=\"/admin/pans\" className={styles.panelSideNavLink}>Pancakes</NavLink></li>\n                            <li className={styles.panelSideNavItem}><NavLink to=\"/admin/weds\" className={styles.panelSideNavLink}>Wedding Cakes</NavLink></li>\n                            <li className={styles.panelSideNavItem}><NavLink to=\"/admin/dons\" className={styles.panelSideNavLink}>Dougnuts</NavLink></li>\n                            <li className={styles.panelSideNavItem}><NavLink to=\"/admin/cups\" className={styles.panelSideNavLink}>Cup Cakes</NavLink></li>\n                            <li className={styles.panelSideNavItem}><NavLink to=\"/admin/vals\" className={styles.panelSideNavLink}>Valentine choice</NavLink></li>\n                        </div> */}\n                {/* <li className={styles.panelSideNavItem}>\n                            <NavLink to=\"/admin/create\" className={styles.panelSideNavLink}>\n                                <span>Create Admin</span>\n                            </NavLink>\n                        </li> */}\n            </ul>\n            <div className={styles.power}>\n                <span>Copyrighted &copy;<NavLink to=\"#\" className={styles.dev}>JB Inc.</NavLink>All Rights reserved</span>\n            </div>\n        </div>\n    )\n}\n\nconst mapStateToProps = ({ auth }) => {\n    return {\n        user: auth.user,\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return bindActionCreators({ resetUser }, dispatch);\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AdminNav);","/home/jb-inc/Desktop/cara-cakes-react-app/src/sections/EditEvent/EditEvent.section.js",["654","655"],"import React, { useState } from 'react';\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport Modal from 'react-modal';\n\nimport { Button, ButtonOne, DatePick, Input, Link, LinkOne, TextArea } from '../../Components';\nimport styles from './EditEvent.module.css';\n\nconst EditEvent = (props) => {\n    const {isOpen, setIsOpen} = props;\n    const [startDate, setStartDate] = useState(null);\n\n    return (\n        <Modal isOpen={isOpen} className={styles.secEditEvent} overlayClassName={styles.secEditEvent}>\n                <div className={styles.editEvent}>\n                    <div className={styles.editEventForm}>\n                            <Input\n                                placeholder=\"Party\"\n                                type=\"text\"\n                                label=\"Purpose\"\n                                len={2}\n                            />\n                            <Input\n                                placeholder=\"Me and Friends\"\n                                type=\"text\"\n                                label=\"For\"\n                                len={3}\n                            />\n                            <DatePick startDate={startDate} setStartDate={(date) => setStartDate(date)} />\n                            <TextArea\n                                placeholder=\"Showing appreciation to friends\"\n                                type=\"text\"\n                                label=\"Reason\"\n                                len={5}\n                            />\n                            <div className={styles.editButtons}>\n                                <Link link=\"#\" title=\"Edit\" />\n                                <Button onClick={() => setIsOpen(false)} title=\"Cancel\" />\n                            </div>\n                    </div>\n                    <div className={styles.editEventContainer}>\n                        <h2 className={styles.title}>\n                            Edit Event\n                        </h2>\n                    </div>\n                </div>\n        </Modal>\n    )\n}\n\nexport default EditEvent;\n","/home/jb-inc/Desktop/cara-cakes-react-app/src/sections/Order/Order.section.js",[],"/home/jb-inc/Desktop/cara-cakes-react-app/src/sections/Bakers/Baker.section.js",["656","657","658","659"],"import React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\n\nimport { ActivityTwo, BakerDetails, BakerTable, Language, Notification, Profile, SearchBar} from '../../Components';\nimport { BASE_URL } from '../../utils/globalVariable';\nimport styles from './Baker.module.css';\nimport { setBakers } from '../../redux/Actions/Data.actions';\nimport { setRefresh } from '../../redux/Actions/Refresh.actions';\n\nconst Bakers = (props) => {\n    const { user, token, refresh, _bakers } = props;\n\n    const [bakers, setBakers] = useState([]);\n    const [message, setMessage] = useState({});\n    const [show, setShow] = useState(false);\n    const [loading, setLoading] = useState(false);\n    const [total, setTotal] = useState(0);\n    const [baker, setBaker] = useState([]);\n    const [detail, setDetail] = useState(false);\n    const [active, setActive] = useState(0);\n\n    useEffect(() => {\n        props.setRefresh(false);\n    }, [refresh]);\n\n    useEffect(() => {\n        setLoading(true);\n        fetch(`${BASE_URL}/rawbakers`, {\n            method: 'GET',\n            headers: {\n                'Authorization': `Basic ${token}`,\n            }\n        })\n            .then(res => {\n                const statusCode = res.status;\n                const response = res.json();\n                return Promise.all([statusCode, response]);\n            })\n            .then(res => {\n                const statusCode = res[0];\n                const response = res[1];\n                setLoading(false);\n\n                if (statusCode === 200) {\n                    setBakers(response.bakers);\n                    props.setBakers(response.bakers);\n                    setActive(0);\n                    setTotal(response.totalItems);\n                }\n\n                if (statusCode === 404) {\n                    setShow(true);\n                    setMessage({\n                        type: 'error',\n                        title: 'Unexpected Error',\n                        message: response.message,\n                    })\n                }\n\n                if (statusCode === 500) {\n                    setShow(true);\n                    setMessage({\n                        type: 'error',\n                        title: 'Unexpected Error',\n                        message: response.message,\n                    })\n                }\n            })\n            .catch(err => {\n                setLoading(false);\n                setShow(true);\n                setMessage({\n                    type: 'error',\n                    title: 'Unexpected Error',\n                    message: 'Please check your internet connection.'\n                })\n            })\n        \n        return () => {\n            setDetail(false);\n            setBakers([]);\n            setMessage({});\n            setShow(false);\n            setLoading(false);\n            setTotal(0);\n        }\n\n    }, [refresh]);\n\n    const setFilter = (index, type) => {\n        setActive(index);\n\n        if (type === 'Verified') {\n            let _baker = _bakers.filter(data => data.verify);\n            setBakers(_baker);\n        }\n        if (type === 'Suspended') {\n            let _baker = _bakers.filter(data => !data.suspend);\n            setBakers(_baker);\n        }\n        if (type === 'Unverified') {\n            let _baker = _bakers.filter(data => !data.verify);\n            setBakers(_baker);\n        }\n        if (type === 'Unsuspended') {\n            let _baker = _bakers.filter(data => data.suspend);\n            setBakers(_baker);\n        }\n        if (type === 'all') {\n            setBakers(_bakers);\n        }\n    }\n\n    return (\n        <div className={styles.bakerContainer}>\n            <div className={styles.bakerSection}>\n                <div className={styles.bakerLength}>\n                    <h2 className={styles.bakerLengthTitle}>{bakers.length} Baker{bakers.length !== 1 && 's'}</h2>\n                </div>\n                <div className={styles.bakerScroll}>\n                    <div className={styles.bakerCat}>\n                        <button className={[styles.bakerChoice, active === 0 && styles.bakerActive].join(' ')} onClick={() => setFilter(0, 'all')}>All Bakers</button>\n                        <button className={[styles.bakerChoice, active === 1 && styles.bakerActive].join(' ')} onClick={() => setFilter(1, 'Verified')}>Verified</button>\n                        <button className={[styles.bakerChoice, active === 2 && styles.bakerActive].join(' ')} onClick={() => setFilter(2, 'Suspended')}>Not Suspended</button>\n                        <button className={[styles.bakerChoice, active === 3 && styles.bakerActive].join(' ')} onClick={() => setFilter(3, 'Unverified')}>Unverified</button>\n                        <button className={[styles.bakerChoice, active === 4 && styles.bakerActive].join(' ')} onClick={() => setFilter(4, 'Unsuspended')}>Suspended</button>\n                        <button className={[styles.bakerChoice, active === 5 && styles.bakerActive].join(' ')} onClick={() => setFilter(5, 'all')}>Add Baker</button>\n                    </div>\n                </div>\n                {loading ? <div className={styles.activity}>\n                    <ActivityTwo />\n                </div> : <BakerTable bakers={bakers} token={token} setBaker={setBaker} setDetail={setDetail} />}\n                <Notification show={show} setShow={setShow} message={message} />\n                <BakerDetails detail={detail} setDetail={setDetail} baker={baker} />\n            </div>\n            <div className={styles.panelEventHeader}>\n                <div className={styles.panelPosition}>\n                    <SearchBar />\n                    <Language />\n                    <Profile />\n                </div>\n            </div>\n        </div>\n    )\n};\n\nconst mapStateToProps = ({auth, refresh, data}) => {\n    return {\n        user: auth.user,\n        token: auth.token,\n        refresh: refresh.refresh,\n        _bakers: data.bakers,\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return bindActionCreators({setBakers, setRefresh}, dispatch);\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Bakers);","/home/jb-inc/Desktop/cara-cakes-react-app/src/sections/Cart/Cart.section.js",["660"],"import React, { useState } from 'react'\n\nimport CartList from './CartList/Cart.list';\nimport styles from './Cart.module.css';\nimport { PastryCart } from '../../Components';\n\nconst UserSection = (props) => {\n    const {} = props;\n    const [isDetail, setIsDetail] = useState(false);\n    const [pastry, setPastry] = useState([]);\n\n    return (\n        <div className={styles.cart}>\n            <CartList isDetail={isDetail} setIsDetail={setIsDetail} setPastry={setPastry} />\n            <PastryCart pastry={pastry} detail={isDetail} setDetail={setIsDetail} />\n        </div>\n    )\n}\n\nexport default UserSection;\n","/home/jb-inc/Desktop/cara-cakes-react-app/src/sections/Users/User.section.js",["661","662","663"],"import React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\n\nimport { Language, Notification, Profile, SearchBar, UserDetails, UserTable } from '../../Components';\nimport { BASE_URL } from '../../utils/globalVariable';\nimport styles from './User.module.css';\nimport {setUsers} from '../../redux/Actions/Data.actions';\n\nconst Users = (props) => {\n    const { user, token, refresh, _users } = props;\n\n    const [users, setUsers] = useState([]);\n    const [message, setMessage] = useState({});\n    const [show, setShow] = useState(false);\n    const [loading, setLoading] = useState(false);\n    const [total, setTotal] = useState(0);\n    const [_user, setUser] = useState([]);\n    const [detail, setDetail] = useState(false);\n    const [active, setActive] = useState(0);\n\n    useEffect(() => {\n        setLoading(true);\n        fetch(`${BASE_URL}/users`, {\n            method: 'GET',\n            headers: {\n                'Authorization': `Basic ${token}`,\n            }\n        })\n            .then(res => {\n                const statusCode = res.status;\n                const response = res.json();\n                return Promise.all([statusCode, response]);\n            })\n            .then(res => {\n                const statusCode = res[0];\n                const response = res[1];\n\n                if (statusCode === 200) {\n                    setUsers(response.users);\n                    props.setUsers(response.users);\n                    setActive(0);\n                    setTotal(response.totalItems);\n                }\n\n                if (statusCode === 404) {\n                    setShow(true);\n                    setMessage({\n                        type: 'error',\n                        title: 'Unexpected Error',\n                        message: response.message,\n                    })\n                }\n\n                if (statusCode === 500) {\n                    setShow(true);\n                    setMessage({\n                        type: 'error',\n                        title: 'Unexpected Error',\n                        message: response.message,\n                    })\n                }\n            })\n            .catch(err => {\n                setLoading(false);\n                setShow(true);\n                setMessage({\n                    type: 'error',\n                    title: 'Unexpected Error',\n                    message: 'Please check your internet connection.'\n                })\n            })\n    }, [refresh]);\n\n    const setFilter = (index, type) => {\n        setActive(index);\n\n        if (type === 'Suspended') {\n            let _user = _users.filter(data => !data.suspend);\n            setUsers(_user);\n        }\n        if (type === 'Unsuspended') {\n            let _user = _users.filter(data => data.suspend);\n            setUsers(_user);\n        }\n        if (type === 'all') {\n            setUsers(_users);\n        }\n    }\n\n    return (\n        <div className={styles.bakerContainer}>\n            <div className={styles.bakerSection}>\n                <div className={styles.bakerLength}>\n                    <h2 className={styles.bakerLengthTitle}>{total} User{total !== 1 && 's'}</h2>\n                </div>\n                <div className={styles.bakerScroll}>\n                    <div className={styles.bakerCat}>\n                        <button className={[styles.bakerChoice, active === 0 && styles.bakerActive].join(' ')} onClick={() => setFilter(0, 'all')}>All Users</button>\n                        <button className={[styles.bakerChoice, active === 1 && styles.bakerActive].join(' ')} onClick={() => setFilter(1, 'Suspended')}>Not Suspended</button>\n                        <button className={[styles.bakerChoice, active === 2 && styles.bakerActive].join(' ')} onClick={() => setFilter(2, 'Unsuspended')}>Suspended</button>\n                        <button className={[styles.bakerChoice, active === 3 && styles.bakerActive].join(' ')} onClick={() => setFilter(3, 'all')}>Add User</button>\n                    </div>\n                </div>\n                <UserTable users={users} token={token} setDetail={setDetail} setUser={setUser} />\n                <UserDetails detail={detail} setDetail={setDetail} _user={_user} />\n                <Notification show={show} setShow={setShow} message={message} />\n            </div>\n            <div className={styles.panelEventHeader}>\n                <div className={styles.panelPosition}>\n                    <SearchBar />\n                    <Language />\n                    <Profile />\n                </div>\n            </div>\n        </div>\n    )\n};\n\nconst mapStateToProps = ({ auth, refresh, data }) => {\n    return {\n        user: auth.user,\n        token: auth.token,\n        refresh: refresh.refresh,\n        _users: data.users,\n    }\n};\n\nconst mapDispatchToProps = (dispatch) => {\n    return bindActionCreators({setUsers}, dispatch);\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Users);","/home/jb-inc/Desktop/cara-cakes-react-app/src/sections/Pastry/Pastry.section.js",["664","665","666","667"],"import React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\n\nimport { AddPastry, EditPastry } from '..';\nimport { Language, Notification, PastryDetail, PastryTable, Profile, SearchBar } from '../../Components';\nimport { BASE_URL } from '../../utils/globalVariable';\nimport styles from './Pastry.module.css';\nimport {setPastries} from '../../redux/Actions/Data.actions';\n\nconst Pastry = (props) => {\n    const { token, user, _pastries, refresh } = props;\n    const [active, setActive] = useState(-1);\n    const [isOpen, setIsOpen] = useState(false);\n    const [page, setPage] = useState(1);\n    const [pastries, setPastries] = useState([]);\n    const [isEdit, setIsEdit] = useState(false);\n    const [message, setMessage] = useState({});\n    const [show, setShow] = useState(false);\n    const [loading, setLoading] = useState(false);\n    const [detail, setDetail] = useState(false);\n    const [pastry, setPastry] = useState([]);\n\n    useEffect(() => {\n        setLoading(true);\n        fetch(`${BASE_URL}/bakerpastries/${user._id.toString()}?page=${page}`, {\n            method: 'GET',\n        })\n            .then(res => {\n                const statusCode = res.status;\n                const response = res.json();\n                return Promise.all([statusCode, response]);\n            })\n            .then(res => {\n                const statusCode = res[0];\n                const response = res[1];\n\n                if (statusCode === 200) {\n                    console.log(response.pastries);\n                    setPastries(response.pastries.reverse());\n                    props.setPastries(response.pastries.reverse());\n                    setActive(-1);\n                }\n\n                if (statusCode === 500) {\n                    console.log(response, '500');\n                    setShow(true);\n                    setMessage({\n                        type: 'error',\n                        title: 'Unexpected Error',\n                        message: response.message,\n                    })\n                }\n            })\n            .catch(err => {\n                console.log(err);\n                setLoading(false);\n                setShow(true);\n                setMessage({\n                    type: 'error',\n                    title: 'Unexpected Error',\n                    message: 'Please check your internet connection.'\n                })\n            })\n    }, [isOpen, refresh, isEdit]);\n\n    const setFilter = (index, type) => {\n        setActive(index);\n\n        if (type !== 'all') {\n            let Pastries = _pastries.filter(data => data.type === type);\n            setPastries(Pastries);\n        }\n        if (type === 'all') {\n            setPastries(_pastries);\n        }\n    }\n\n    return (\n        <div className={styles.bakerContainer}>\n            <div className={styles.bakerSection}>\n                <div className={styles.bakerLength}>\n                    <h2 className={styles.bakerLengthTitle}>{pastries.length} {(pastries.length === 0 || pastries.length > 1) ? 'Pastries' : 'Pastry'}</h2>\n                </div>\n                <div className={styles.bakerScroll}>\n                    <div className={styles.bakerCat}>\n                        <button className={[styles.bakerChoice, active === -1 && styles.bakerActive].join(' ')} onClick={() => setFilter(-1, 'all')}>All Pastries</button>\n                        {user.categories.map((category, index) => <button className={[styles.bakerChoice, active === index && styles.bakerActive].join(' ')} onClick={() => setFilter(index, category)}>{category}</button>)}\n                        <button className={styles.bakerChoice} onClick={() => setIsOpen(true)}>Add Pastry</button>\n                    </div>\n                </div>\n                <PastryTable pastries={pastries} setDetail={setDetail} setPastry={setPastry} />\n                <AddPastry isOpen={isOpen} setIsOpen={setIsOpen} />\n                <EditPastry isOpen={isEdit} setIsOpen={setIsEdit} pastry={pastry} />\n                <PastryDetail setDetail={setDetail} detail={detail} pastry={pastry} setIsEdit={setIsEdit} />\n                <Notification message={message} show={show} setShow={setShow} />\n            </div>\n            <div className={styles.panelEventHeader}>\n                <div className={styles.panelPosition}>\n                    <SearchBar />\n                    <Language />\n                    <Profile />\n                </div>\n            </div>\n        </div>\n    )\n};\n\nconst mapStateToProps = ({ auth, data, refresh }) => {\n    return {\n        token: auth.token,\n        user: auth.user,\n        _pastries: data.pastries,\n        refresh: refresh.refresh,\n    }\n};\n\nconst mapDispatchToProps = (dispatch) => {\n    return bindActionCreators({setPastries}, dispatch);\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Pastry);","/home/jb-inc/Desktop/cara-cakes-react-app/src/sections/Orders/Order.section.js",["668","669","670"],"import React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\n\nimport { ActivityTwo, AOrderTable, Language, OrderDetails, Profile, SearchBar } from '../../Components';\nimport styles from './Order.module.css';\nimport { setRefresh } from '../../redux/Actions/Refresh.actions';\nimport { setOrders } from '../../redux/Actions/Data.actions';\nimport { BASE_URL } from '../../utils/globalVariable';\n\nconst Orders = (props) => {\n    const { user, token, refresh, _orders } = props;\n\n    const [loading, setLoading] = useState(false);\n    const [show, setShow] = useState(false);\n    const [message, setMessage] = useState({});\n    const [orders, setOrders] = useState([]);\n    const [order, setOrder] = useState([]);\n    const [detail, setDetail] = useState(false);\n    const [active, setActive] = useState(0);\n\n    useEffect(() => {\n        fetch(`${BASE_URL}/baker/getorders/${user._id}`, {\n            method: 'GET',\n            headers: {\n                'Authorization': `Basic ${token}`,\n                'Content-Type': 'application/json',\n            }\n        })\n            .then(res => {\n                const statusCode = res.status;\n                const response = res.json();\n                return Promise.all([statusCode, response]);\n            })\n            .then(res => {\n                const statusCode = res[0];\n                const response = res[1];\n                setLoading(false);\n\n                if (statusCode === 200) {\n                    setOrders(response.orders);\n                    setActive(0);\n                    props.setOrders(response.orders);\n                }\n\n                if (statusCode === 404) {\n                    setShow(true);\n                    setMessage({\n                        type: 'error',\n                        title: 'Unexpected Error',\n                        message: response.message,\n                    })\n                }\n\n                if (statusCode === 500) {\n                    setShow(true);\n                    setMessage({\n                        type: 'error',\n                        title: 'Unexpected Error',\n                        message: response.message,\n                    })\n                }\n            })\n            .catch(err => {\n                setLoading(false);\n                setShow(true);\n                setMessage({\n                    type: 'error',\n                    title: 'Unexpected Error',\n                    message: 'Please check your internet connection.'\n                })\n            })\n        \n        return () => {\n            setOrders([]);\n            setShow(false);\n            setLoading(false);\n            setMessage({});\n        }\n    }, [refresh]);\n\n    const setFilter = (index, type) => {\n        setActive(index);\n        console.log(_orders, 'Hahah');\n\n        if (type !== 'all') {\n            let _order = _orders.filter(data => data.status === type);\n            setOrders(_order);\n        }\n        if (type === 'all') {\n            setOrders(_orders);\n        }\n    }\n\n    return (\n        <div className={styles.bakerContainer}>\n            <div className={styles.bakerSection}>\n                <div className={styles.bakerLength}>\n                    <h2 className={styles.bakerLengthTitle}>{orders.length} Order{orders.length !== 1 && 's'}</h2>\n                </div>\n                <div className={styles.bakerScroll}>\n                    <div className={styles.bakerCat}>\n                        <button className={[styles.bakerChoice, active === 0 && styles.bakerActive].join(' ')} onClick={() => setFilter(0, 'all')}>All Orders</button>\n                        <button className={[styles.bakerChoice, active === 1 && styles.bakerActive].join(' ')} onClick={() => setFilter(1, 'New')}>New</button>\n                        <button className={[styles.bakerChoice, active === 2 && styles.bakerActive].join(' ')} onClick={() => setFilter(2, 'Registered')}>Registered</button>\n                        <button className={[styles.bakerChoice, active === 3 && styles.bakerActive].join(' ')} onClick={() => setFilter(3, 'Processing')}>Processing</button>\n                        <button className={[styles.bakerChoice, active === 4 && styles.bakerActive].join(' ')} onClick={() => setFilter(4, 'On the Way')}>On the Way</button>\n                        <button className={[styles.bakerChoice, active === 5 && styles.bakerActive].join(' ')} onClick={() => setFilter(5, 'Delivered')}>Delivered</button>\n                        <button className={[styles.bakerChoice, active === 6 && styles.bakerActive].join(' ')} onClick={() => setFilter(6, 'Confirmed')}>Confirmed</button>\n                    </div>\n                </div>\n                {loading ? <div className={styles.activity}>\n                    <ActivityTwo />\n                </div> : <AOrderTable orders={orders} token={token} setDetail={setDetail} setOrder={setOrder} />}\n                <OrderDetails detail={detail} setDetail={setDetail} order={order} />\n            </div>\n            <div className={styles.panelEventHeader}>\n                <div className={styles.panelPosition}>\n                    <SearchBar />\n                    <Language />\n                    <Profile />\n                </div>\n            </div>\n        </div>\n    )\n};\n\nconst mapStateToProps = ({auth, refresh, data}) => {\n    return {\n        user: auth.user,\n        token: auth.token,\n        refresh: refresh.refresh,\n        _orders: data.orders,\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return bindActionCreators({ setRefresh, setOrders }, dispatch);\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Orders);","/home/jb-inc/Desktop/cara-cakes-react-app/src/sections/PastrySuper/Pastry.section.js",["671","672","673","674","675"],"import React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\n\nimport { ActivityTwo, Language, Notification, PastryDetail, PastryTableSuper, Profile, SearchBar } from '../../Components';\nimport { BASE_URL } from '../../utils/globalVariable';\nimport styles from './Pastry.module.css';\nimport {setPastries} from '../../redux/Actions/Data.actions';\n\nconst Pastry = (props) => {\n    const { token, user, pastry } = props;\n    const [active, setActive] = useState(-1);\n    const [page, setPage] = useState(1);\n    const [pastries, setPastries] = useState([]);\n    const [total, setTotal] = useState(0);\n    const [message, setMessage] = useState({});\n    const [show, setShow] = useState(false);\n    const [loading, setLoading] = useState(false);\n    const [detail, setDetail] = useState(false);\n    const [_pastry, setPastry] = useState([]);\n\n    useEffect(() => {\n        setLoading(true);\n        fetch(`${BASE_URL}/superpastries?page=${page}`, {\n            method: 'GET',\n        })\n            .then(res => {\n                const statusCode = res.status;\n                const response = res.json();\n                return Promise.all([statusCode, response]);\n            })\n            .then(res => {\n                const statusCode = res[0];\n                const response = res[1];\n                setLoading(false);\n\n                if (statusCode === 200) {\n                    console.log(response.pastries);\n                    setPastries(response.pastries.reverse());\n                    props.setPastries(response.pastries.reverse());\n                    setActive(-1);\n                    setTotal(response.totalItems);\n                }\n\n                if (statusCode === 500) {\n                    console.log(response, '500');\n                    setShow(true);\n                    setMessage({\n                        type: 'error',\n                        title: 'Unexpected Error',\n                        message: response.message,\n                    })\n                }\n            })\n    }, []);\n\n    const setFilter = (index, type) => {\n        setActive(index);\n\n        if (type !== 'all') {\n            let _pastries = pastry.filter(data => data.type === type);\n            setPastries(_pastries);\n        }\n        if (type === 'all') {\n            console.log(pastry);\n            setPastries(pastry);\n        }\n    }\n\n    return (\n        <div className={styles.bakerContainer}>\n            <div className={styles.bakerSection}>\n                <div className={styles.bakerLength}>\n                    <h2 className={styles.bakerLengthTitle}>{pastries.length} {(pastries.length === 0 || pastries.length > 1) ? 'Pastries' : 'Pastry'}</h2>\n                </div>\n                <div className={styles.bakerScroll}>\n                    <div className={styles.bakerCat}>\n                        <button className={[styles.bakerChoice, active === -1 && styles.bakerActive].join(' ')} onClick={() => setFilter(-1, 'all')}>All Pastries</button>\n                        <button className={[styles.bakerChoice, active === 0 && styles.bakerActive].join(' ')} onClick={() => setFilter(0, 'Birthday Cakes')}>Birthday Cakes</button>\n                        <button className={[styles.bakerChoice, active === 1 && styles.bakerActive].join(' ')} onClick={() => setFilter(1, 'Wedding Cakes')}>Wedding Cakes</button>\n                        <button className={[styles.bakerChoice, active === 2 && styles.bakerActive].join(' ')} onClick={() => setFilter(2, 'Doughnuts')}>Dougnuts</button>\n                        <button className={[styles.bakerChoice, active === 3 && styles.bakerActive].join(' ')} onClick={() => setFilter(3, 'Cookies')}>Cookies</button>\n                        <button className={[styles.bakerChoice, active === 4 && styles.bakerActive].join(' ')} onClick={() => setFilter(4, 'Pancakes')}>Pancakes</button>\n                        <button className={[styles.bakerChoice, active === 5 && styles.bakerActive].join(' ')} onClick={() => setFilter(5, 'Gift Baskets')}>Gift Baskets</button>\n                        <button className={[styles.bakerChoice, active === 6 && styles.bakerActive].join(' ')} onClick={() => setFilter(6, 'Cup Cakes')}>Cup Cakes</button>\n                    </div>\n                </div>\n                {loading ? <div className={styles.activity}>\n                    <ActivityTwo />\n                </div> : <PastryTableSuper pastries={pastries} setDetail={setDetail} setPastry={setPastry} />}\n                <PastryDetail setDetail={setDetail} detail={detail} pastry={_pastry} />\n                <Notification message={message} show={show} setShow={setShow} />\n            </div>\n            <div className={styles.panelEventHeader}>\n                <div className={styles.panelPosition}>\n                    <SearchBar />\n                    <Language />\n                    <Profile />\n                </div>\n            </div>\n        </div>\n    )\n};\n\nconst mapStateToProps = ({auth, data}) => {\n    return {\n        token: auth.token,\n        user: auth.user,\n        pastry: data.pastries,\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return bindActionCreators({setPastries}, dispatch);\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Pastry);","/home/jb-inc/Desktop/cara-cakes-react-app/src/sections/BakerDetails/BakerDetails.section.js",["676","677"],"import React, { useState } from 'react';\nimport makeAnimated from 'react-select/animated';\nimport Select from 'react-select';\n\nimport styles from './BakerDetails.module.css';\nimport {ButtonOne, Input, Notification, Selector} from '../../Components';\nimport { AuthMail, AuthTel } from '../../utils/auth';\nimport {BASE_URL} from '../../utils/globalVariable';\n\nconst animatedComponents = makeAnimated();\n\nconst BakerDetails = (props) => {\n    const {\n        name,\n        tel,\n        email,\n        password,\n        idCard,\n        categories,\n        companyName,\n        setPassword,\n        setIdCard,\n        setCategories,\n        setCompanyName,\n        errorPassword,\n        errorIdCard,\n        errorCategories,\n        errorCompanyName,\n        setErrorName,\n        setErrorEmail,\n        setErrorPassword,\n        setErrorIdCard,\n        setErrorTel,\n        setErrorCategories,\n        setErrorCompanyName,\n        loading,\n        setLoading,\n    } = props;\n\n    let Categories = [];\n\n    const authenticate = () => {\n        let hasError = false;\n        setLoading(true);\n\n        if (name.length < 5) {\n            hasError = true;\n            setErrorName(true);\n        }\n\n        if (!AuthMail (email)) {\n            hasError = true;\n            setErrorEmail(true);\n        }\n\n        if (!AuthTel(tel)) {\n            hasError = true;\n            setErrorTel(true);\n        }\n\n        if(password.length < 5) {\n            hasError = true;\n            setErrorPassword(true);\n        }\n\n        if (idCard.length < 7) {\n            hasError = true;\n            setErrorIdCard(true);\n        }\n\n        if (companyName.length < 3) {\n            hasError = true;\n            setErrorCompanyName(true);\n        }\n\n        if (categories.length < 1) {\n            hasError = true;\n            setErrorCategories(true);\n        }\n\n        if(hasError) {\n            setLoading(false)\n            setShow(true);\n            setMessage({\n                type: 'error',\n                title: 'Invalid Data',\n                message: 'Data provided is not correct, please check again.'\n            })\n            return false;\n        }\n\n        if(!hasError) {\n            categories.map((value, index) => (\n                Categories.push(value.label)\n            ))\n        }\n\n        const body = {\n            name,\n            email,\n            categories: Categories,\n            idCard,\n            password,\n            tel,\n            companyName\n        }\n\n        console.log(body, 'body');\n\n        let url = `${BASE_URL}/baker/register`;\n        let statusCode, responseJson;\n\n        fetch(url, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(body),\n        })\n        .then((response) => {\n            statusCode = response.status;\n            responseJson = response.json();\n            return Promise.all([statusCode, responseJson]);\n        })\n        .then((res) => {\n            statusCode = res[0];\n            responseJson = res[1];\n            setLoading(false);\n            if(statusCode === 201) {\n                console.log(responseJson);\n                props.history.push({pathname: '/login'});\n            }\n            if(statusCode === 422) {\n                console.log(responseJson, '422');\n                setShow(true);\n                setMessage({\n                    type: 'error',\n                    title: 'Details Conflict',\n                    message: responseJson.data[0].msg,\n                })\n            }\n            if(statusCode === 500) {\n                console.log(responseJson, '500');\n                setShow(true);\n                setMessage({\n                    type: 'error',\n                    title: 'Unexpected Error',\n                    message: responseJson.message,\n                })\n            }\n            console.log(responseJson, statusCode);\n        })\n        .catch(err => {\n            setLoading(false);\n            setShow(true);\n            setMessage({\n                type: 'error',\n                title: 'Unexpected Error',\n                message: 'Please check your internet connection.'\n            })\n        })\n    }\n\n    const [_categories] = useState([\n        { value: 'birthday-cake', label: 'Birthday Cakes' },\n        { value: 'wedding-cake', label: 'Wedding Cakes' },\n        { value: 'cookies', label: 'Cookies' },\n        { value: 'doughnuts', label: 'Doughnuts' },\n        { value: 'pancakes', label: 'Pancakes' },\n        { value: 'cup-cakes', label: 'Cup Cake' },\n    ]);\n    const [show, setShow] = useState(false);\n    const [message, setMessage] = useState({});\n\n    const previous = () => {\n        props.history.push({pathname: '/register'});\n    }\n\n    return (\n         <section className={styles.bakerSignup} id=\"signup\">\n                <div className={styles.signup}>\n                    <div className={styles.signupForm}>\n                        <div>\n                            <Input \n                                len={2}\n                                type='number'\n                                placeholder='000400370'\n                                label='ID card number'\n                                value={idCard}\n                                setValue={(event) => setIdCard(event.target.value)}\n                                error={errorIdCard}\n                                serError={() => setErrorIdCard()}\n                            />\n                            <Input \n                                len={3}\n                                type='text'\n                                placeholder='Henry pastries'\n                                label='Company name'\n                                value={companyName}\n                                setValue={(event) => setCompanyName(event.target.value)}\n                                error={errorCompanyName}\n                                serError={() => setErrorCompanyName()}\n                            />\n                            <div className={styles.formSelect}>\n                                    <Select \n                                        value={categories}\n                                        options={_categories}\n                                        styles={colourStyles}\n                                        onChange={(value) => setCategories(value)}\n                                        components={animatedComponents} \n                                        isMulti \n                                        className={[styles.formLength4, styles.formSelectInput].join(' ')} />\n                                </div>\n                            <Input \n                                len={5}\n                                type='password'\n                                placeholder=\"******\"\n                                label=\"Password\"\n                                value={password}\n                                setValue={(event) => setPassword(event.target.value)}\n                                error={errorPassword}\n                                serError={() => setErrorPassword()}\n                            />\n                            <div className={styles.formGroup}>\n                                <ButtonOne title=\"Back\" onClick={() => previous()} />\n                                <ButtonOne title=\"Register\" onClick={() => authenticate()} loading={loading} />\n                            </div>\n                        </div>\n                    </div>\n                    <div className={styles.signupContainer}>\n                        <h2 className={styles.title}>\n                            Sign up\n                        </h2>\n                    </div>\n            </div>\n            <Notification message={message} show={show} setShow={setShow} />\n        </section>\n    )\n}\n\n\nexport default BakerDetails;\n\nconst colourStyles = {\n  option: (styles, { data, isDisabled, isFocused, isSelected }) => {\n    return {\n      ...styles,\n      backgroundColor: isFocused ? \"#ff1493\" : null,\n      color: isFocused ? \"white\" : '#999',\n    };\n  },\n  control: (base, {isFocused}) => ({\n    ...base,\n    border: 'none',\n    // This line disable the blue border\n    boxShadow: 'none',\n    borderBottom: '2px',\n    borderBottomStyle: 'solid',\n    borderBottomColor: isFocused ? \"#ff1493\" : 'transparent',\n    borderRadius: '2px',\n    // overflow: 'hidden',\n    // clipPath: ,\n    \n    '&:hover': {\n        border: 'none',\n        boxShadow: 'none',\n        borderBottom: '2px',\n        borderBottomStyle: 'solid',\n        borderBottomColor: isFocused ? \"#ff1493\" : 'transparent',\n    }\n  })\n};","/home/jb-inc/Desktop/cara-cakes-react-app/src/sections/Dashboard/Dashboard.section.js",["678","679"],"import React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\n\nimport { ActivityTwo, BakerInfo, InfoCard, Language, Profile, SearchBar, UserInfo } from '../../Components';\nimport { BASE_URL } from '../../utils/globalVariable';\nimport styles from './Dashboard.module.css';\nimport { setRefresh } from '../../redux/Actions/Refresh.actions';\n\nconst Dashboard = ({ token }) => {\n    const [lbakers, setLbakers] = useState(false);\n    const [lusers, setLusers] = useState(false);\n    const [users, setUsers] = useState([]);\n    const [bakers, setBakers] = useState([]);\n    const [obakers, setObakers] = useState([]);\n    const [totalOrders, setTotalOrders] = useState(0);\n    const [rbakers, setRbakers] = useState(false);\n    const [rusers, setRusers] = useState(false);\n\n    useEffect(() => {\n        setLbakers(true);\n        fetch(`${BASE_URL}/allbakers`, {\n            method: 'GET',\n            headers: {\n                'Authorization': `Basic ${token}`,\n                'Content-Type': 'application/json',\n            }\n        })\n            .then(res => {\n                const statusCode = res.status;\n                const response = res.json();\n                return Promise.all([statusCode, response]);\n            })\n            .then(res => {\n                const statusCode = res[0];\n                const response = res[1];\n                setLbakers(false);\n\n                if (statusCode === 200) {\n                    let sortByOrders = [...response.bakers];\n                    let sortByTotal = [...response.bakers]\n                    setBakers(sortByTotal.sort((x, y) => y.total - x.total));\n                    setObakers(sortByOrders.sort((x, y) => y.orders.ordered.length - x.orders.ordered.length));\n                    let total = response.bakers.reduce((sum, baker) => sum + baker.orders.ordered.length, 0);\n                    setTotalOrders(total);\n                    setRbakers(false);\n                }\n            })\n            .catch(err => {\n                console.log(err);\n                setLbakers(false);\n            })\n        \n        return () => {\n            setLbakers(false);\n            setBakers([]);\n            setObakers([]);\n        }\n    }, [rbakers]);\n\n    useEffect(() => {\n        setLusers(true);\n        fetch(`${BASE_URL}/allusers`, {\n            method: 'GET',\n            headers: {\n                'Authorization': `Basic ${token}`,\n                'Content-Type': 'application/json',\n            }\n        })\n            .then(res => {\n                const statusCode = res.status;\n                const response = res.json();\n                return Promise.all([statusCode, response]);\n            })\n            .then(res => {\n                const statusCode = res[0];\n                const response = res[1];\n                setLusers(false);\n\n                if (statusCode === 200) {\n                    setUsers(response.users.sort((x, y) => y.total - x.total));\n                    setRusers(false);\n                }\n            })\n            .catch(err => {\n                console.log(err);\n                setLusers(false);\n            })\n        \n        return () => {\n            setLusers(false);\n            setUsers([]);\n        }\n    }, [rusers]);\n\n\n    return (\n        <div className={styles.dashboardContainer}>\n            <div className={styles.dashboard}>\n                <h2 className={styles.dashTitle}>General Info</h2>\n                <div className={styles.dashScroll}>\n                    <div className={styles.dashContainer}>\n                        {lbakers ? <ActivityTwo /> :\n                            <>\n                                <InfoCard num={totalOrders} com=\"All orders\" />\n                                {obakers.map((obaker, index) => <InfoCard num={obaker.orders.ordered.length} com={obaker.companyName} key={index} />)}\n                            </>\n                        }\n                    </div>\n                </div>\n                <h2 className={styles.dashTitle}>Top 10 Bakers</h2>\n                <div className={styles.dashScroll}>\n                    <div className={styles.dashContainer}>\n                        {lbakers ? <ActivityTwo /> : bakers.map((baker, index) => <BakerInfo baker={baker} setRbakers={setRbakers} key={index} />)}\n                    </div>\n                </div>\n                <h2 className={styles.dashTitle}>Top 10 Users</h2>\n                <div className={styles.dashScroll}>\n                    <div className={styles.dashContainer}>\n                        {lusers ? <ActivityTwo /> : users.map((user, index) => <UserInfo user={user} setRusers={setRusers} key={index} />)}\n                    </div>\n                </div>\n            </div>\n            <div className={styles.panelEventHeader}>\n                <div className={styles.panelPosition}>\n                    <SearchBar />\n                    <Language />\n                    <Profile />\n                </div>\n            </div>\n        </div>\n    )\n}\n\n\nconst mapStateToProps = ({ auth, refresh }) => {\n    return {\n        token: auth.token,\n        refresh: refresh.refresh,\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return bindActionCreators({ setRefresh }, dispatch);\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Dashboard);\n","/home/jb-inc/Desktop/cara-cakes-react-app/src/sections/AdminProfile/AdminProfile.section.js",["680","681","682","683"],"import React, { useEffect, useState } from 'react';\nimport { IoBrush } from 'react-icons/io5';\nimport makeAnimated from 'react-select/animated';\nimport Select from 'react-select';\n\nimport { AdminImage, Button, Notification, SquareArea, SquareInput } from '../../Components';\nimport { cups1, vals3 } from '../../res/img';\nimport styles from './AdminProfile.module.css';\nimport { connect } from 'react-redux';\nimport { BASE_URL } from '../../utils/globalVariable';\nimport { bindActionCreators } from 'redux';\nimport { setUser } from '../../redux/Actions/Auth.actions';\nimport { SetLocation, SetCategories, Thousand } from '../../utils/utilities';\n\nconst animatedComponents = makeAnimated();\n\nconst AdminProfile = (props) => {\n    const { user, token } = props;\n    const [locations] = useState([\n        { value: \"North-West\", label: \"North-West\" },\n        { value: \"South-West\", label: \"South-West\" },\n        { value: \"West\", label: \"West\" },\n        { value: \"Center\", label: \"Center\" },\n        { value: \"Litoral\", label: \"Litoral\" },\n        { value: \"North\", label: \"North\" },\n        { value: \"East\", label: \"East\" },\n        { value: \"North-West\", label: \"North-West\" },\n    ]);\n    const [_categories] = useState([\n        { value: 'birthday-cake', label: 'Birthday Cakes' },\n        { value: 'wedding-cake', label: 'Wedding Cakes' },\n        { value: 'cookies', label: 'Cookies' },\n        { value: 'doughnuts', label: 'Doughnuts' },\n        { value: 'pancakes', label: 'Pancakes' },\n        { value: 'cup-cakes', label: 'Cup Cake' },\n        { value: 'gift-baskets', label: 'Gift Baskets' },\n    ]);\n    const [loading, setLoading] = useState(false);\n    const [name, setName] = useState('');\n    const [company, setCompany] = useState('');\n    const [momoName, setMomoName] = useState('');\n    const [momo, setMomo] = useState('');\n    const [email, setEmail] = useState('');\n    const [contact, setContact] = useState('');\n    const [location, setLocation] = useState({});\n    const [about, setAbout] = useState('');\n    const [categories, setCategories] = useState([]);\n    const [nameError, setNameError] = useState(false);\n    const [companyError, setCompanyError] = useState(false);\n    const [momoNameError, setMomoNameError] = useState(false);\n    const [momoError, setMomoError] = useState(false);\n    const [emailError, setEmailError] = useState(false);\n    const [contactError, setContactError] = useState(false);\n    const [locationError, setLocationError] = useState(false);\n    const [aboutError, setAboutError] = useState(false);\n    const [isOpen, setIsOpen] = useState(false);\n    const [show, setShow] = useState(false);\n    const [message, setMessage] = useState({});\n    let Categories = [];\n\n\n    useEffect(() => {\n        setName(user.name || \"'empty'\");\n        setCompany(user.companyName || \"'empty'\");\n        setMomoName(user.momoName || \"'empty'\");\n        setMomo(user.momoNumber || \"'empty'\");\n        setEmail(user.email || \"'empty'\");\n        setAbout(user.about || \"'empty'\");\n        setContact(user.telNumber || \"'empty'\");\n        setAbout(user.about || \"'empty'\");\n        setCategories(user.categories);\n        let loc = user.location;\n        let cats = user.categories;\n    \n        setLocation(SetLocation(loc, locations) || \"'empty'\")\n        setCategories(SetCategories(cats, _categories));\n\n        return () => {\n            setName('');\n            setCompany('');\n            setMomoName('');\n            setMomo('');\n            setEmail('');\n            setAbout('');\n            setContact('');\n            setLocation('');\n            setAbout('');\n            setNameError(false);\n            setCompanyError(false);\n            setMomoNameError(false);\n            setMomoError(false);\n            setEmailError(false);\n            setAboutError(false);\n            setContactError(false);\n            setAboutError(false);\n            setLocationError(false);\n        }\n    }, [])\n\n    const Authenticate = (id) => {\n        let hasError = false;\n        setLoading(true);\n\n        if (name.length < 2) {\n            setNameError(true);\n            hasError = true;\n        }\n\n        if (company.length < 6) {\n            setCompanyError(true);\n            hasError = true;\n        }\n\n        if (momoName.length < 9) {\n            setMomoNameError(true);\n            hasError = true;\n        }\n\n        if (momo.length < 9) {\n            setMomoError(true);\n            hasError = true;\n        }\n\n        if (about.length < 10) {\n            setAboutError(true);\n            hasError = true;\n        }\n\n        if (hasError) {\n            return false;\n        }\n\n        if(!hasError) {\n            if(categories){categories.map((value, index) => (\n                Categories.push(value.label)\n            ))}\n        }\n\n        const body = {\n            name,\n            company,\n            categories: Categories,\n            about,\n            momo,\n            momoName,\n            contact,\n            email,\n            location: location.value,\n        }\n\n        fetch(`${BASE_URL}/baker/profile/${id}`, {\n            method: 'PUT',\n            headers: {\n                'Authorization': `Basic ${token}`,\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(body),\n        })\n            .then(res => {\n                const statusCode = res.status;\n                const response = res.json();\n                return Promise.all([statusCode, response]);\n            })\n            .then(res => {\n                const statusCode = res[0];\n                const response = res[1];\n                setLoading(false);\n\n                if (statusCode === 200) {\n                    setShow(true);\n                    setMessage({\n                        title: 'Success',\n                        message: 'Your profile has been updated'\n                    });\n                    props.setUser(response.baker);\n                }\n\n            })\n            .catch(err => {\n                console.log(err);\n                setShow(true);\n                setMessage({\n                    type: 'error',\n                    title: 'Unexpected Error',\n                    message: 'Please check your internet connection.',\n                });\n        })\n    }\n\n    return (\n        <div className={styles.aprofile}>\n            <div className={styles.profileContainer}>\n                <div className={styles.profileInfo}>\n                    <div className={styles.profileBoard}>\n                        <img src={user.ceoImage ? `${BASE_URL}/${user.ceoImage}`  : cups1} alt={'Username'} className={styles.profileImg} />\n                        <img src={user.companyImage ? `${BASE_URL}/${user.companyImage}`  : cups1} alt={'Username'} className={styles.profileLogo} />\n                        <button className={styles.profileEdit} onClick={() => setIsOpen(true)}><IoBrush className={styles.profileIcon} /></button>\n                    </div>\n                    <div className={styles.profileCredentials}>\n                        <h2 className={styles.profileName}>{name.substr(0, 15)} | {company.substr(0, 15) || 'House of Flavours'}</h2>\n                        <h3 className={styles.profileSubTitle}><span className={styles.profileSubInfo} >{contact || \"'empty'\"}</span> | <span className={styles.profileSubInfo} >{user.idCardNumber}</span> | <span className={styles.profileSubInfo} >{momoName.substr(0, 12) || \"'empty'\"}</span> </h3>\n                        <h3 className={styles.profileSubTitle}><span className={styles.profileSubInfo} >{momo || \"'empty'\"}</span>  | <span className={styles.profileSubInfo} >{user.location || \"'empty'\"}</span>  | <span className={styles.profileSubInfo} >{email.substr(0, 12)}...</span> </h3>\n                    </div>\n                    <div className={styles.profileStats}>\n                        <div className={styles.profileNumber}>\n                            <h2 className={styles.profileTitle}>{user.orders.ordered.length}</h2>\n                            <b className={styles.profileSub}>Orders</b>\n                        </div>\n                        <div className={styles.profileNumber}>\n                            <h2 className={styles.profileTitle}>{user.followers.users.length}</h2>\n                            <b className={styles.profileSub}>Followers</b>\n                        </div>\n                        <div className={styles.profileNumber}>\n                            <h2 className={styles.profileTitle}>{user.categories.length}</h2>\n                            <b className={styles.profileSub}>Categories</b>\n                        </div>\n                        <div className={styles.profileNumber}>\n                            <h2 className={styles.profileTitle}>{Thousand(user.total)}</h2>\n                            <b className={styles.profileSub}>Earnings</b>\n                        </div>\n                        <div className={styles.profileNumber}>\n                            <h2 className={styles.profileTitle}>{user.likes.users.length}</h2>\n                            <b className={styles.profileSub}>Likes</b>\n                        </div>\n                        <div className={styles.profileNumber}>\n                            <h2 className={styles.profileTitle}>{user.dislikes.users.length}</h2>\n                            <b className={styles.profileSub}>Dislikes</b>\n                        </div>\n                    </div>\n                    <div className={styles.profileAbout}>\n                        <h2 className={styles.profileName}>About</h2>\n                        <b className={styles.profileHistory}>\n                            {about}\n                        </b>\n                    </div>\n                </div>\n                <div className={styles.profileFormContainer}>\n                    <div className={styles.profileForm}>\n                        <h2 className={styles.profileName}>My Details</h2>\n                        <SquareInput\n                            placeholder=\"Jane Doe\"\n                            label=\"Name\"\n                            value={name}\n                            setValue={event => setName(event.target.value)}\n                            error={nameError}\n                            setError={setNameError}\n                        />\n                        <SquareInput\n                            placeholder=\"Henry Pastries\"\n                            label=\"Company\"\n                            value={company}\n                            setValue={event => setCompany(event.target.value)}\n                            error={companyError}\n                            setError={setCompanyError}\n                        />\n                        <SquareInput\n                            placeholder=\"6x1234567\"\n                            label=\"MOMO Number\"\n                            value={momo}\n                            setValue={event => setMomo(event.target.value)}\n                            error={momoError}\n                            setError={setCompanyError}\n                        />\n                        <SquareInput\n                            placeholder=\"Janette Sirri\"\n                            label=\"MOMO Name\"\n                            value={momoName}\n                            setValue={event => setMomoName(event.target.value)}\n                            error={momoNameError}\n                            setError={setMomoNameError}\n                        />\n                        <SquareInput\n                            placeholder=\"6x1234567\"\n                            label=\"Contact\"\n                            value={contact}\n                            setValue={event => setContact(event.target.value)}\n                            error={contactError}\n                            setError={setContactError}\n                        />\n                        <div className={styles.profileGroup}>\n                            <b className={styles.profileLabel}>Categories</b>\n                            <div className={styles.selectWidth}>\n                                <Select\n                                    value={categories}\n                                    options={_categories}\n                                    components={animatedComponents}\n                                    onChange={value => setCategories(value)}\n                                    styles={locationStyles}\n                                    isMulti\n                                    className={styles.profileSelect}\n                                />\n                            </div>\n                        </div>\n                        <div className={styles.profileGroup}>\n                            <b className={styles.profileLabel}>Location</b>\n                            <Select\n                                value={location}\n                                options={locations}\n                                components={animatedComponents}\n                                onChange={value => setLocation(value)}\n                                styles={locationStyles}\n                                className={styles.profileSelect} />\n                        </div>\n                        <SquareInput\n                            placeholder=\"janedoe@gmail.cm\"\n                            label=\"Email\"\n                            value={email}\n                            setValue={event => setEmail(event.target.value)}\n                            error={emailError}\n                            setError={setEmailError}\n                        />\n                        <SquareArea\n                            placeholder={\"Tell your story\"}\n                            label=\"About\"\n                            value={about}\n                            setValue={event => setAbout(event.target.value)}\n                            error={aboutError}\n                            setError={setAboutError}\n                        />\n                        <div className={styles.profileActions}>\n                            <Button title=\"Save Changes\" onClick={() => Authenticate(user._id)} />\n                            <Button title=\"Edit Password\" />\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <AdminImage isOpen={isOpen} setIsOpen={setIsOpen} user={user} />\n            <Notification setShow={setShow} show={show} message={message} />\n        </div>\n    )\n}\n\nconst mapStateToProps = ({auth}) => {\n    return {\n        token: auth.token,\n        user: auth.user,\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return bindActionCreators({ setUser }, dispatch);\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AdminProfile);\n\nconst locationStyles = {\n  option: (styles, { data, isDisabled, isFocused, isSelected }) => {\n    return {\n      ...styles,\n      backgroundColor: isFocused ? \"#215379\" : null,\n      color: isFocused ? \"white\" : '#999',\n    };\n  },\n  control: (base, {isFocused}) => ({\n      ...base,\n      border: 'none',\n      boxShadow: 'none',\n      borderRadius: '4px',\n      borderBottom: '2px',\n      borderBottomStyle: 'solid',\n      borderBottomColor: '#14334a',\n      borderTop: '2px',\n      borderTopStyle: 'solid',\n      borderTopColor: '#14334a',\n      borderLeft: '2px',\n      borderLeftStyle: 'solid',\n      borderLeftColor: '#14334a',\n      borderRight: '2px',\n      borderRightStyle: 'solid',\n      borderRightColor: '#14334a',\n      cursor: 'pointer',\n    '&:hover': {\n        border: '2px',\n        boxShadow: 'none',\n        borderStyle: 'solid',\n        borderColor: isFocused ? \"#14334a\" : '#14334a',\n    }\n  })\n};\n","/home/jb-inc/Desktop/cara-cakes-react-app/src/sections/Details/Details.section.js",[],"/home/jb-inc/Desktop/cara-cakes-react-app/src/sections/AddPastry/AddPastry.section.js",["684","685","686","687"],"import React, { useEffect, useState } from 'react';\nimport Modal from 'react-modal';\nimport { connect } from 'react-redux';\nimport Select from 'react-select';\nimport makeAnimated from 'react-select/animated';\n\nimport { Button, Link, Notification, SquareArea, SquareInput } from '../../Components';\nimport { BASE_URL } from '../../utils/globalVariable';\nimport styles from './AddPastry.module.css';\n\nconst animatedComponents = makeAnimated();\n\nconst AddPastry = (props) => {\n    const {isOpen, setIsOpen, user, token} = props;\n    const [message, setMessage] = useState({});\n    const [show, setShow] = useState(false);\n    const [name, setName] = useState('');\n    const [discount, setDiscount] = useState('');\n    const [type, setType] = useState('');\n    const [image, setImage] = useState('');\n    const [price, setPrice] = useState('');\n    const [about, setAbout] = useState('');\n    const [nameError, setNameError] = useState(false);\n    const [discountError, setDiscountError] = useState(false);\n    const [typeError, setTypeError] = useState(false);\n    const [imageError, setImageError] = useState(false);\n    const [priceError, setPriceError] = useState(false);\n    const [aboutError, setAboutError] = useState(false);\n    const [categories, setCategories] = useState([]);\n    const [loading, setLoading] = useState(false);\n\n    useEffect(() => {\n        let _categories = [];\n        user.categories.map((category, index) => _categories.push({ value: category, label: category }));\n        setCategories(_categories);\n        setPrice(0);\n        setName('');\n        setDiscount('');\n        setType('');\n        setAbout('');\n        setImage('');\n    }, [isOpen]);\n\n    useEffect(() => {\n        return () => {\n            setPrice(0);\n            setName('');\n            setDiscount('');\n            setType('');\n            setAbout('');\n            setImage('');\n            setCategories([]);\n        }\n    }, [])\n    \n    const authenticate = () => {\n        let hasError = false;\n        setLoading(true);\n\n        if (name.length < 5) {\n            hasError = true;\n            setNameError(true);\n        }\n\n        if (name.length >= 5) {\n            setNameError(false);\n        }\n\n        if (Number(discount) < 0) {\n            hasError = true;\n            setDiscountError(true);\n        }\n\n        if (Number(discount) >= 0) {\n            setDiscountError(false);\n        }\n\n        if (type.length < 2) {\n            hasError = true;\n            setTypeError(true);\n        }\n\n        if (Number(price) < 25) {\n            hasError = true;\n            setPriceError(true);\n        }\n\n        if (Number(price) >= 25) {\n            setPriceError(false);\n        }\n\n        if (about.length < 10) {\n            hasError = true;\n            setAboutError(true);\n        }\n\n        if (!image) {\n            hasError = true;\n            console.log(image, 'this is the file')\n            setImageError(true);\n        }\n\n        if(hasError) {\n            setLoading(false);\n            setShow(true);\n            setMessage({\n                type: 'error',\n                title: 'Invalid Data',\n                message: 'Data provided is not correct, please check again.'\n            });\n            return false;\n        }\n\n        const formData = new FormData();\n        formData.append('name', name);\n        formData.append('price', price);\n        formData.append('about', about);\n        formData.append('pastryImage', image[0]);\n        formData.append('userImage', image);\n        formData.append('logo', image);\n        formData.append('bakerImage', image);\n        formData.append('discount', discount || 0);\n        formData.append('type', type.value);\n        formData.append('bakerId', user._id);\n\n        console.log(formData.values(), 'values', image);\n\n        fetch(`${BASE_URL}/pastry/create`, {\n            method: 'POST',\n            body: formData,\n        })\n        .then(res => {\n            const statusCode = res.status;\n            const responseJson = res.json();\n            return Promise.all([statusCode, responseJson]);\n        })\n        .then(res => {\n            setLoading(false);\n            const statusCode = res[0];\n            const response = res[1];\n\n            if (statusCode === 201) {\n                setShow(true);\n                setMessage({\n                    type: 'success',\n                    title: 'Success',\n                    message: `Pastry has ben added to ${type.value} store.`\n                });\n\n                setTimeout(() => {\n                    setIsOpen(false);\n                }, 3000);\n            }\n\n            if (statusCode === 401) {\n                    setShow(true);\n                    setMessage({\n                        type: 'error',\n                        title: 'Unexpected Error',\n                        message: response.data[0].msg,\n                    })\n            }\n\n            if (statusCode === 422) {\n                console.log(response, '422');\n                setShow(true);\n                setMessage({\n                    type: 'error',\n                    title: 'Unexpected Error',\n                    message: response.data[0].msg,\n                })\n            }\n\n            if(statusCode === 500) {\n                console.log(response, '500');\n                setShow(true);\n                setMessage({\n                    type: 'error',\n                    title: 'Unexpected Error',\n                    message: response.message,\n                })\n            }\n        })\n        .catch(err => {\n                console.log(err);\n                setLoading(false);\n                setShow(true);\n                setMessage({\n                    type: 'error',\n                    title: 'Unexpected Error',\n                    message: 'Please check your internet connection.'\n                })\n            })\n\n    }\n\n    return (\n        <>\n            <Modal isOpen={isOpen} closeTimeoutMS={400} className={styles.secAddPastry} overlayClassName={styles.secAddPastry}>\n                <div className={styles.addPastryForm}>\n                    <h2 className={styles.formTitle}>Add Pastry</h2>\n                    <SquareInput\n                        placeholder=\"Frosty Cake\"\n                        type=\"text\"\n                        label=\"Name\"\n                        value={name}\n                        setValue={(event) => setName(event.target.value)}\n                        error={nameError}\n                        setError={() => setNameError}\n                    />\n                    <SquareInput \n                        placeholder=\"5\"\n                        type=\"number\"\n                        label=\"Discount\"\n                        value={discount}\n                        setValue={(event) => setDiscount(event.target.value)}\n                        error={discountError}\n                        setError={() => setDiscountError}\n                    />\n                    <div className={styles.formSelect}>\n                        <label className={styles.inputLabel}>Type</label>\n                        <Select \n                            value={type}\n                            options={categories}\n                            styles={colourStyles}\n                            onChange={(value) => setType(value)}\n                            components={animatedComponents}\n                            className={[styles.formLength4, styles.formSelectInput].join(' ')} />\n                    </div>\n                    <SquareInput \n                        placeholder=\"5\"\n                        type=\"file\"\n                        label=\"Image\"\n                        name='pastryImage'\n                        setValue={(event) => setImage(event.target.files)}\n                        error={imageError}\n                        setError={() => setImageError}\n                    />\n                    <SquareInput\n                        placeholder=\"40000\"\n                        type=\"number\"\n                        label=\"Price\"\n                        value={price}\n                        setValue={(event) => setPrice(event.target.value)}\n                        error={priceError}\n                        setError={() => setPriceError}\n                    />\n                    <SquareArea\n                        placeholder=\"A box of 6 is guaranteed to bring delight and happiness\"\n                        type=\"text\"\n                        label=\"Description\"\n                        value={about}\n                        setValue={(event) => setAbout(event.target.value)}\n                        error={aboutError}\n                        setError={() => setAboutError}\n                    />\n                    <div className={styles.addButtons}>\n                        <Button onClick={() => authenticate()} title=\"Add\" loading={loading} />\n                        <Button onClick={() => setIsOpen(false)} title=\"Cancel\"  />\n                    </div>\n                </div>\n            </Modal>\n            <Notification message={message} show={show} setShow={setShow} />\n        </>\n    )\n}\n\nconst mapStateToProps = ({auth}) => {\n    return {\n        token: auth.token,\n        user: auth.user,\n    }\n}\n\nexport default connect(mapStateToProps)(AddPastry);\n\n\nconst colourStyles = {\n  option: (styles, { data, isDisabled, isFocused, isSelected }) => {\n    return {\n      ...styles,\n      backgroundColor: isFocused ? \"#215379\" : null,\n      color: isFocused ? \"white\" : '#999',\n    };\n  },\n  control: (base, {isFocused}) => ({\n    ...base,\n    border: 'none',\n    // This line disable the blue border\n    boxShadow: 'none',\n    borderRadius: '4px',\n    borderBottom: '2px',\n    borderBottomStyle: 'solid',\n    borderBottomColor: '#14334a',\n    borderTop: '2px',\n    borderTopStyle: 'solid',\n    borderTopColor: '#14334a',\n    borderLeft: '2px',\n    borderLeftStyle: 'solid',\n    borderLeftColor: '#14334a',\n    borderRight: '2px',\n    borderRightStyle: 'solid',\n    borderRightColor: '#14334a',\n    marginTop: '5px',\n    cursor: 'pointer',\n    '&:hover': {\n        border: '2px',\n        boxShadow: 'none',\n        borderStyle: 'solid',\n        borderColor: isFocused ? \"#14334a\" : '#14334a',\n    }\n  })\n};","/home/jb-inc/Desktop/cara-cakes-react-app/src/redux/Actions/Refresh.actions.js",[],"/home/jb-inc/Desktop/cara-cakes-react-app/src/utils/search.js",[],"/home/jb-inc/Desktop/cara-cakes-react-app/src/redux/Actions/Auth.actions.js",[],"/home/jb-inc/Desktop/cara-cakes-react-app/src/utils/globalVariable.js",[],"/home/jb-inc/Desktop/cara-cakes-react-app/src/utils/auth.js",[],"/home/jb-inc/Desktop/cara-cakes-react-app/src/utils/utilities.js",[],"/home/jb-inc/Desktop/cara-cakes-react-app/src/sections/Shop/PastryShop/Pastry.section.js",[],"/home/jb-inc/Desktop/cara-cakes-react-app/src/redux/Actions/Data.actions.js",[],"/home/jb-inc/Desktop/cara-cakes-react-app/src/sections/Order/OrderDetail/Order.detail.js",["688"],"import React from 'react';\n\nimport styles from './OrderDetail.module.css'\nimport { vals3, vals4, vals5 } from '../../../res/img';\nimport { Button, Spacer } from '../../../Components';\n\nconst OrderDetail = (props) => {\n    const {isDetail, setIsDetail} = props;\n    return (\n        <div className={isDetail ? styles.orderDetail: styles.orderNoDetail}>\n            <div className={styles.orderDetailImgContainer}>\n                <div className={styles.orderDetailTitle}>\n                    <h2>Order Summary</h2>\n                </div>\n                <div className={styles.orderDetailImgs}>\n                    <img src={vals5} alt=\"Product\" className={[styles.orderDetailImg1 ,styles.orderDetailHover].join(' ')} />\n                    <img src={vals4} alt=\"Product\" className={[styles.orderDetailImg2 ,styles.orderDetailHover].join(' ')} />\n                    <img src={vals3} alt=\"Product\" className={[styles.orderDetailImg3 ,styles.orderDetailHover].join(' ')} />\n                </div>\n            </div>\n            <div className={styles.orderDetails}>\n                <h1>Order Details</h1>\n                <h1 className={styles.orderDescription}>Order status</h1>\n                <ul className={styles.orderDescriptionList}>\n                    <li  className={styles.orderDescriptionText}>Processing</li>\n                    <li  className={styles.orderDescriptionText}>Registered</li>\n                    <li  className={styles.orderDescriptionText}>On the way</li>\n                    <li  className={styles.orderDescriptionText}>Delivered</li>\n                </ul>\n                <h1 className={styles.orderDescription}>Pastries Ordered</h1>\n                <ul className={styles.orderDescriptionList}>\n                    <li  className={styles.orderDescriptionText}>Ice cake</li>\n                    <li  className={styles.orderDescriptionText}>Fire Cake</li>\n                    <li  className={styles.orderDescriptionText}>Banana cake</li>\n                    <li  className={styles.orderDescriptionText}>Cupcakes</li>\n                </ul>\n                <h1>Total: 193,000FCFA</h1>\n                <div>\n                    <Button title=\"Close\" onClick={() => setIsDetail()} />\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default OrderDetail;\n","/home/jb-inc/Desktop/cara-cakes-react-app/src/sections/Events/EventDetail/Event.detail.js",["689","690"],"import React from 'react';\n\nimport styles from './EventDetail.module.css';\nimport { logo6, vals2 } from '../../../res/img';\nimport { Button, Link, Spacer } from '../../../Components';\n\nconst EventDetail = (props) => {\n    const {isDetail, setIsDetail, setIsOpenEdit} = props;\n    return (\n         <div className={isDetail ? styles.eventDetail : styles.eventNoDetail}>\n            <div className={styles.eventDetailImgContainer}>\n                <div className={styles.eventDetailTitle}>\n                    <h2>Purpose</h2>\n                </div>\n                <img src={vals2} alt=\"Product\" className={styles.eventDetailImg} />\n                <div className={styles.eventDetailCountdown}>\n                    <h1 className={styles.eventDetailDaysContainer}>\n                        <b className={styles.eventDetailDaysNumber}>12</b>\n                        <br />\n                        <b className={styles.eventDetailDaysText}>Days</b>\n                    </h1>\n                    <h3 className={styles.eventDetailTimeContainer}>\n                        <b className={styles.eventDetailTimeNumber}>12 14 16</b>\n                        <br />\n                        <b className={styles.eventDetailTimeText}>Hours mins secs</b>\n                    </h3>\n                </div>\n            </div>\n            <div className={styles.eventDetails}>\n                <h1>For: Tuijah Christian</h1>\n                <h1 className={styles.eventDescription}>Cart</h1>\n                <ul className={styles.eventDescriptionList}>\n                    <li  className={styles.eventDescriptionText}>Birthday Cakes</li>\n                    <li  className={styles.eventDescriptionText}>Wedding Cakes</li>\n                    <li  className={styles.eventDescriptionText}>Cookies</li>\n                    <li  className={styles.eventDescriptionText}>Valentines</li>\n                </ul>\n                <button className={styles.eventMoreDetails} onClick={() => setIsDetail()}>More Details</button>\n                <h1 className={styles.eventDescription}>Reason</h1>\n                <p className={styles.eventDescriptionText}>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sin</p>\n                <div className={styles.eventButtons}>\n                    <Link danger={true} title=\"Delete\" link=\"#\" />\n                    <Button title=\"Edit\" onClick={() => setIsOpenEdit()} />\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default EventDetail;\n","/home/jb-inc/Desktop/cara-cakes-react-app/src/sections/Events/EventList/Event.list.js",["691"],"import React from 'react';\n\nimport styles from './EventList.module.css';\nimport { Spacer, CreateEvent, EventCard, SearchBar, Language, Profile } from '../../../Components';\n\nconst EventList = (props) => {\n    const {setIsOpen, isDetail, setIsDetail} = props;\n    return (\n        <div className={styles.eventList}>\n            <div className={styles.eventContainer}><EventCard isDetail={isDetail} setIsDetail={setIsDetail} /></div>\n            <div className={styles.panelEventHeader}>\n                <div className={styles.panelPosition}>\n                    <SearchBar />\n                    <Language />\n                    <Profile />\n                </div>\n            </div>\n            <CreateEvent setIsOpen={setIsOpen}/>\n        </div>\n    )\n}\n\nexport default EventList;\n","/home/jb-inc/Desktop/cara-cakes-react-app/src/sections/Order/OrderList/Order.list.js",["692"],"import React, { useState } from 'react';\n\nimport styles from './OrderList.module.css'\nimport { Language, OrderFilter, OrderTable, Profile, SearchBar, Spacer } from '../../../Components';\n\nconst OrderList = (props) => {\n    const { isDetail, setIsDetail } = props;\n    const [filter, setFilter] = useState('All');\n    return (\n        <div className={styles.orderList}>\n            <OrderFilter setFilter={setFilter} />\n            <div className={styles.orderContainer}><OrderTable isDetail={isDetail} setIsDetail={setIsDetail} filter={filter} /></div>\n            <div className={styles.panelEventHeader}>\n                <div className={styles.panelPosition}>\n                    <SearchBar />\n                    <Language />\n                    <Profile />\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default OrderList;\n","/home/jb-inc/Desktop/cara-cakes-react-app/src/sections/Cart/CartList/Cart.list.js",[],"/home/jb-inc/Desktop/cara-cakes-react-app/src/sections/Shop/BakerShop/Baker.section.js",[],"/home/jb-inc/Desktop/cara-cakes-react-app/src/sections/Shop/PastryShop/PastryList/Pastry.list.js",["693","694","695"],"import React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\n\nimport { ActivityTwo, Language, Notification, PastryCard, PastryDetail, PastryFilter, Profile, SearchBar } from '../../../../Components';\nimport { BASE_URL } from '../../../../utils/globalVariable';\nimport styles from './PastryList.module.css'\nimport {setPastries} from '../../../../redux/Actions/Data.actions';\n\nconst PastryList = (props) => {\n    const {\n        isDetail,\n        setIsDetail,\n        setPastry,\n        token,\n        bakerId,\n        refresh,\n        _pastries,\n    } = props;\n\n    const [show, setShow] = useState(false);\n    const [message, setMessage] = useState({});\n    const [loading, setLoading] = useState(false);\n    const [filter, setFilter] = useState('all');\n    const [pastries, setPastries] = useState([]);\n\n    useEffect(() => {\n        setLoading(true);\n        fetch(`${BASE_URL}/bakerpastries/${bakerId}`, {\n            method: 'GET',\n            headers: {\n                'Authorization': `Basic ${token}`,\n            }\n        })\n            .then(res => {\n                const statusCode = res.status;\n                const response = res.json();\n                return Promise.all([statusCode, response]);\n            })\n            .then(res => {\n                const statusCode = res[0];\n                const response = res[1];\n                setLoading(false);\n\n                if (statusCode === 200) {\n                    props.setPastries(response.pastries);\n                    setPastries(response.pastries);\n                }\n\n                if (statusCode === 404) {\n                    setShow(true);\n                    setMessage({\n                        type: 'error',\n                        title: 'Unexpected Error',\n                        message: response.message,\n                    })\n                }\n\n                if (statusCode === 500) {\n                    setShow(true);\n                    setMessage({\n                        type: 'error',\n                        title: 'Unexpected Error',\n                        message: response.message,\n                    })\n                }\n            })\n            .catch(err => {\n                console.log(err);\n                setLoading(false);\n                setShow(true);\n                setMessage({\n                    type: 'error',\n                    title: 'Unexpected Error',\n                    message: 'Please check your internet connection.'\n                })\n            })\n\n        return () => {\n            setLoading(false);\n            setPastries([]);\n            setMessage({});\n            setShow(false);\n            setFilter('');\n        }\n    }, [refresh]);\n\n    useEffect(() => {\n        if (filter !== 'all') {\n            let Pastries = _pastries.filter(data => data.type === filter);\n            setPastries(Pastries);\n        }\n        if (filter === 'all') {\n            setPastries(_pastries);\n        }\n\n    }, [filter]);\n\n    return (\n        <div className={styles.pastriesList}>\n            <PastryFilter setFilter={setFilter} {...props} />\n            {loading ? <div>\n                <ActivityTwo />\n            </div> : <div className={styles.pastriesContainer}>\n                {pastries.map((pastry, index) => <PastryCard isDetail={isDetail} setIsDetail={setIsDetail} setPastry={setPastry} pastry={pastry} key={index} />)}\n            </div>}\n            <div className={styles.panelEventHeader}>\n                <div className={styles.panelPosition}>\n                    <SearchBar />\n                    <Language />\n                    <Profile />\n                </div>\n            </div>\n            <Notification message={message} show={show} setShow={setShow} />\n        </div>\n    )\n};\n\nconst mapStateToProps = ({ auth, refresh, data }) => {\n    return {\n        token: auth.token,\n        user: auth.user,\n        bakerId: auth.bakerId,\n        refresh: refresh.refresh,\n        _pastries: data.pastries,\n    }\n};\n\nconst mapDispatchToProps = (dispatch) => {\n    return bindActionCreators({setPastries}, dispatch);\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PastryList);\n","/home/jb-inc/Desktop/cara-cakes-react-app/src/sections/Shop/BakerShop/BakerList/Baker.list.js",["696","697"],"import React, {useEffect, useState} from 'react';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\n\nimport { ActivityTwo, BakerCard, Language, Notification, Profile, SearchBar } from '../../../../Components';\nimport styles from './BakerList.module.css'\nimport {BASE_URL} from '../../../../utils/globalVariable';\nimport {setBakers} from '../../../../redux/Actions/Data.actions';\n\nconst BakerList = (props) => {\n    const { isDetail, setIsDetail, token, setBaker, refresh } = props;\n\n    const [bakers, setBakers] = useState([]);\n    const [message, setMessage] = useState({});\n    const [show, setShow] = useState(false);\n    const [loading, setLoading] = useState(false);\n    const [total, setTotal] = useState(0);\n\n    useEffect(() => {\n        // setBaker([1,2]);\n        setLoading(true);\n        // setIsDetail(false);\n        fetch(`${BASE_URL}/bakers`, {\n            method: 'GET',\n            headers: {\n                'Authorization': `Basic ${token}`,\n            }\n        })\n            .then(res => {\n                const statusCode = res.status;\n                const response = res.json();\n                return Promise.all([statusCode, response]);\n            })\n            .then(res => {\n                const statusCode = res[0];\n                const response = res[1];\n                setLoading(false);\n\n                if (statusCode === 200) {\n                    props.setBakers(response.bakers);\n                    setBakers(response.bakers);\n                    setTotal(response.totalItems);\n                }\n                if (statusCode === 404) {\n                    setShow(true);\n                    setMessage({\n                        type: 'error',\n                        title: 'Unexpected Error',\n                        message: response.message,\n                    })\n                }\n\n                if (statusCode === 500) {\n                    setShow(true);\n                    setMessage({\n                        type: 'error',\n                        title: 'Unexpected Error',\n                        message: response.message,\n                    })\n                }\n            })\n            .catch(err => {\n                console.log(err);\n                setLoading(false);\n                setShow(true);\n                setMessage({\n                    type: 'error',\n                    title: 'Unexpected Error',\n                    message: 'Please check your internet connection.'\n                })\n            })\n\n        return () => {\n            setTotal(0)\n            setLoading(false);\n            setShow(false);\n            setMessage({});\n            setBakers([]);\n        }\n\n    }, [refresh]);\n\n\n    return (\n        <div className={styles.bakersList}>\n            {loading ? <div>\n                <ActivityTwo />\n            </div> : <div className={styles.bakersContainer}> {bakers.map((baker, index) => <BakerCard isDetail={isDetail} _setBaker={setBaker} setIsDetail={setIsDetail} baker={baker} key={index} {...props} />)}</div>}\n            <Notification message={message} show={show} setShow={setShow} />\n            <div className={styles.panelEventHeader}>\n                <div className={styles.panelPosition}>\n                    <SearchBar />\n                    <Language />\n                    <Profile />\n                </div>\n            </div>\n        </div>\n    )\n}\n\nconst mapStateToProps = ({auth, refresh}) => {\n    return {\n        token: auth.token,\n        user: auth.user,\n        refresh: refresh.refresh\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return bindActionCreators({setBakers}, dispatch);\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(BakerList);\n",["698","699"],"/home/jb-inc/Desktop/cara-cakes-react-app/src/sections/OrdersSuper/Order.section.js",["700","701","702","703","704","705"],"import React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\n\nimport { ActivityTwo, Language, OrderDetails, Profile, SearchBar, SOrdersTable } from '../../Components';\nimport styles from './Order.module.css';\nimport { setRefresh } from '../../redux/Actions/Refresh.actions';\nimport { setOrders } from '../../redux/Actions/Data.actions';\nimport { BASE_URL } from '../../utils/globalVariable';\nimport { data } from 'jquery';\n\nconst Orders = (props) => {\n    const { user, token, refresh, _orders } = props;\n\n    const [loading, setLoading] = useState(false);\n    const [show, setShow] = useState(false);\n    const [message, setMessage] = useState({});\n    const [orders, setOrders] = useState([]);\n    const [order, setOrder] = useState([]);\n    const [detail, setDetail] = useState(false);\n    const [active, setActive] = useState(0);\n\n    useEffect(() => {\n        fetch(`${BASE_URL}/baker/getallorders`, {\n            method: 'GET',\n            headers: {\n                'Authorization': `Basic ${token}`,\n                'Content-Type': 'application/json',\n            }\n        })\n            .then(res => {\n                const statusCode = res.status;\n                const response = res.json();\n                return Promise.all([statusCode, response]);\n            })\n            .then(res => {\n                const statusCode = res[0];\n                const response = res[1];\n                setLoading(false);\n\n                if (statusCode === 200) {\n                    setOrders(response.orders);\n                    setActive(0);\n                    props.setOrders(response.orders);\n                }\n\n                if (statusCode === 404) {\n                    setShow(true);\n                    setMessage({\n                        type: 'error',\n                        title: 'Unexpected Error',\n                        message: response.message,\n                    })\n                }\n\n                if (statusCode === 500) {\n                    setShow(true);\n                    setMessage({\n                        type: 'error',\n                        title: 'Unexpected Error',\n                        message: response.message,\n                    })\n                }\n            })\n            .catch(err => {\n                setLoading(false);\n                setShow(true);\n                setMessage({\n                    type: 'error',\n                    title: 'Unexpected Error',\n                    message: 'Please check your internet connection.'\n                })\n            })\n        \n        return () => {\n\n        }\n    }, []);\n\n    const setFilter = (index, type) => {\n        setActive(index);\n        console.log(_orders, 'hhahahah');\n\n        if (type !== 'all') {\n            let _order = _orders.filter(data => data.status === type);\n            setOrders(_order);\n        }\n        if (type === 'all') {\n            setOrders(_orders);\n        }\n    }\n\n    return (\n        <div className={styles.bakerContainer}>\n            <div className={styles.bakerSection}>\n                <div className={styles.bakerLength}>\n                    <h2 className={styles.bakerLengthTitle}>{orders.length} Order{orders.length !== 1 && 's'}</h2>\n                </div>\n                <div className={styles.bakerScroll}>\n                    <div className={styles.bakerCat}>\n                        <button className={[styles.bakerChoice, active === 0 && styles.bakerActive].join(' ')} onClick={() => setFilter(0, 'all')}>All Orders</button>\n                        <button className={[styles.bakerChoice, active === 1 && styles.bakerActive].join(' ')} onClick={() => setFilter(1, 'New')}>New</button>\n                        <button className={[styles.bakerChoice, active === 2 && styles.bakerActive].join(' ')} onClick={() => setFilter(2, 'Registered')}>Registered</button>\n                        <button className={[styles.bakerChoice, active === 3 && styles.bakerActive].join(' ')} onClick={() => setFilter(3, 'Processing')}>Processing</button>\n                        <button className={[styles.bakerChoice, active === 4 && styles.bakerActive].join(' ')} onClick={() => setFilter(4, 'On the Way')}>On the Way</button>\n                        <button className={[styles.bakerChoice, active === 5 && styles.bakerActive].join(' ')} onClick={() => setFilter(5, 'Delivered')}>Delivered</button>\n                        <button className={[styles.bakerChoice, active === 6 && styles.bakerActive].join(' ')} onClick={() => setFilter(6, 'Confirmed')}>Delivered</button>\n                    </div>\n                </div>\n                {loading ? <div className={styles.activity}>\n                    <ActivityTwo />\n                </div> : <SOrdersTable orders={orders} token={token} setOrder={setOrder} setDetail={setDetail} />}\n                <OrderDetails detail={detail} setDetail={setDetail} order={order} />\n            </div>\n            <div className={styles.panelEventHeader}>\n                <div className={styles.panelPosition}>\n                    <SearchBar />\n                    <Language />\n                    <Profile />\n                </div>\n            </div>\n        </div>\n    )\n};\n\nconst mapStateToProps = ({auth, refresh, data}) => {\n    return {\n        user: auth.user,\n        token: auth.token,\n        refresh: refresh.refresh,\n        _orders: data.orders,\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return bindActionCreators({ setRefresh, setOrders }, dispatch);\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Orders);","/home/jb-inc/Desktop/cara-cakes-react-app/src/Components/SOrdersTable/OrderTable.component.js",["706","707"],"import React from 'react';\nimport { IoTrashBinSharp } from 'react-icons/io5';\n\nimport { pans2 } from '../../res/img';\nimport { BASE_URL } from '../../utils/globalVariable';\nimport { DateString, Thousand } from '../../utils/utilities';\nimport styles from './OrderTable.module.css';\n\nconst OrderTable = (props) => { \n    const { orders, token, setOrder, setDetail } = props;\n\n    const OrderDetails = (order) => {\n        setOrder(order);\n        setDetail(true);\n    }\n\n    return (\n            <div className={styles.cartSeparator}>\n                <table className={styles.cartTable}>\n                    <thead className={styles.cartTableHeader}>\n                        <td className={styles.cartTableHeadeData}>Client Name</td>\n                        <td className={styles.cartTableHeaderData}>Company Name</td>\n                        <td className={styles.cartTableHeaderData}>Status</td>\n                        <td className={styles.cartTableHeaderData}>Total</td>\n                        <td className={styles.cartTableHeaderData}>Date</td>\n                        <td className={styles.cartTableHeaderData}>Actions</td>\n                    </thead>\n                    {orders.map((order, index) => \n                        <tr className={styles.cartTableRow}>\n                            <td className={[styles.cartTableData, styles.cartTableImageContainer].join(' ')}>\n                                <img src={order.userId.image ? `${BASE_URL}/${order.userId.image}` : pans2} alt={order.userId.name} className={styles.cartTableDataImage} />\n                                <b>{order.userId.name.substr(0, 15)}</b>\n                            </td>\n                            <td className={styles.cartTableData}>{order.bakerId.companyName}</td>\n                            <td className={styles.cartTableData}>{order.status}</td>\n                            <td className={styles.cartTableData}>{Thousand(order.pastries.reduce((sum, pastry) => sum + (pastry.pastryId.discount ? (((100 - pastry.pastryId.discount)/100) * pastry.pastryId.price * pastry.quantity) : (pastry.pastryId.price * pastry.quantity)), 0))}</td>\n                            <td className={styles.cartTableData}>{DateString(order.createdAt)}</td>\n                            <td className={styles.cartTableData}>\n                                <button className={[styles.cartButton, styles.verify].join(' ')} onClick={() => OrderDetails(order)}>Details</button>\n                                {/* <button className={[styles.cartDelete, styles.suspend].join(' ')} onClick={() => console.log('Haha')}><IoTrashBinSharp /></button> */}\n                            </td>\n                        </tr>\n                    )}\n                </table>\n            </div>\n    )\n}\n\nexport default OrderTable;\n","/home/jb-inc/Desktop/cara-cakes-react-app/src/Components/UserDetails/UserDetails.component.js",["708","709"],"import React, { useEffect, useState } from 'react';\nimport { IoClose, IoThumbsDown, IoThumbsUp } from 'react-icons/io5';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\n\nimport { BASE_URL } from '../../utils/globalVariable';\nimport { Thousand, HNumber } from '../../utils/utilities';\nimport { setBaker } from '../../redux/Actions/Auth.actions';\nimport styles from './UserDetails.module.css';\nimport { vals3 } from '../../res/img';\nimport { setRefresh } from '../../redux/Actions/Refresh.actions';\n\nconst UserDetails = (props) => {\n    const { detail, setDetail, _user, user } = props;\n    \n    const [loading, setLoading] = useState(false);\n    const [likes, setLikes] = useState(0);\n    const [dislikes, setDislikes] = useState(0);\n\n    useEffect(() => {\n        if (_user.length !== 0) {\n            setLikes(_user.likes.users.length);\n            setDislikes(_user.dislikes.users.length);\n        }\n        props.setRefresh(false);\n        return () => {\n            setLikes(0);\n            setDislikes(0);\n        }\n    }, [detail]);\n\n    const Close = () => {\n        setDetail(false);\n        // props.setRefresh(true);\n    }\n\n\n    const disLikeBaker = (id) => {\n        setLoading(true);\n        fetch(`${BASE_URL}/baker/dislike/${id}?user=${user._id}`, {\n            method: 'POST',\n        })\n        .then(res => {\n            const statusCode = res.status;\n            const response = res.json();\n            return Promise.all([statusCode, response]);\n        })\n        .then(res => {\n            const statusCode = res[0];\n            const response = res[1].baker;\n            setLoading(false);\n\n            if (statusCode === 200) {\n                setLikes(response.likes.users.length);\n                setDislikes(response.dislikes.users.length);\n            }\n\n            if (statusCode === 500) {\n                console.log('error');\n            }\n        })\n        .catch(err => {\n            console.log(err);\n        })\n    }\n\n    const likeBaker = (id) => {\n        setLoading(true);\n        fetch(`${BASE_URL}/baker/like/${id}?user=${user._id}`, {\n            method: 'POST',\n        })\n        .then(res => {\n            const statusCode = res.status;\n            const response = res.json();\n            return Promise.all([statusCode, response]);\n        })\n        .then(res => {\n            const statusCode = res[0];\n            const response = res[1].baker;\n            setLoading(false);\n            if (statusCode === 200) {\n                setLikes(response.likes.users.length);\n                setDislikes(response.dislikes.users.length);\n            }\n\n            if (statusCode === 404) {\n                console.log(response)\n            }\n\n            if (statusCode === 500) {\n                console.log('error 500');\n            }\n        })\n        .catch(err => {\n            console.log(err, 'ksjdkfljlsjf');\n        })\n    }\n\n    const stopClose = (e) => {\n        e.stopPropagation();\n    }\n\n    return (\n        <div className={detail ? styles.notifyBackdrop : styles.notifyNoBackdrop} onClick={() => Close()}>\n            <div className={[styles.notifyContainer, detail ? styles.showContainer : styles.hideContainer].join(' ')} onClick={(e) => stopClose(e)}>\n                {_user.length !== 0 && \n                    <>\n                    <button className={styles.closeButton} onClick={() => Close()}><IoClose /></button>\n                    <div className={styles.bakerContainer}>\n                        <div className={styles.pastryContainer}>\n                            <div className={styles.pastryDiscount}> {HNumber(_user.telNumber)}</div>\n                            <div className={styles.pastryName}>{_user.name || ''}</div>\n                            <img src={_user.image ? `${BASE_URL}/${_user.image}` : vals3} alt={_user.price} className={styles.pastryImage} />\n                            <div className={styles.pastryLikes} onClick={() => likeBaker(_user._id || '')}><IoThumbsUp className={styles.icon} /> Likes: {Thousand(likes)}</div>\n                            <div className={styles.pastryDislikes} onClick={() => disLikeBaker(_user._id || '')}><IoThumbsDown className={styles.icon} /> Dislikes: {Thousand(dislikes)}</div>\n                        </div>\n                        {/* <div className={styles.bakerDetails}>\n                            <h1 className={styles.bakerCompany}>{_user.name}</h1>\n                            <div className={styles.bakerDetailsScroll}>\n                                <b className={styles.bakerCEO}>N: <span className={styles.info}>{_user.name}</span></b>\n                                <h2 className={styles.subTitle}>Categories</h2>\n                                {user.type === 'Baker' &&\n                                    <>\n                                        <h2 className={styles.smallDetails}>Email: <span className={styles.info}>{_user.email}</span></h2>\n                                        <h2 className={styles.smallDetails}>Telephone: <span className={styles.info}>{_user.telNumber}</span></h2>\n                                        <h2 className={styles.smallDetails}>ID No: <span className={styles.info}>{_user.idCardNumber}</span></h2>\n                                        <h2 className={styles.smallDetails}>Location: <span className={styles.info}>{_user.location}</span></h2>\n                                        <h2 className={styles.smallDetails}>MoMO Number: <span className={styles.info}>{_user.momp}</span></h2>\n                                        <h2 className={styles.smallDetails}>MOMO Name : <span className={styles.info}>{_user.momoName}</span></h2>\n                                    </>\n                                }\n                                <h2 className={styles.subTitle}>About</h2>\n                                <b className={styles.bakerAbout}>{_user.about || 'empty'}</b>\n                            </div>\n                            <div className={styles.actions}>\n                                {user.type !== ('Baker' || 'Admin') && <Button title='Shop' onClick={() => bakerShop(_user._id)} />}\n                            </div>\n                        </div> */}\n                    </div>\n                </>}\n            </div>\n        </div>\n    )\n}\n\nconst mapStateToProps = ({auth}) => {\n    return {\n        user: auth.user,\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return bindActionCreators({setBaker, setRefresh}, dispatch);\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UserDetails);","/home/jb-inc/Desktop/cara-cakes-react-app/src/Components/OrderDetails/OrderDetails.component.js",["710","711","712","713","714","715","716","717","718","719","720"],"import React, { useEffect, useState } from 'react';\nimport { IoClose, IoThumbsDown, IoThumbsUp, IoPhonePortraitOutline, IoStatsChart, IoWallet, IoBrush } from 'react-icons/io5';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\n\nimport { Button, Notification } from '..';\nimport { BASE_URL } from '../../utils/globalVariable';\nimport { Thousand, HNumber } from '../../utils/utilities';\nimport { setBaker } from '../../redux/Actions/Auth.actions';\nimport styles from './OrderDetails.module.css';\nimport { setRefresh } from '../../redux/Actions/Refresh.actions';\n\nconst OrderDetails = (props) => {\n    const { detail, setDetail, order, user } = props;\n    \n    const [loading, setLoading] = useState(false);\n    const [likes, setLikes] = useState(0);\n    const [dislikes, setDislikes] = useState(0);\n    const [show, setShow] = useState(false);\n    const [message, setMessage] = useState(false);\n\n    useEffect(() => {\n        if (order.length !== 0) {\n            setLikes(order.userId.likes.users.length);\n            setDislikes(order.userId.dislikes.users.length);\n        }\n        props.setRefresh(false);\n    }, [detail]);\n\n    const Close = () => {\n        setDetail(false);\n    }\n\n    const disLikeUser = (id) => {\n        setLoading(true);\n        fetch(`${BASE_URL}/user/dislike/${id}?baker=${user._id}`, {\n            method: 'POST',\n        })\n        .then(res => {\n            const statusCode = res.status;\n            const response = res.json();\n            return Promise.all([statusCode, response]);\n        })\n        .then(res => {\n            const statusCode = res[0];\n            const response = res[1].response;\n            setLoading(false);\n\n            if (statusCode === 200) {\n                setLikes(response.likes.users.length);\n                setDislikes(response.dislikes.users.length);\n            }\n\n            if (statusCode === 500) {\n                console.log('error');\n            }\n        })\n        .catch(err => {\n            console.log(err);\n        })\n    }\n\n    const likeUser = (id) => {\n        setLoading(true);\n        fetch(`${BASE_URL}/user/like/${id}?baker=${user._id}`, {\n            method: 'POST',\n        })\n        .then(res => {\n            const statusCode = res.status;\n            const response = res.json();\n            return Promise.all([statusCode, response]);\n        })\n        .then(res => {\n            const statusCode = res[0];\n            const response = res[1].response;\n            setLoading(false);\n\n            if (statusCode === 200) {\n                setLikes(response.likes.users.length);\n                setDislikes(response.dislikes.users.length);\n            }\n\n            if (statusCode === 404) {\n                console.log(response)\n            }\n\n            if (statusCode === 500) {\n                console.log('error 500');\n            }\n        })\n        .catch(err => {\n            console.log(err, 'ksjdkfljlsjf');\n        })\n    }\n\n    const stopClose = (e) => {\n        e.stopPropagation();\n    }\n\n\n    return (\n        <div className={detail ? styles.notifyBackdrop : styles.notifyNoBackdrop} onClick={() => Close()}>\n            <div className={[styles.notifyContainer, detail ? styles.showContainer : styles.hideContainer].join(' ')} onClick={(e) => stopClose(e)}>\n                {order.length !== 0 && <div className={styles.clientDets}>\n                    <h2 className={styles.clientName}>{order.userId.name}</h2>\n                    {(order.status !== 'New') && (order.status !== 'Registered') && (order.status !== 'Processing') && <div className={styles.likeActions}>\n                        <span className={styles.likeButton} onClick={() => likeUser(order.userId._id)}><IoThumbsUp className={styles.icon} /> Likes: {likes} </span>\n                        <span className={styles.likeButton} onClick={() => disLikeUser(order.userId._id)}><IoThumbsDown className={styles.icon} /> Dislikes: {dislikes}</span>\n                    </div>}\n                </div>}\n                <div className={styles.pastriesScroll}>\n                    {order.length !== 0 &&\n                        order.pastries.map((pastry, index) =>\n                            <>\n                            <div className={styles.pastryContainer}>\n                                {pastry.pastryId.discount > 0 && <div className={styles.pastryDiscount}><IoStatsChart /> Discount: {pastry.pastryId.discount}%</div>}\n                                <div className={styles.pastryName}>{pastry.pastryId.name}</div>\n                                <img src={`${BASE_URL}/${pastry.pastryId.image}`} alt={'pastry.price'} className={styles.pastryImage} />\n                                <div className={styles.pastryPrice}><IoWallet className={styles.icon} /> Price:{ Thousand(pastry.pastryId.discount ? (((100 - pastry.pastryId.discount)/100) * pastry.pastryId.price * pastry.quantity) : pastry.pastryId.price * pastry.quantity) }XAF</div>\n                                <div className={styles.pastryLikes}><IoThumbsUp className={styles.icon} /> Likes: {Thousand(pastry.pastryId.likes.users.length)}</div>\n                                <div className={styles.pastryDislikes}><IoThumbsDown className={styles.icon} /> Dislikes: {Thousand(pastry.pastryId.dislikes.users.length)}</div>\n                                <div className={styles.pastryQty}><IoStatsChart className={styles.icon} /> Quantity: {pastry.quantity}</div>\n                                <div className={styles.pastryMessage2}><IoBrush className={styles.icon} /> Message: {pastry.message || \"'empty'\"}</div>\n                            </div>\n                        </>)}\n                </div>\n                <button className={styles.closeButton} onClick={() => Close()}>Close</button>\n            </div>\n        </div>\n    )\n}\n\nconst mapStateToProps = ({auth}) => {\n    return {\n        user: auth.user,\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return bindActionCreators({setBaker, setRefresh}, dispatch);\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(OrderDetails);","/home/jb-inc/Desktop/cara-cakes-react-app/src/sections/UserProfile/UserProfile.section.js",["721","722","723"],"import React, { useEffect, useState } from 'react';\nimport { IoBrush } from 'react-icons/io5';\nimport makeAnimated from 'react-select/animated';\nimport Select from 'react-select';\n\nimport { Button, Notification, SquareInput, UserImage } from '../../Components';\nimport { cups1 } from '../../res/img';\nimport styles from './UserProfile.module.css';\nimport { connect } from 'react-redux';\nimport { BASE_URL } from '../../utils/globalVariable';\nimport { bindActionCreators } from 'redux';\nimport { setUser } from '../../redux/Actions/Auth.actions';\nimport { setRefresh } from '../../redux/Actions/Refresh.actions';\nimport { HNumber, SetLocation, Thousand } from '../../utils/utilities';\n\nconst animatedComponents = makeAnimated();\n\nconst UserProfile = (props) => {\n    const { user, token, refresh } = props;\n    const [locations] = useState([\n        { value: \"North-West\", label: \"North-West\" },\n        { value: \"South-West\", label: \"South-West\" },\n        { value: \"West\", label: \"West\" },\n        { value: \"Center\", label: \"Center\" },\n        { value: \"Litoral\", label: \"Litoral\" },\n        { value: \"North\", label: \"North\" },\n        { value: \"East\", label: \"East\" },\n        { value: \"North-West\", label: \"North-West\" },\n    ]);\n    const [loading, setLoading] = useState(false);\n    const [name, setName] = useState('');\n    const [email, setEmail] = useState('');\n    const [contact, setContact] = useState('');\n    const [location, setLocation] = useState({});\n    const [nameError, setNameError] = useState(false);\n    const [emailError, setEmailError] = useState(false);\n    const [contactError, setContactError] = useState(false);\n    const [locationError, setLocationError] = useState(false);\n    const [isOpen, setIsOpen] = useState(false);\n    const [show, setShow] = useState(false);\n    const [message, setMessage] = useState({});\n\n    useEffect(() => {\n        props.setRefresh(false);\n        setName(user.name || \"'empty'\");\n        setEmail(user.email || \"'empty'\");\n        setContact(user.telNumber || \"'empty'\");\n        let loc = user.location;\n\n        setLocation(SetLocation(loc, locations) || \"'empty'\");\n\n        return () => {\n            setName('');\n            setEmail('');\n            setContact('');\n            setLocation('');\n            setNameError(false);\n            setEmailError(false);\n            setContactError(false);\n            setLocationError(false);\n        }\n    }, [refresh]);\n\n    const Authenticate = (id) => {\n        let hasError = false;\n        setLoading(true);\n\n        if (name.length < 2) {\n            setNameError(true);\n            hasError = true;\n        }\n\n\n        if (hasError) {\n            return false;\n        }\n\n        const body = {\n            name,\n            contact,\n            email,\n            location: location.value,\n        }\n\n        fetch(`${BASE_URL}/user/profile/${id}`, {\n            method: 'PUT',\n            headers: {\n                'Authorization': `Basic ${token}`,\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(body),\n        })\n            .then(res => {\n                const statusCode = res.status;\n                const response = res.json();\n                return Promise.all([statusCode, response]);\n            })\n            .then(res => {\n                const statusCode = res[0];\n                const response = res[1];\n                setLoading(false);\n\n                if (statusCode === 200) {\n                    props.setRefresh(true);\n                    setShow(true);\n                    setMessage({\n                        title: 'Success',\n                        message: 'Your profile has been updated'\n                    });\n                    props.setUser(response.user);\n                }\n\n            })\n            .catch(err => {\n                console.log(err);\n                setShow(true);\n                setMessage({\n                    type: 'error',\n                    title: 'Unexpected Error',\n                    message: 'Please check your internet connection.',\n                });\n        })\n    }\n\n    return (\n        <div className={styles.aprofile}>\n            <div className={styles.profileContainer}>\n                <div className={styles.profileInfo}>\n                    <div className={styles.profileBoard}>\n                        <img src={user.image ? `${BASE_URL}/${user.image}`  : cups1} alt={'Username'} className={styles.profileImg} />\n                        <button className={styles.profileEdit} onClick={() => setIsOpen(true)}><IoBrush className={styles.profileIcon} /></button>\n                    </div>\n                    <div className={styles.profileCredentials}>\n                        <h2 className={styles.profileName}>{name}</h2>\n                        <h3 className={styles.profileSubTitle}><span className={styles.profileSubInfo} >{HNumber(contact) || \"'empty'\"}</span> | <span className={styles.profileSubInfo} >{user.location || \"'location'\"}</span></h3>\n                        <h3 className={styles.profileSubTitle}><span className={styles.profileSubInfo} >{user.location || \"'empty'\"}</span>  | <span className={styles.profileSubInfo} >{email}</span> </h3>\n                    </div>\n                    <div className={styles.profileStats}>\n                        <div className={styles.profileNumber}>\n                            <h2 className={styles.profileTitle}>{user.orders.ordered.length}</h2>\n                            <b className={styles.profileSub}>Orders</b>\n                        </div>\n                        {/* <div className={styles.profileNumber}>\n                            <h2 className={styles.profileTitle}>{user.followers.users.length}</h2>\n                            <b className={styles.profileSub}>Followers</b>\n                        </div> */}\n                        {/* <div className={styles.profileNumber}>\n                            <h2 className={styles.profileTitle}>{user.categories.length}</h2>\n                            <b className={styles.profileSub}>Categories</b>\n                        </div> */}\n                        <div className={styles.profileNumber}>\n                            <h2 className={styles.profileTitle}>{Thousand(user.total)}</h2>\n                            <b className={styles.profileSub}>Spendings</b>\n                        </div>\n                        <div className={styles.profileNumber}>\n                            <h2 className={styles.profileTitle}>{user.likes.users.length}</h2>\n                            <b className={styles.profileSub}>Likes</b>\n                        </div>\n                        <div className={styles.profileNumber}>\n                            <h2 className={styles.profileTitle}>{user.dislikes.users.length}</h2>\n                            <b className={styles.profileSub}>Dislikes</b>\n                        </div>\n                    </div>\n                    {/* <div className={styles.profileAbout}>\n                        <h2 className={styles.profileName}>About</h2>\n                        <b className={styles.profileHistory}>\n                            {about}\n                        </b>\n                    </div> */}\n                </div>\n                <div className={styles.profileFormContainer}>\n                    <div className={styles.profileForm}>\n                        <h2 className={styles.profileName}>My Details</h2>\n                        <SquareInput\n                            placeholder=\"Jane Doe\"\n                            label=\"Name\"\n                            value={name}\n                            setValue={event => setName(event.target.value)}\n                            error={nameError}\n                            setError={setNameError}\n                        />\n                        <SquareInput\n                            placeholder=\"6x1234567\"\n                            label=\"Contact\"\n                            value={contact}\n                            setValue={event => setContact(event.target.value)}\n                            error={contactError}\n                            setError={setContactError}\n                        />\n                        <div className={styles.profileGroup}>\n                            <b className={styles.profileLabel}>Location</b>\n                            <Select\n                                value={location}\n                                options={locations}\n                                components={animatedComponents}\n                                onChange={value => setLocation(value)}\n                                styles={locationStyles}\n                                className={styles.profileSelect} />\n                        </div>\n                        <SquareInput\n                            placeholder=\"janedoe@gmail.cm\"\n                            label=\"Email\"\n                            value={email}\n                            setValue={event => setEmail(event.target.value)}\n                            error={emailError}\n                            setError={setEmailError}\n                        />\n                        <div className={styles.profileActions}>\n                            <Button title=\"Save Changes\" onClick={() => Authenticate(user._id)} />\n                            <Button title=\"Edit Password\" />\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <UserImage isOpen={isOpen} setIsOpen={setIsOpen} user={user} />\n            <Notification setShow={setShow} show={show} message={message} />\n        </div>\n    )\n}\n\nconst mapStateToProps = ({ auth, refresh }) => {\n    return {\n        token: auth.token,\n        user: auth.user,\n        refresh: refresh.refresh,\n    }\n};\n\nconst mapDispatchToProps = (dispatch) => {\n    return bindActionCreators({ setUser, setRefresh }, dispatch);\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UserProfile);\n\nconst locationStyles = {\n  option: (styles, { data, isDisabled, isFocused, isSelected }) => {\n    return {\n      ...styles,\n      backgroundColor: isFocused ? \"#215379\" : null,\n      color: isFocused ? \"white\" : '#999',\n    };\n  },\n  control: (base, {isFocused}) => ({\n      ...base,\n      border: 'none',\n      boxShadow: 'none',\n      borderRadius: '4px',\n      borderBottom: '2px',\n      borderBottomStyle: 'solid',\n      borderBottomColor: '#14334a',\n      borderTop: '2px',\n      borderTopStyle: 'solid',\n      borderTopColor: '#14334a',\n      borderLeft: '2px',\n      borderLeftStyle: 'solid',\n      borderLeftColor: '#14334a',\n      borderRight: '2px',\n      borderRightStyle: 'solid',\n      borderRightColor: '#14334a',\n      cursor: 'pointer',\n    '&:hover': {\n        border: '2px',\n        boxShadow: 'none',\n        borderStyle: 'solid',\n        borderColor: isFocused ? \"#14334a\" : '#14334a',\n    }\n  })\n};\n","/home/jb-inc/Desktop/cara-cakes-react-app/src/Components/UserImage/UserImage.component.js",["724"],"import React, { useEffect, useState } from 'react';\nimport { IoClose } from 'react-icons/io5';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\n\nimport { Button, Notification, SquareImage } from '..';\nimport { BASE_URL } from '../../utils/globalVariable';\nimport styles from './UserImage.module.css';\nimport { setRefresh } from '../../redux/Actions/Refresh.actions';\nimport { cups1 } from '../../res/img';\nimport { setUser } from '../../redux/Actions/Auth.actions';\n\nconst UserImage = (props) => {\n    const {isOpen, setIsOpen, user, token} = props;\n\n    const [loading, setLoading] = useState(false);\n    const [image, setImage] = useState('');\n    const [show, setShow] = useState(false);\n    const [message, setMessage] = useState({});\n\n    const Close = () => {\n        setIsOpen(false);\n    }\n\n    useEffect(() => {\n        return () => {\n            setImage('');\n            setShow(false);\n            setMessage({});\n            setLoading(false);\n        }\n    }, []);\n\n    const stopClose = (e) => {\n        e.stopPropagation();\n    }\n\n    const Save = (id) => {\n\n        setLoading(true);\n        const formData = new FormData();\n        formData.append('image', image[0]);\n\n        fetch(`${BASE_URL}/user/image/${id}`, {\n            method: 'PUT',\n            headers: {\n                'Authorization': `Basic ${token}`\n            },\n            body: formData,\n        })\n        .then(res => {\n            const statusCode = res.status;\n            const response = res.json();\n            return Promise.all([statusCode, response]);\n        })\n        .then(res => {\n            const statusCode = res[0];\n            const response = res[1];\n            setLoading(false);\n\n            if (statusCode === 200) {\n                setShow(true);\n                console.log(response);\n                props.setUser(response.user);\n                setMessage({\n                    type: 'success',\n                    message: `Mr/Miss ${user.name}, your profile has been updated.`,\n                    title: 'Success'\n                });\n                setTimeout(() => {\n                    setIsOpen(false);\n                 }, 2000);\n            }\n\n            if (statusCode === 500) {\n                console.log(response, 'error');\n                setIsOpen(false);\n            }\n        })\n        .catch(err => {\n            console.log(err);\n        })\n    }\n\n    return (\n        <div className={isOpen ? styles.notifyBackdrop : styles.notifyNoBackdrop} onClick={() => Close()}>\n            <div className={[styles.notifyContainer, isOpen ? styles.showContainer : styles.hideContainer].join(' ')} onClick={(e) => stopClose(e)}>\n                <button className={styles.closeButton} onClick={() => Close()}><IoClose /></button>\n                <div className={styles.profileInfo}>\n                    <div className={styles.profileBoard}>\n                        <img src={image ? URL.createObjectURL(image[0]) : user.image ? `${BASE_URL}/${user.image}` : cups1} alt={'Username'} className={styles.profileImg} />\n                    </div>\n                </div>\n                <div className={styles.sqrButtons}>\n                    <SquareImage\n                        label={'Upload Image'}\n                        type='file'\n                        setValue={event => setImage(event.target.files) }\n                    />\n                    <Button title=\"Save\" onClick={() => Save(user._id)} />\n                </div>\n            </div>\n            <Notification message={message} show={show} setShow={setShow} />\n        </div>\n    )\n}\n\nconst mapStateToProps = ({auth}) => {\n    return {\n        user: auth.user,\n        token: auth.token,\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return bindActionCreators({ setRefresh, setUser }, dispatch);\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UserImage);","/home/jb-inc/Desktop/cara-cakes-react-app/src/sections/EditPastry/EditPastry.section.js",["725","726","727","728"],"import React, { useEffect, useState } from 'react';\nimport Modal from 'react-modal';\nimport { connect } from 'react-redux';\nimport Select from 'react-select';\nimport makeAnimated from 'react-select/animated';\n\nimport { Button, Link, Notification, SquareArea, SquareInput } from '../../Components';\nimport { BASE_URL } from '../../utils/globalVariable';\nimport styles from './EditPastry.module.css';\n\nconst animatedComponents = makeAnimated();\n\nconst EditPastry = (props) => {\n    const {isOpen, setIsOpen, user, token, pastry} = props;\n    const [message, setMessage] = useState({});\n    const [show, setShow] = useState(false);\n    const [name, setName] = useState('');\n    const [discount, setDiscount] = useState('');\n    const [type, setType] = useState('');\n    const [image, setImage] = useState('');\n    const [price, setPrice] = useState('');\n    const [about, setAbout] = useState('');\n    const [recipe, setRecipe] = useState('');\n    const [nameError, setNameError] = useState(false);\n    const [discountError, setDiscountError] = useState(false);\n    const [typeError, setTypeError] = useState(false);\n    const [imageError, setImageError] = useState(false);\n    const [priceError, setPriceError] = useState(false);\n    const [aboutError, setAboutError] = useState(false);\n    const [recipeError, setRecipeError] = useState(false);\n    const [categories, setCategories] = useState([]);\n    const [loading, setLoading] = useState(false);\n\n    useEffect(() => {\n        let _categories = [];\n        user.categories.map((category, index) => _categories.push({value: category, label: category}));\n        setCategories(_categories);\n        setName(pastry.name);\n        setDiscount(pastry.discount);\n        setType({ value: pastry.type, label: pastry.type });\n        setPrice(pastry.price);\n        setAbout(pastry.description);\n        setImage(pastry.image);\n        setRecipe(pastry.recipe);\n\n        return () => {\n            setName('');\n            setDiscount('');\n            setType({ });\n            setPrice('');\n            setAbout('');\n            setImage('');\n            setRecipe('');\n        }\n    }, [isOpen]);\n    \n    const authenticate = () => {\n        let hasError = false;\n        setLoading(true);\n\n        if (name.length < 5) {\n            hasError = true;\n            setNameError(true);\n        }\n\n        if (name.length >= 5) {\n            setNameError(false);\n        }\n\n        if (Number(discount) < 0) {\n            hasError = true;\n            setDiscountError(true);\n        }\n\n        if (Number(discount) >= 0) {\n            setDiscountError(false);\n        }\n\n        if (type.length < 2) {\n            hasError = true;\n            setTypeError(true);\n        }\n\n        if (Number(price) < 25) {\n            hasError = true;\n            setPriceError(true);\n        }\n\n        if (Number(price) >= 25) {\n            setPriceError(false);\n        }\n\n        if (about.length < 10) {\n            hasError = true;\n            setAboutError(true);\n        }\n\n        if (!image) {\n            hasError = true;\n            console.log(image, 'this is the file')\n            setImageError(true);\n        }\n\n        if(hasError) {\n            setLoading(false);\n            setShow(true);\n            setMessage({\n                type: 'error',\n                title: 'Invalid Data',\n                message: 'Data provided is not correct, please check again.'\n            });\n            return false;\n        }\n\n        const formData = new FormData();\n        formData.append('name', name);\n        formData.append('price', price);\n        formData.append('about', about);\n        if (image) {\n          formData.append('pastryImage', image[0]);\n        }\n        formData.append('discount', discount);\n        formData.append('type', type.value);\n        formData.append('creator', user._id);\n\n        console.log('values', image);\n\n        fetch(`${BASE_URL}/pastry/edit/${pastry._id}`, {\n            method: 'PUT',\n            body: formData,\n        })\n        .then(res => {\n            const statusCode = res.status;\n            const responseJson = res.json();\n            return Promise.all([statusCode, responseJson]);\n        })\n        .then(res => {\n            setLoading(false);\n            const statusCode = res[0];\n            const response = res[1];\n\n            if (statusCode === 201) {\n                setShow(true);\n                setMessage({\n                    type: 'success',\n                    title: 'Success',\n                    message: `${response.pastry.name} has been updated successfully`\n                });\n\n                setTimeout(() => {\n                    setIsOpen(false);\n                }, 3000);\n            }\n\n            if (statusCode === 401) {\n                console.log(response, '401');\n                    setShow(true);\n                    setMessage({\n                        type: 'error',\n                        title: 'Unexpected Error',\n                        message: response.data[0].msg,\n                    })\n            }\n\n            if (statusCode === 422) {\n                console.log(response, '422');\n                setShow(true);\n                setMessage({\n                    type: 'error',\n                    title: 'Unexpected Error',\n                    message: response.data[0].msg,\n                })\n            }\n\n            if(statusCode === 500) {\n                console.log(response, '500');\n                setShow(true);\n                setMessage({\n                    type: 'error',\n                    title: 'Unexpected Error',\n                    message: response.message,\n                })\n            }\n        })\n        .catch(err => {\n                console.log(err);\n                setLoading(false);\n                setShow(true);\n                setMessage({\n                    type: 'error',\n                    title: 'Unexpected Error',\n                    message: 'Please check your internet connection.'\n                })\n            })\n\n    }\n\n    return (\n        <>\n            <Modal isOpen={isOpen} closeTimeoutMS={400} className={styles.secAddPastry} overlayClassName={styles.secAddPastry}>\n                <div className={styles.addPastryForm}>\n                    <h2 className={styles.formTitle}>Edit {pastry.name}</h2>\n                    <SquareInput\n                        placeholder=\"Frosty Cake\"\n                        type=\"text\"\n                        label=\"Name\"\n                        value={name}\n                        setValue={(event) => setName(event.target.value)}\n                        error={nameError}\n                        setError={() => setNameError}\n                    />\n                    <SquareInput \n                        placeholder=\"5\"\n                        type=\"number\"\n                        label=\"Discount\"\n                        value={discount}\n                        setValue={(event) => setDiscount(event.target.value)}\n                        error={discountError}\n                        setError={() => setDiscountError}\n                    />\n                    <div className={styles.formSelect}>\n                        <label className={styles.inputLabel}>Type</label>\n                        <Select \n                            value={type}\n                            options={categories}\n                            styles={colourStyles}\n                            onChange={(value) => setType(value)}\n                            components={animatedComponents}\n                            className={[styles.formLength4, styles.formSelectInput].join(' ')} />\n                    </div>\n                    <SquareInput \n                        placeholder=\"5\"\n                        type=\"file\"\n                        label=\"Image\"\n                        name='pastryImage'\n                        setValue={(event) => setImage(event.target.files)}\n                        error={imageError}\n                        setError={() => setImageError}\n                    />\n                    <SquareInput\n                        placeholder=\"40000\"\n                        type=\"number\"\n                        label=\"Price\"\n                        value={price}\n                        setValue={(event) => setPrice(event.target.value)}\n                        error={priceError}\n                        setError={() => setPriceError}\n                    />\n                    <SquareArea\n                        placeholder=\"A box of 6 is guaranteed to bring delight and happiness\"\n                        type=\"text\"\n                        label=\"Description\"\n                        value={about}\n                        setValue={(event) => setAbout(event.target.value)}\n                        error={aboutError}\n                        setError={() => setAboutError}\n                    />\n                    <SquareArea\n                        placeholder=\"Very optional, but can be a gift to your loyal clients\"\n                        type=\"text\"\n                        label=\"Recipe\"\n                        value={recipe}\n                        setValue={(event) => setRecipe(event.target.value)}\n                        error={recipeError}\n                        setError={() => setRecipeError}\n                    />\n                    <div className={styles.addButtons}>\n                        <Button onClick={() => authenticate()} title=\"Edit\" loading={loading} />\n                        <Button onClick={() => setIsOpen(false)} title=\"Cancel\"  />\n                    </div>\n                </div>\n            </Modal>\n            <Notification message={message} show={show} setShow={setShow} />\n        </>\n    )\n}\n\nconst mapStateToProps = ({auth}) => {\n    return {\n        token: auth.token,\n        user: auth.user,\n    }\n}\n\nexport default connect(mapStateToProps)(EditPastry);\n\n\nconst colourStyles = {\n  option: (styles, { data, isDisabled, isFocused, isSelected }) => {\n    return {\n      ...styles,\n      backgroundColor: isFocused ? \"#215379\" : null,\n      color: isFocused ? \"white\" : '#999',\n    };\n  },\n  control: (base, {isFocused}) => ({\n    ...base,\n    border: 'none',\n    // This line disable the blue border\n    boxShadow: 'none',\n    borderRadius: '4px',\n    borderBottom: '2px',\n    borderBottomStyle: 'solid',\n    borderBottomColor: '#14334a',\n    borderTop: '2px',\n    borderTopStyle: 'solid',\n    borderTopColor: '#14334a',\n    borderLeft: '2px',\n    borderLeftStyle: 'solid',\n    borderLeftColor: '#14334a',\n    borderRight: '2px',\n    borderRightStyle: 'solid',\n    borderRightColor: '#14334a',\n    marginTop: '5px',\n    cursor: 'pointer',\n    '&:hover': {\n        border: '2px',\n        boxShadow: 'none',\n        borderStyle: 'solid',\n        borderColor: isFocused ? \"#14334a\" : '#14334a',\n    }\n  })\n};","/home/jb-inc/Desktop/cara-cakes-react-app/src/Components/PastryFilter/PastryFilter.section.js",[],"/home/jb-inc/Desktop/cara-cakes-react-app/src/Components/OrderFilter/OrderFilter.section.js",["729"],"import React, { useState } from 'react';\nimport { IoChevronBack, IoChevronForward } from 'react-icons/io5';\nimport { connect } from 'react-redux';\n\nimport styles from './OrderFilter.module.css';\n\nconst OrderFilter = (props) => {\n    const { categories, setFilter } = props;\n    const [showFilter, setShowFilter] = useState(false);\n    const [active, setActive] = useState(-1);\n\n    const Filter = (cat, index) => {\n        setActive(index);\n        setFilter(cat);\n    }\n\n    return (\n        <>\n            <div className={styles.filterPosition}>\n                <div className={styles.fixedPosition} onClick={() => setShowFilter(!showFilter)}>\n                    {showFilter ? 'Hide' : 'Show'} Filter{showFilter ? <IoChevronBack className={styles.icon} /> : <IoChevronForward className={styles.icon} />}\n                </div>\n            </div>\n            <div className={showFilter ? styles.filterCategories : styles.filterCategoriesHide}>\n                <div className={styles.categoriesFixed}>\n                    <ul className={styles.listCategories}>\n                        <li className={[styles.listFilter, active === -1 && styles.listFilterActive].join(' ')} onClick={() => Filter('All', -1)}>All</li>\n                        <li className={[styles.listFilter, active === 0 && styles.listFilterActive].join(' ')} onClick={() => Filter('New', 0)}>New</li>\n                        <li className={[styles.listFilter, active === 1 && styles.listFilterActive].join(' ')} onClick={() => Filter('Registered', 1)}>Registered</li>\n                        <li className={[styles.listFilter, active === 2 && styles.listFilterActive].join(' ')} onClick={() => Filter('Processing', 2)}>Processing</li>\n                        <li className={[styles.listFilter, active === 3 && styles.listFilterActive].join(' ')} onClick={() => Filter('Delivered', 3)}>Delivered</li>\n                        <li className={[styles.listFilter, active === 4 && styles.listFilterActive].join(' ')} onClick={() => Filter('Confirmed', 4)}>Confirmed</li>\n                    </ul>\n                </div>\n            </div>\n        </>\n    )\n}\n\nconst mapStateToProps = ({ data }) => {\n    return {\n        categories: data.categories,\n    }\n}\n\nexport default connect(mapStateToProps)(OrderFilter);\n","/home/jb-inc/Desktop/cara-cakes-react-app/src/sections/Profile/Profile.section.js",["730","731","732","733","734"],"/home/jb-inc/Desktop/cara-cakes-react-app/src/Components/AImage/AImage.component.js",["735"],"import React, { useEffect, useState } from 'react';\nimport { IoClose } from 'react-icons/io5';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\n\nimport { Button, Notification, SquareImage } from '..';\nimport { BASE_URL } from '../../utils/globalVariable';\nimport styles from './AImage.module.css';\nimport { setRefresh } from '../../redux/Actions/Refresh.actions';\nimport { cups1 } from '../../res/img';\nimport { setUser } from '../../redux/Actions/Auth.actions';\n\nconst AImage = (props) => {\n    const {isOpen, setIsOpen, user, token} = props;\n\n    const [loading, setLoading] = useState(false);\n    const [image, setImage] = useState('');\n    const [show, setShow] = useState(false);\n    const [message, setMessage] = useState({});\n\n    const Close = () => {\n        setIsOpen(false);\n    }\n\n    useEffect(() => {\n        return () => {\n            setImage('');\n            setShow(false);\n            setMessage({});\n            setLoading(false);\n        }\n    }, []);\n\n    const stopClose = (e) => {\n        e.stopPropagation();\n    }\n\n    const Save = (id) => {\n\n        setLoading(true);\n        const formData = new FormData();\n        formData.append('image', image[0]);\n\n        fetch(`${BASE_URL}/admin/image/${id}`, {\n            method: 'PUT',\n            headers: {\n                'Authorization': `Basic ${token}`\n            },\n            body: formData,\n        })\n        .then(res => {\n            const statusCode = res.status;\n            const response = res.json();\n            return Promise.all([statusCode, response]);\n        })\n        .then(res => {\n            const statusCode = res[0];\n            const response = res[1];\n            setLoading(false);\n\n            if (statusCode === 200) {\n                setShow(true);\n                console.log(response);\n                props.setUser(response.admin);\n                setMessage({\n                    type: 'success',\n                    message: `Mr/Miss ${user.name}, your profile has been updated.`,\n                    title: 'Success'\n                });\n                setTimeout(() => {\n                    setIsOpen(false);\n                 }, 2000);\n            }\n\n            if (statusCode === 500) {\n                console.log(response, 'error');\n                setIsOpen(false);\n            }\n        })\n        .catch(err => {\n            console.log(err);\n        })\n    }\n\n    return (\n        <div className={isOpen ? styles.notifyBackdrop : styles.notifyNoBackdrop} onClick={() => Close()}>\n            <div className={[styles.notifyContainer, isOpen ? styles.showContainer : styles.hideContainer].join(' ')} onClick={(e) => stopClose(e)}>\n                <button className={styles.closeButton} onClick={() => Close()}><IoClose /></button>\n                <div className={styles.profileInfo}>\n                    <div className={styles.profileBoard}>\n                        <img src={image ? URL.createObjectURL(image[0]) : user.image ? `${BASE_URL}/${user.image}` : cups1} alt={'Username'} className={styles.profileImg} />\n                    </div>\n                </div>\n                <div className={styles.sqrButtons}>\n                    <SquareImage\n                        label={'Upload Image'}\n                        type='file'\n                        setValue={event => setImage(event.target.files) }\n                    />\n                    <Button title=\"Save\" onClick={() => Save(user._id)} />\n                </div>\n            </div>\n            <Notification message={message} show={show} setShow={setShow} />\n        </div>\n    )\n}\n\nconst mapStateToProps = ({auth}) => {\n    return {\n        user: auth.user,\n        token: auth.token,\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return bindActionCreators({ setRefresh, setUser }, dispatch);\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AImage);","/home/jb-inc/Desktop/cara-cakes-react-app/src/sections/EditPassword/EditPassword.section.js",[],{"ruleId":"736","severity":1,"message":"737","line":3,"column":8,"nodeType":"738","messageId":"739","endLine":3,"endColumn":14},{"ruleId":"740","replacedBy":"741"},{"ruleId":"742","replacedBy":"743"},{"ruleId":"744","severity":1,"message":"745","line":28,"column":8,"nodeType":"746","endLine":28,"endColumn":18,"suggestions":"747"},{"ruleId":"744","severity":1,"message":"748","line":84,"column":8,"nodeType":"746","endLine":84,"endColumn":17,"suggestions":"749"},{"ruleId":"736","severity":1,"message":"750","line":99,"column":19,"nodeType":"738","messageId":"739","endLine":99,"endColumn":27},{"ruleId":"736","severity":1,"message":"750","line":149,"column":23,"nodeType":"738","messageId":"739","endLine":149,"endColumn":31},{"ruleId":"736","severity":1,"message":"751","line":15,"column":13,"nodeType":"738","messageId":"739","endLine":15,"endColumn":21},{"ruleId":"736","severity":1,"message":"752","line":19,"column":12,"nodeType":"738","messageId":"739","endLine":19,"endColumn":19},{"ruleId":"736","severity":1,"message":"737","line":3,"column":8,"nodeType":"738","messageId":"739","endLine":3,"endColumn":14},{"ruleId":"736","severity":1,"message":"750","line":35,"column":19,"nodeType":"738","messageId":"739","endLine":35,"endColumn":27},{"ruleId":"736","severity":1,"message":"753","line":13,"column":27,"nodeType":"738","messageId":"739","endLine":13,"endColumn":34},{"ruleId":"736","severity":1,"message":"752","line":14,"column":12,"nodeType":"738","messageId":"739","endLine":14,"endColumn":19},{"ruleId":"736","severity":1,"message":"754","line":14,"column":21,"nodeType":"738","messageId":"739","endLine":14,"endColumn":31},{"ruleId":"744","severity":1,"message":"745","line":21,"column":8,"nodeType":"746","endLine":21,"endColumn":10,"suggestions":"755"},{"ruleId":"736","severity":1,"message":"756","line":6,"column":12,"nodeType":"738","messageId":"739","endLine":6,"endColumn":16},{"ruleId":"744","severity":1,"message":"757","line":32,"column":8,"nodeType":"746","endLine":32,"endColumn":16,"suggestions":"758"},{"ruleId":"744","severity":1,"message":"745","line":44,"column":8,"nodeType":"746","endLine":44,"endColumn":17,"suggestions":"759"},{"ruleId":"736","severity":1,"message":"760","line":2,"column":17,"nodeType":"738","messageId":"739","endLine":2,"endColumn":23},{"ruleId":"736","severity":1,"message":"761","line":14,"column":13,"nodeType":"738","messageId":"739","endLine":14,"endColumn":18},{"ruleId":"736","severity":1,"message":"762","line":18,"column":12,"nodeType":"738","messageId":"739","endLine":18,"endColumn":25},{"ruleId":"736","severity":1,"message":"763","line":19,"column":12,"nodeType":"738","messageId":"739","endLine":19,"endColumn":22},{"ruleId":"736","severity":1,"message":"752","line":20,"column":12,"nodeType":"738","messageId":"739","endLine":20,"endColumn":19},{"ruleId":"736","severity":1,"message":"764","line":4,"column":9,"nodeType":"738","messageId":"739","endLine":4,"endColumn":14},{"ruleId":"736","severity":1,"message":"765","line":8,"column":12,"nodeType":"738","messageId":"739","endLine":8,"endColumn":18},{"ruleId":"736","severity":1,"message":"766","line":8,"column":20,"nodeType":"738","messageId":"739","endLine":8,"endColumn":29},{"ruleId":"736","severity":1,"message":"737","line":3,"column":8,"nodeType":"738","messageId":"739","endLine":3,"endColumn":14},{"ruleId":"736","severity":1,"message":"767","line":6,"column":10,"nodeType":"738","messageId":"739","endLine":6,"endColumn":15},{"ruleId":"736","severity":1,"message":"768","line":2,"column":10,"nodeType":"738","messageId":"739","endLine":2,"endColumn":18},{"ruleId":"736","severity":1,"message":"769","line":4,"column":8,"nodeType":"738","messageId":"739","endLine":4,"endColumn":15},{"ruleId":"736","severity":1,"message":"770","line":5,"column":8,"nodeType":"738","messageId":"739","endLine":5,"endColumn":17},{"ruleId":"736","severity":1,"message":"771","line":3,"column":9,"nodeType":"738","messageId":"739","endLine":3,"endColumn":15},{"ruleId":"736","severity":1,"message":"772","line":3,"column":17,"nodeType":"738","messageId":"739","endLine":3,"endColumn":24},{"ruleId":"736","severity":1,"message":"773","line":3,"column":43,"nodeType":"738","messageId":"739","endLine":3,"endColumn":55},{"ruleId":"744","severity":1,"message":"774","line":21,"column":8,"nodeType":"746","endLine":21,"endColumn":14,"suggestions":"775"},{"ruleId":"736","severity":1,"message":"776","line":5,"column":10,"nodeType":"738","messageId":"739","endLine":5,"endColumn":15},{"ruleId":"744","severity":1,"message":"777","line":79,"column":8,"nodeType":"746","endLine":79,"endColumn":17,"suggestions":"778"},{"ruleId":"736","severity":1,"message":"751","line":8,"column":12,"nodeType":"738","messageId":"739","endLine":8,"endColumn":20},{"ruleId":"736","severity":1,"message":"779","line":6,"column":10,"nodeType":"738","messageId":"739","endLine":6,"endColumn":15},{"ruleId":"736","severity":1,"message":"780","line":7,"column":32,"nodeType":"738","messageId":"739","endLine":7,"endColumn":44},{"ruleId":"736","severity":1,"message":"751","line":13,"column":9,"nodeType":"738","messageId":"739","endLine":13,"endColumn":17},{"ruleId":"736","severity":1,"message":"781","line":18,"column":9,"nodeType":"738","messageId":"739","endLine":18,"endColumn":15},{"ruleId":"736","severity":1,"message":"752","line":21,"column":12,"nodeType":"738","messageId":"739","endLine":21,"endColumn":19},{"ruleId":"736","severity":1,"message":"782","line":26,"column":12,"nodeType":"738","messageId":"739","endLine":26,"endColumn":18},{"ruleId":"736","severity":1,"message":"750","line":110,"column":23,"nodeType":"738","messageId":"739","endLine":110,"endColumn":31},{"ruleId":"736","severity":1,"message":"783","line":6,"column":32,"nodeType":"738","messageId":"739","endLine":6,"endColumn":37},{"ruleId":"736","severity":1,"message":"761","line":6,"column":60,"nodeType":"738","messageId":"739","endLine":6,"endColumn":65},{"ruleId":"736","severity":1,"message":"784","line":6,"column":67,"nodeType":"738","messageId":"739","endLine":6,"endColumn":75},{"ruleId":"736","severity":1,"message":"783","line":6,"column":32,"nodeType":"738","messageId":"739","endLine":6,"endColumn":37},{"ruleId":"736","severity":1,"message":"761","line":6,"column":60,"nodeType":"738","messageId":"739","endLine":6,"endColumn":65},{"ruleId":"736","severity":1,"message":"784","line":6,"column":67,"nodeType":"738","messageId":"739","endLine":6,"endColumn":75},{"ruleId":"736","severity":1,"message":"750","line":35,"column":23,"nodeType":"738","messageId":"739","endLine":35,"endColumn":31},{"ruleId":"736","severity":1,"message":"752","line":15,"column":12,"nodeType":"738","messageId":"739","endLine":15,"endColumn":19},{"ruleId":"744","severity":1,"message":"745","line":22,"column":8,"nodeType":"746","endLine":22,"endColumn":17,"suggestions":"785"},{"ruleId":"736","severity":1,"message":"786","line":14,"column":61,"nodeType":"738","messageId":"739","endLine":14,"endColumn":65},{"ruleId":"736","severity":1,"message":"752","line":15,"column":12,"nodeType":"738","messageId":"739","endLine":15,"endColumn":19},{"ruleId":"744","severity":1,"message":"745","line":22,"column":8,"nodeType":"746","endLine":22,"endColumn":17,"suggestions":"787"},{"ruleId":"736","severity":1,"message":"784","line":13,"column":9,"nodeType":"738","messageId":"739","endLine":13,"endColumn":17},{"ruleId":"736","severity":1,"message":"788","line":2,"column":10,"nodeType":"738","messageId":"739","endLine":2,"endColumn":25},{"ruleId":"736","severity":1,"message":"784","line":12,"column":9,"nodeType":"738","messageId":"739","endLine":12,"endColumn":17},{"ruleId":"736","severity":1,"message":"789","line":1,"column":17,"nodeType":"738","messageId":"739","endLine":1,"endColumn":26},{"ruleId":"736","severity":1,"message":"761","line":11,"column":9,"nodeType":"738","messageId":"739","endLine":11,"endColumn":14},{"ruleId":"736","severity":1,"message":"784","line":12,"column":9,"nodeType":"738","messageId":"739","endLine":12,"endColumn":17},{"ruleId":"736","severity":1,"message":"790","line":13,"column":9,"nodeType":"738","messageId":"739","endLine":13,"endColumn":13},{"ruleId":"736","severity":1,"message":"791","line":16,"column":12,"nodeType":"738","messageId":"739","endLine":16,"endColumn":17},{"ruleId":"736","severity":1,"message":"752","line":15,"column":12,"nodeType":"738","messageId":"739","endLine":15,"endColumn":19},{"ruleId":"744","severity":1,"message":"745","line":25,"column":8,"nodeType":"746","endLine":25,"endColumn":17,"suggestions":"792"},{"ruleId":"744","severity":1,"message":"793","line":44,"column":8,"nodeType":"746","endLine":44,"endColumn":16,"suggestions":"794"},{"ruleId":"736","severity":1,"message":"750","line":61,"column":19,"nodeType":"738","messageId":"739","endLine":61,"endColumn":27},{"ruleId":"736","severity":1,"message":"750","line":111,"column":23,"nodeType":"738","messageId":"739","endLine":111,"endColumn":31},{"ruleId":"736","severity":1,"message":"750","line":157,"column":23,"nodeType":"738","messageId":"739","endLine":157,"endColumn":31},{"ruleId":"736","severity":1,"message":"752","line":15,"column":12,"nodeType":"738","messageId":"739","endLine":15,"endColumn":19},{"ruleId":"744","severity":1,"message":"745","line":25,"column":8,"nodeType":"746","endLine":25,"endColumn":17,"suggestions":"795"},{"ruleId":"736","severity":1,"message":"750","line":83,"column":23,"nodeType":"738","messageId":"739","endLine":83,"endColumn":31},{"ruleId":"744","severity":1,"message":"796","line":131,"column":8,"nodeType":"746","endLine":131,"endColumn":16,"suggestions":"797"},{"ruleId":"736","severity":1,"message":"750","line":145,"column":23,"nodeType":"738","messageId":"739","endLine":145,"endColumn":31},{"ruleId":"744","severity":1,"message":"798","line":12,"column":8,"nodeType":"746","endLine":12,"endColumn":14,"suggestions":"799"},{"ruleId":"736","severity":1,"message":"800","line":10,"column":24,"nodeType":"738","messageId":"739","endLine":10,"endColumn":36},{"ruleId":"736","severity":1,"message":"788","line":11,"column":10,"nodeType":"738","messageId":"739","endLine":11,"endColumn":25},{"ruleId":"736","severity":1,"message":"752","line":16,"column":12,"nodeType":"738","messageId":"739","endLine":16,"endColumn":19},{"ruleId":"744","severity":1,"message":"745","line":28,"column":8,"nodeType":"746","endLine":28,"endColumn":17,"suggestions":"801"},{"ruleId":"736","severity":1,"message":"750","line":47,"column":27,"nodeType":"738","messageId":"739","endLine":47,"endColumn":35},{"ruleId":"736","severity":1,"message":"789","line":1,"column":17,"nodeType":"738","messageId":"739","endLine":1,"endColumn":26},{"ruleId":"736","severity":1,"message":"802","line":2,"column":10,"nodeType":"738","messageId":"739","endLine":2,"endColumn":16},{"ruleId":"736","severity":1,"message":"765","line":12,"column":12,"nodeType":"738","messageId":"739","endLine":12,"endColumn":18},{"ruleId":"736","severity":1,"message":"766","line":12,"column":20,"nodeType":"738","messageId":"739","endLine":12,"endColumn":29},{"ruleId":"736","severity":1,"message":"803","line":13,"column":18,"nodeType":"738","messageId":"739","endLine":13,"endColumn":25},{"ruleId":"736","severity":1,"message":"804","line":15,"column":12,"nodeType":"738","messageId":"739","endLine":15,"endColumn":17},{"ruleId":"736","severity":1,"message":"805","line":16,"column":12,"nodeType":"738","messageId":"739","endLine":16,"endColumn":19},{"ruleId":"736","severity":1,"message":"806","line":17,"column":12,"nodeType":"738","messageId":"739","endLine":17,"endColumn":16},{"ruleId":"744","severity":1,"message":"807","line":49,"column":8,"nodeType":"746","endLine":49,"endColumn":10,"suggestions":"808"},{"ruleId":"736","severity":1,"message":"809","line":2,"column":26,"nodeType":"738","messageId":"739","endLine":2,"endColumn":41},{"ruleId":"810","severity":1,"message":"811","line":50,"column":99,"nodeType":"812","endLine":50,"endColumn":114},{"ruleId":"810","severity":1,"message":"811","line":56,"column":17,"nodeType":"812","endLine":56,"endColumn":32},{"ruleId":"736","severity":1,"message":"813","line":3,"column":8,"nodeType":"738","messageId":"739","endLine":3,"endColumn":14},{"ruleId":"736","severity":1,"message":"814","line":11,"column":7,"nodeType":"738","messageId":"739","endLine":11,"endColumn":25},{"ruleId":"736","severity":1,"message":"815","line":20,"column":9,"nodeType":"738","messageId":"739","endLine":20,"endColumn":19},{"ruleId":"736","severity":1,"message":"816","line":21,"column":9,"nodeType":"738","messageId":"739","endLine":21,"endColumn":15},{"ruleId":"736","severity":1,"message":"817","line":22,"column":9,"nodeType":"738","messageId":"739","endLine":22,"endColumn":20},{"ruleId":"736","severity":1,"message":"818","line":25,"column":9,"nodeType":"738","messageId":"739","endLine":25,"endColumn":20},{"ruleId":"736","severity":1,"message":"819","line":27,"column":9,"nodeType":"738","messageId":"739","endLine":27,"endColumn":18},{"ruleId":"736","severity":1,"message":"820","line":29,"column":9,"nodeType":"738","messageId":"739","endLine":29,"endColumn":23},{"ruleId":"736","severity":1,"message":"821","line":30,"column":9,"nodeType":"738","messageId":"739","endLine":30,"endColumn":22},{"ruleId":"736","severity":1,"message":"822","line":34,"column":9,"nodeType":"738","messageId":"739","endLine":34,"endColumn":25},{"ruleId":"736","severity":1,"message":"823","line":41,"column":9,"nodeType":"738","messageId":"739","endLine":41,"endColumn":23},{"ruleId":"736","severity":1,"message":"824","line":43,"column":9,"nodeType":"738","messageId":"739","endLine":43,"endColumn":28},{"ruleId":"736","severity":1,"message":"825","line":50,"column":12,"nodeType":"738","messageId":"739","endLine":50,"endColumn":23},{"ruleId":"736","severity":1,"message":"826","line":255,"column":7,"nodeType":"738","messageId":"739","endLine":255,"endColumn":19},{"ruleId":"744","severity":1,"message":"745","line":42,"column":8,"nodeType":"746","endLine":42,"endColumn":10,"suggestions":"827"},{"ruleId":"736","severity":1,"message":"828","line":4,"column":5,"nodeType":"738","messageId":"739","endLine":4,"endColumn":12},{"ruleId":"736","severity":1,"message":"829","line":6,"column":5,"nodeType":"738","messageId":"739","endLine":6,"endColumn":15},{"ruleId":"736","severity":1,"message":"830","line":5,"column":18,"nodeType":"738","messageId":"739","endLine":5,"endColumn":27},{"ruleId":"736","severity":1,"message":"831","line":5,"column":52,"nodeType":"738","messageId":"739","endLine":5,"endColumn":59},{"ruleId":"736","severity":1,"message":"786","line":12,"column":13,"nodeType":"738","messageId":"739","endLine":12,"endColumn":17},{"ruleId":"736","severity":1,"message":"804","line":18,"column":12,"nodeType":"738","messageId":"739","endLine":18,"endColumn":17},{"ruleId":"744","severity":1,"message":"745","line":25,"column":8,"nodeType":"746","endLine":25,"endColumn":17,"suggestions":"832"},{"ruleId":"744","severity":1,"message":"833","line":89,"column":8,"nodeType":"746","endLine":89,"endColumn":17,"suggestions":"834"},{"ruleId":"835","severity":1,"message":"836","line":8,"column":11,"nodeType":"837","messageId":"838","endLine":8,"endColumn":13},{"ruleId":"736","severity":1,"message":"786","line":11,"column":13,"nodeType":"738","messageId":"739","endLine":11,"endColumn":17},{"ruleId":"736","severity":1,"message":"752","line":16,"column":12,"nodeType":"738","messageId":"739","endLine":16,"endColumn":19},{"ruleId":"744","severity":1,"message":"833","line":73,"column":8,"nodeType":"746","endLine":73,"endColumn":17,"suggestions":"839"},{"ruleId":"736","severity":1,"message":"840","line":12,"column":13,"nodeType":"738","messageId":"739","endLine":12,"endColumn":18},{"ruleId":"736","severity":1,"message":"803","line":15,"column":18,"nodeType":"738","messageId":"739","endLine":15,"endColumn":25},{"ruleId":"736","severity":1,"message":"752","line":20,"column":12,"nodeType":"738","messageId":"739","endLine":20,"endColumn":19},{"ruleId":"744","severity":1,"message":"841","line":65,"column":8,"nodeType":"746","endLine":65,"endColumn":33,"suggestions":"842"},{"ruleId":"736","severity":1,"message":"806","line":15,"column":12,"nodeType":"738","messageId":"739","endLine":15,"endColumn":16},{"ruleId":"736","severity":1,"message":"805","line":16,"column":12,"nodeType":"738","messageId":"739","endLine":16,"endColumn":19},{"ruleId":"744","severity":1,"message":"843","line":80,"column":8,"nodeType":"746","endLine":80,"endColumn":17,"suggestions":"844"},{"ruleId":"736","severity":1,"message":"840","line":11,"column":13,"nodeType":"738","messageId":"739","endLine":11,"endColumn":18},{"ruleId":"736","severity":1,"message":"786","line":11,"column":20,"nodeType":"738","messageId":"739","endLine":11,"endColumn":24},{"ruleId":"736","severity":1,"message":"803","line":13,"column":18,"nodeType":"738","messageId":"739","endLine":13,"endColumn":25},{"ruleId":"736","severity":1,"message":"804","line":15,"column":12,"nodeType":"738","messageId":"739","endLine":15,"endColumn":17},{"ruleId":"744","severity":1,"message":"807","line":55,"column":8,"nodeType":"746","endLine":55,"endColumn":10,"suggestions":"845"},{"ruleId":"736","severity":1,"message":"846","line":6,"column":41,"nodeType":"738","messageId":"739","endLine":6,"endColumn":49},{"ruleId":"736","severity":1,"message":"847","line":27,"column":9,"nodeType":"738","messageId":"739","endLine":27,"endColumn":24},{"ruleId":"744","severity":1,"message":"848","line":59,"column":8,"nodeType":"746","endLine":59,"endColumn":17,"suggestions":"849"},{"ruleId":"744","severity":1,"message":"848","line":94,"column":8,"nodeType":"746","endLine":94,"endColumn":16,"suggestions":"850"},{"ruleId":"736","severity":1,"message":"851","line":7,"column":17,"nodeType":"738","messageId":"739","endLine":7,"endColumn":22},{"ruleId":"736","severity":1,"message":"752","line":38,"column":12,"nodeType":"738","messageId":"739","endLine":38,"endColumn":19},{"ruleId":"736","severity":1,"message":"852","line":54,"column":12,"nodeType":"738","messageId":"739","endLine":54,"endColumn":25},{"ruleId":"744","severity":1,"message":"853","line":98,"column":8,"nodeType":"746","endLine":98,"endColumn":10,"suggestions":"854"},{"ruleId":"736","severity":1,"message":"855","line":7,"column":18,"nodeType":"738","messageId":"739","endLine":7,"endColumn":22},{"ruleId":"736","severity":1,"message":"840","line":14,"column":37,"nodeType":"738","messageId":"739","endLine":14,"endColumn":42},{"ruleId":"736","severity":1,"message":"856","line":25,"column":12,"nodeType":"738","messageId":"739","endLine":25,"endColumn":21},{"ruleId":"744","severity":1,"message":"857","line":42,"column":8,"nodeType":"746","endLine":42,"endColumn":16,"suggestions":"858"},{"ruleId":"736","severity":1,"message":"859","line":5,"column":18,"nodeType":"738","messageId":"739","endLine":5,"endColumn":24},{"ruleId":"736","severity":1,"message":"860","line":4,"column":10,"nodeType":"738","messageId":"739","endLine":4,"endColumn":15},{"ruleId":"736","severity":1,"message":"859","line":5,"column":24,"nodeType":"738","messageId":"739","endLine":5,"endColumn":30},{"ruleId":"736","severity":1,"message":"859","line":4,"column":10,"nodeType":"738","messageId":"739","endLine":4,"endColumn":16},{"ruleId":"736","severity":1,"message":"859","line":4,"column":65,"nodeType":"738","messageId":"739","endLine":4,"endColumn":71},{"ruleId":"736","severity":1,"message":"780","line":5,"column":59,"nodeType":"738","messageId":"739","endLine":5,"endColumn":71},{"ruleId":"744","severity":1,"message":"861","line":86,"column":8,"nodeType":"746","endLine":86,"endColumn":17,"suggestions":"862"},{"ruleId":"744","severity":1,"message":"863","line":97,"column":8,"nodeType":"746","endLine":97,"endColumn":16,"suggestions":"864"},{"ruleId":"736","severity":1,"message":"804","line":17,"column":12,"nodeType":"738","messageId":"739","endLine":17,"endColumn":17},{"ruleId":"744","severity":1,"message":"833","line":81,"column":8,"nodeType":"746","endLine":81,"endColumn":17,"suggestions":"865"},{"ruleId":"740","replacedBy":"866"},{"ruleId":"742","replacedBy":"867"},{"ruleId":"736","severity":1,"message":"868","line":10,"column":10,"nodeType":"738","messageId":"739","endLine":10,"endColumn":14},{"ruleId":"736","severity":1,"message":"786","line":13,"column":13,"nodeType":"738","messageId":"739","endLine":13,"endColumn":17},{"ruleId":"736","severity":1,"message":"753","line":13,"column":26,"nodeType":"738","messageId":"739","endLine":13,"endColumn":33},{"ruleId":"736","severity":1,"message":"806","line":16,"column":12,"nodeType":"738","messageId":"739","endLine":16,"endColumn":16},{"ruleId":"736","severity":1,"message":"805","line":17,"column":12,"nodeType":"738","messageId":"739","endLine":17,"endColumn":19},{"ruleId":"744","severity":1,"message":"833","line":78,"column":8,"nodeType":"746","endLine":78,"endColumn":10,"suggestions":"869"},{"ruleId":"736","severity":1,"message":"788","line":2,"column":10,"nodeType":"738","messageId":"739","endLine":2,"endColumn":25},{"ruleId":"736","severity":1,"message":"840","line":10,"column":21,"nodeType":"738","messageId":"739","endLine":10,"endColumn":26},{"ruleId":"736","severity":1,"message":"752","line":16,"column":12,"nodeType":"738","messageId":"739","endLine":16,"endColumn":19},{"ruleId":"744","severity":1,"message":"870","line":30,"column":8,"nodeType":"746","endLine":30,"endColumn":16,"suggestions":"871"},{"ruleId":"736","severity":1,"message":"872","line":2,"column":10,"nodeType":"738","messageId":"739","endLine":2,"endColumn":17},{"ruleId":"736","severity":1,"message":"873","line":2,"column":45,"nodeType":"738","messageId":"739","endLine":2,"endColumn":67},{"ruleId":"736","severity":1,"message":"802","line":6,"column":10,"nodeType":"738","messageId":"739","endLine":6,"endColumn":16},{"ruleId":"736","severity":1,"message":"874","line":6,"column":18,"nodeType":"738","messageId":"739","endLine":6,"endColumn":30},{"ruleId":"736","severity":1,"message":"875","line":8,"column":20,"nodeType":"738","messageId":"739","endLine":8,"endColumn":27},{"ruleId":"736","severity":1,"message":"752","line":16,"column":12,"nodeType":"738","messageId":"739","endLine":16,"endColumn":19},{"ruleId":"736","severity":1,"message":"806","line":19,"column":12,"nodeType":"738","messageId":"739","endLine":19,"endColumn":16},{"ruleId":"736","severity":1,"message":"876","line":19,"column":18,"nodeType":"738","messageId":"739","endLine":19,"endColumn":25},{"ruleId":"736","severity":1,"message":"805","line":20,"column":12,"nodeType":"738","messageId":"739","endLine":20,"endColumn":19},{"ruleId":"736","severity":1,"message":"877","line":20,"column":21,"nodeType":"738","messageId":"739","endLine":20,"endColumn":31},{"ruleId":"744","severity":1,"message":"878","line":28,"column":8,"nodeType":"746","endLine":28,"endColumn":16,"suggestions":"879"},{"ruleId":"736","severity":1,"message":"752","line":30,"column":12,"nodeType":"738","messageId":"739","endLine":30,"endColumn":19},{"ruleId":"736","severity":1,"message":"852","line":38,"column":12,"nodeType":"738","messageId":"739","endLine":38,"endColumn":25},{"ruleId":"744","severity":1,"message":"880","line":62,"column":8,"nodeType":"746","endLine":62,"endColumn":17,"suggestions":"881"},{"ruleId":"736","severity":1,"message":"752","line":16,"column":12,"nodeType":"738","messageId":"739","endLine":16,"endColumn":19},{"ruleId":"736","severity":1,"message":"855","line":7,"column":18,"nodeType":"738","messageId":"739","endLine":7,"endColumn":22},{"ruleId":"736","severity":1,"message":"840","line":14,"column":37,"nodeType":"738","messageId":"739","endLine":14,"endColumn":42},{"ruleId":"736","severity":1,"message":"856","line":26,"column":12,"nodeType":"738","messageId":"739","endLine":26,"endColumn":21},{"ruleId":"744","severity":1,"message":"882","line":55,"column":8,"nodeType":"746","endLine":55,"endColumn":16,"suggestions":"883"},{"ruleId":"736","severity":1,"message":"815","line":8,"column":13,"nodeType":"738","messageId":"739","endLine":8,"endColumn":23},{"ruleId":"736","severity":1,"message":"884","line":3,"column":8,"nodeType":"738","messageId":"739","endLine":3,"endColumn":20},{"ruleId":"736","severity":1,"message":"752","line":17,"column":12,"nodeType":"738","messageId":"739","endLine":17,"endColumn":19},{"ruleId":"736","severity":1,"message":"856","line":25,"column":12,"nodeType":"738","messageId":"739","endLine":25,"endColumn":21},{"ruleId":"744","severity":1,"message":"885","line":49,"column":8,"nodeType":"746","endLine":49,"endColumn":10,"suggestions":"886"},{"ruleId":"736","severity":1,"message":"887","line":177,"column":7,"nodeType":"738","messageId":"739","endLine":177,"endColumn":21},{"ruleId":"736","severity":1,"message":"752","line":16,"column":12,"nodeType":"738","messageId":"739","endLine":16,"endColumn":19},"no-unused-vars","'styles' is defined but never used.","Identifier","unusedVar","no-native-reassign",["888"],"no-negated-in-lhs",["889"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["890"],"React Hook useEffect has a missing dependency: 'user._id'. Either include it or remove the dependency array.",["891"],"'response' is assigned a value but never used.","'isDetail' is assigned a value but never used.","'loading' is assigned a value but never used.","'refresh' is assigned a value but never used.","'setLoading' is assigned a value but never used.",["892"],"'size' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'baker.dislikes.users.length', 'baker.followers.users.length', 'baker.length', and 'baker.likes.users.length'. Either include them or remove the dependency array.",["893"],["894"],"'Switch' is defined but never used.","'error' is assigned a value but never used.","'passwordError' is assigned a value but never used.","'emailError' is assigned a value but never used.","'Links' is defined but never used.","'active' is assigned a value but never used.","'setActive' is assigned a value but never used.","'pans1' is defined but never used.","'Language' is defined but never used.","'Profile' is defined but never used.","'SearchBar' is defined but never used.","'IoCart' is defined but never used.","'IoEnter' is defined but never used.","'IoLogInSharp' is defined but never used.","React Hook useEffect has missing dependencies: 'pastries' and 'props.setPastries'. Either include them or remove the dependency array.",["895"],"'pans2' is defined but never used.","React Hook useEffect has missing dependencies: 'props' and 'user._id'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["896"],"'logo5' is defined but never used.","'PastryDetail' is defined but never used.","'filter' is assigned a value but never used.","'detail' is assigned a value but never used.","'value' is assigned a value but never used.","'setError' is assigned a value but never used.",["897"],"'user' is assigned a value but never used.",["898"],"'IoTrashBinSharp' is defined but never used.","'useEffect' is defined but never used.","'name' is assigned a value but never used.","'image' is assigned a value but never used.",["899"],"React Hook useEffect has missing dependencies: 'pastry.dislikes.users.length', 'pastry.length', and 'pastry.likes.users.length'. Either include them or remove the dependency array.",["900"],["901"],"React Hook useEffect has missing dependencies: 'pastry.length', 'pastry.message', 'pastry.pastryId.dislikes.users.length', 'pastry.pastryId.likes.users.length', and 'pastry.quantity'. Either include them or remove the dependency array.",["902"],"React Hook useEffect has a missing dependency: 'setShow'. Either include it or remove the dependency array.",["903"],"'OrderDetails' is defined but never used.",["904"],"'Button' is defined but never used.","'setPage' is assigned a value but never used.","'total' is assigned a value but never used.","'message' is assigned a value but never used.","'show' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'page' and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["905"],"'IoLogoInstagram' is defined but never used.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute","'Select' is defined but never used.","'animatedComponents' is assigned a value but never used.","'categories' is assigned a value but never used.","'idCard' is assigned a value but never used.","'errorIdCard' is assigned a value but never used.","'companyName' is assigned a value but never used.","'setIdCard' is assigned a value but never used.","'setCompanyName' is assigned a value but never used.","'setCategories' is assigned a value but never used.","'errorCompanyName' is assigned a value but never used.","'setErrorIdCard' is assigned a value but never used.","'setErrorCompanyName' is assigned a value but never used.","'_categories' is assigned a value but never used.","'colourStyles' is assigned a value but never used.",["906"],"'IoBrush' is defined but never used.","'IoDocument' is defined but never used.","'ButtonOne' is defined but never used.","'LinkOne' is defined but never used.",["907"],"React Hook useEffect has missing dependencies: 'props' and 'token'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["908"],"no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","unexpected",["909"],"'token' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'page', 'props', and 'user._id'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["910"],"React Hook useEffect has missing dependencies: 'props', 'token', and 'user._id'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["911"],["912"],"'Selector' is defined but never used.","'errorCategories' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'token'. Either include it or remove the dependency array.",["913"],["914"],"'vals3' is defined but never used.","'locationError' is assigned a value but never used.","React Hook useEffect has missing dependencies: '_categories', 'locations', 'user.about', 'user.categories', 'user.companyName', 'user.email', 'user.location', 'user.momoName', 'user.momoNumber', 'user.name', and 'user.telNumber'. Either include them or remove the dependency array.",["915"],"'Link' is defined but never used.","'typeError' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'user.categories'. Either include it or remove the dependency array.",["916"],"'Spacer' is defined but never used.","'logo6' is defined but never used.","React Hook useEffect has missing dependencies: 'bakerId', 'props', and 'token'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["917"],"React Hook useEffect has a missing dependency: '_pastries'. Either include it or remove the dependency array.",["918"],["919"],["888"],["889"],"'data' is defined but never used.",["920"],"React Hook useEffect has missing dependencies: '_user.dislikes.users.length', '_user.length', '_user.likes.users.length', and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["921"],"'IoClose' is defined but never used.","'IoPhonePortraitOutline' is defined but never used.","'Notification' is defined but never used.","'HNumber' is defined but never used.","'setShow' is assigned a value but never used.","'setMessage' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'order.length', 'order.userId.dislikes.users.length', 'order.userId.likes.users.length', and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["922"],"React Hook useEffect has missing dependencies: 'locations', 'props', 'user.email', 'user.location', 'user.name', and 'user.telNumber'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["923"],"React Hook useEffect has missing dependencies: 'pastry.description', 'pastry.discount', 'pastry.image', 'pastry.name', 'pastry.price', 'pastry.recipe', 'pastry.type', and 'user.categories'. Either include them or remove the dependency array.",["924"],"'makeAnimated' is defined but never used.","React Hook useEffect has missing dependencies: 'user.email', 'user.name', 'user.telNumber', and 'user.type'. Either include them or remove the dependency array.",["925"],"'locationStyles' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"926","fix":"927"},{"desc":"928","fix":"929"},{"desc":"930","fix":"931"},{"desc":"932","fix":"933"},{"desc":"934","fix":"935"},{"desc":"936","fix":"937"},{"desc":"938","fix":"939"},{"desc":"934","fix":"940"},{"desc":"934","fix":"941"},{"desc":"934","fix":"942"},{"desc":"943","fix":"944"},{"desc":"934","fix":"945"},{"desc":"946","fix":"947"},{"desc":"948","fix":"949"},{"desc":"934","fix":"950"},{"desc":"951","fix":"952"},{"desc":"930","fix":"953"},{"desc":"934","fix":"954"},{"desc":"955","fix":"956"},{"desc":"955","fix":"957"},{"desc":"958","fix":"959"},{"desc":"960","fix":"961"},{"desc":"951","fix":"962"},{"desc":"963","fix":"964"},{"desc":"965","fix":"966"},{"desc":"967","fix":"968"},{"desc":"969","fix":"970"},{"desc":"971","fix":"972"},{"desc":"973","fix":"974"},{"desc":"955","fix":"975"},{"desc":"976","fix":"977"},{"desc":"978","fix":"979"},{"desc":"980","fix":"981"},{"desc":"982","fix":"983"},{"desc":"984","fix":"985"},{"desc":"986","fix":"987"},"Update the dependencies array to be: [isDetail, props]",{"range":"988","text":"989"},"Update the dependencies array to be: [refresh, user._id]",{"range":"990","text":"991"},"Update the dependencies array to be: [props]",{"range":"992","text":"993"},"Update the dependencies array to be: [baker.dislikes.users.length, baker.followers.users.length, baker.length, baker.likes.users.length, detail]",{"range":"994","text":"995"},"Update the dependencies array to be: [props, refresh]",{"range":"996","text":"997"},"Update the dependencies array to be: [pastries, props.setPastries, text]",{"range":"998","text":"999"},"Update the dependencies array to be: [props, refresh, user._id]",{"range":"1000","text":"1001"},{"range":"1002","text":"997"},{"range":"1003","text":"997"},{"range":"1004","text":"997"},"Update the dependencies array to be: [detail, pastry.dislikes.users.length, pastry.length, pastry.likes.users.length]",{"range":"1005","text":"1006"},{"range":"1007","text":"997"},"Update the dependencies array to be: [detail, pastry.length, pastry.message, pastry.pastryId.dislikes.users.length, pastry.pastryId.likes.users.length, pastry.quantity]",{"range":"1008","text":"1009"},"Update the dependencies array to be: [setShow, show]",{"range":"1010","text":"1011"},{"range":"1012","text":"997"},"Update the dependencies array to be: [page, props]",{"range":"1013","text":"1014"},{"range":"1015","text":"993"},{"range":"1016","text":"997"},"Update the dependencies array to be: [props, refresh, token]",{"range":"1017","text":"1018"},{"range":"1019","text":"1018"},"Update the dependencies array to be: [isOpen, refresh, isEdit, user._id, page, props]",{"range":"1020","text":"1021"},"Update the dependencies array to be: [props, refresh, token, user._id]",{"range":"1022","text":"1023"},{"range":"1024","text":"1014"},"Update the dependencies array to be: [rbakers, token]",{"range":"1025","text":"1026"},"Update the dependencies array to be: [rusers, token]",{"range":"1027","text":"1028"},"Update the dependencies array to be: [_categories, locations, user.about, user.categories, user.companyName, user.email, user.location, user.momoName, user.momoNumber, user.name, user.telNumber]",{"range":"1029","text":"1030"},"Update the dependencies array to be: [isOpen, user.categories]",{"range":"1031","text":"1032"},"Update the dependencies array to be: [bakerId, props, refresh, token]",{"range":"1033","text":"1034"},"Update the dependencies array to be: [_pastries, filter]",{"range":"1035","text":"1036"},{"range":"1037","text":"1018"},"Update the dependencies array to be: [props, token]",{"range":"1038","text":"1039"},"Update the dependencies array to be: [_user.dislikes.users.length, _user.length, _user.likes.users.length, detail, props]",{"range":"1040","text":"1041"},"Update the dependencies array to be: [detail, order.length, order.userId.dislikes.users.length, order.userId.likes.users.length, props]",{"range":"1042","text":"1043"},"Update the dependencies array to be: [locations, props, refresh, user.email, user.location, user.name, user.telNumber]",{"range":"1044","text":"1045"},"Update the dependencies array to be: [isOpen, pastry.description, pastry.discount, pastry.image, pastry.name, pastry.price, pastry.recipe, pastry.type, user.categories]",{"range":"1046","text":"1047"},"Update the dependencies array to be: [user.email, user.name, user.telNumber, user.type]",{"range":"1048","text":"1049"},[951,961],"[isDetail, props]",[2502,2511],"[refresh, user._id]",[796,798],"[props]",[1159,1167],"[baker.dislikes.users.length, baker.followers.users.length, baker.length, baker.likes.users.length, detail]",[1383,1392],"[props, refresh]",[612,618],"[pastries, props.setPastries, text]",[2549,2558],"[props, refresh, user._id]",[843,852],[811,820],[1020,1029],[1465,1473],"[detail, pastry.dislikes.users.length, pastry.length, pastry.likes.users.length]",[1011,1020],[4237,4245],"[detail, pastry.length, pastry.message, pastry.pastryId.dislikes.users.length, pastry.pastryId.likes.users.length, pastry.quantity]",[273,279],"[setShow, show]",[942,951],[1632,1634],"[page, props]",[1207,1209],[994,1003],[2939,2948],"[props, refresh, token]",[2520,2529],[2462,2487],"[isOpen, refresh, isEdit, user._id, page, props]",[2746,2755],"[props, refresh, token, user._id]",[2090,2092],[2273,2282],"[rbakers, token]",[3300,3308],"[rusers, token]",[3942,3944],"[_categories, locations, user.about, user.categories, user.companyName, user.email, user.location, user.momoName, user.momoNumber, user.name, user.telNumber]",[1668,1676],"[isOpen, user.categories]",[2748,2757],"[bakerId, props, refresh, token]",[3021,3029],"[_pastries, filter]",[2698,2707],[2656,2658],"[props, token]",[1063,1071],"[_user.dislikes.users.length, _user.length, _user.likes.users.length, detail, props]",[1150,1158],"[detail, order.length, order.userId.dislikes.users.length, order.userId.likes.users.length, props]",[2421,2430],"[locations, props, refresh, user.email, user.location, user.name, user.telNumber]",[2133,2141],"[isOpen, pastry.description, pastry.discount, pastry.image, pastry.name, pastry.price, pastry.recipe, pastry.type, user.categories]",[1791,1793],"[user.email, user.name, user.telNumber, user.type]"]